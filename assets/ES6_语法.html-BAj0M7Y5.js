import{_ as e,r as o,o as c,c as l,d as n,a as p,e as s,b as a}from"./app-Bvx-HY_0.js";const i="/static_blog/assets/image-20230410110121037-D6niDO-Q.png",u="/static_blog/assets/image-20210917112206551-Bf5_fZJ4.png",r="/static_blog/assets/image-20200921174129923-_Ld93DLg.png",k="/static_blog/assets/image-20200921174421861-Cf7N2X_3.png",d="/static_blog/assets/image-20210425195525649-ofDsvZ15.png",v="/static_blog/assets/image-20210422131258473-Bl69LbPY.png",m="/static_blog/assets/image-20210331160240361-DPw6YfAs.png",b="/static_blog/assets/image-20210425193715820-TPvzh8Ma.png",g={},f=a(`<h2 id="es6" tabindex="-1"><a class="header-anchor" href="#es6"><span>ES6</span></a></h2><h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础</span></a></h2><h3 id="babel转码器" tabindex="-1"><a class="header-anchor" href="#babel转码器"><span>Babel转码器</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 安装Babel</span>
<span class="token function">npm</span> <span class="token function">install</span> --save-dev @babel/core

<span class="token comment">## 初始化Babel-cli</span>
<span class="token function">npm</span> init <span class="token parameter variable">-y</span>

<span class="token comment">## 在项目中安装Babel-cli</span>
<span class="token function">npm</span> i <span class="token parameter variable">-g</span> babel-cli



<span class="token comment"># presets字段设定转码规则集（按需安装）</span>
<span class="token comment">## 最新转码规则</span>
<span class="token function">npm</span> <span class="token function">install</span> --save-dev @babel/preset-env
<span class="token comment">## react 转码规则</span>
<span class="token function">npm</span> <span class="token function">install</span> --save-dev @babel/preset-react
<span class="token comment">## 本地安装 babel-preset-es2015 和 babel-cli</span>
<span class="token function">npm</span> <span class="token function">install</span> --save-dev babel-preset-es2015 babel-cli
<span class="token comment">## 安装babel-none，提供一个支持ES6的RERL环境，支持node， 运用：npx babel-node es6.js</span>
<span class="token function">npm</span> <span class="token function">install</span> --save-dev @babel/node


<span class="token comment"># Babel-cli</span>
<span class="token comment">## 转码结果输出到标准输出</span>
npx babel example.js

<span class="token comment">## 转码结果ES6转换为ES5文件（--out-file 或 -o 参数指定输出文件） 或 npx babel src/example.js -o dist/compiled.js</span>
npx babel src/example.js --out-file dist/compiled.js

<span class="token comment">## 整个目录转码（--out-dir 或 -d 参数指定输出目录）  或 npx babel src -d lib</span>
npx babel src --out-dir lib

<span class="token comment"># -s 参数生成source map文件</span>
npx babel src <span class="token parameter variable">-d</span> lib <span class="token parameter variable">-s</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-.babelrc line-numbers-mode" data-ext=".babelrc" data-title=".babelrc"><pre class="language-.babelrc"><code>/* 在根目录下新建\`.babelrc\`文件 */
{
&quot;presets&quot;: [ // 设置转码规则
 &quot;es2015&quot;,
 &quot;@babel/env&quot;,
 &quot;@babel/preset-react&quot;,
],
&quot;plugins&quot;: [] // 设置插件
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="严格模式" tabindex="-1"><a class="header-anchor" href="#严格模式"><span>严格模式</span></a></h3><blockquote><ul><li>严格模式的作用：消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为；需要放在首行</li><li>可分<code>为脚本开启严格模式</code>和<code>为函数开启严格模式</code>两种情况。</li><li>为脚本开启严格模式：为整个脚本开启严格模式，需要在所有语句之前放一个特定语句**&quot;use strict&quot;;**。</li><li>严格模式的变化： <ul><li>在全局作用域函数中的<code>this</code>指向<code>window</code>--&gt;<code>在全局作用域函数中的this</code>为<code>undefined</code>。</li><li>构造函数不加<code>new</code>也可以调用，当普通函数，<code>this</code>指向全局对象--&gt;如果构造函数不加<code>new</code>调用<code>this</code>会报错。</li><li><code>new</code>实例化的构造函数指向创建的对象实例。</li><li>定时器中的<code>this</code>指向<code>window</code>。</li><li>事件、对象还是指向调用者。</li></ul></li><li>函数变化 <ul><li>函数不能有重名的参数。</li><li>函数必须声明在顶层，不允许在非函数的代码块内声明函数。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 1、变量必须先声明再使用</span>
<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>

<span class="token comment">// 2、不可随意删除已经声明的变量</span>
<span class="token comment">// delete num;  //报错</span>

<span class="token comment">// 3、全局作用域函数下的this是undefined</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//undefined</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 4、构造函数不加new调用，this会报错</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//fun{}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> willy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>willy<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 5、定时器的this还是指向window</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//window</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//函数里面的参数不允许有重名</span>
<span class="token comment">/* function fna(a,a){console.log(a+a);}  //函数重名，ERROR
fna(1,2); */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="es6-函数的严格模式" tabindex="-1"><a class="header-anchor" href="#es6-函数的严格模式"><span>ES6 函数的严格模式</span></a></h4><blockquote><p>从 ES5 开始，函数内部可以设定为严格模式。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>  
    <span class="token comment">// code</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ES2016 做了一点修改，规定只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 报错</span>
<span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b <span class="token operator">=</span> a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>
  <span class="token comment">// code</span>
<span class="token punctuation">}</span>

<span class="token comment">// 报错</span>
<span class="token keyword">const</span> <span class="token function-variable function">doSomething</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>a<span class="token punctuation">,</span> b<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>
  <span class="token comment">// code</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 报错</span>
<span class="token keyword">const</span> <span class="token function-variable function">doSomething</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>a</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>
  <span class="token comment">// code</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 报错</span>
  <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>a<span class="token punctuation">,</span> b<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>
    <span class="token comment">// code</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样规定的原因是，函数内部的严格模式，同时适用于函数体和函数参数。但是，函数执行的时候，先执行函数参数，然后再执行函数体。这样就有一个不合理的地方，只有从函数体之中，才能知道参数是否应该以严格模式执行，但是参数却应该先于函数体执行。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 报错</span>
<span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token parameter">value <span class="token operator">=</span> <span class="token number">070</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，参数<code>value</code>的默认值是八进制数<code>070</code>，但是严格模式下不能用前缀<code>0</code>表示八进制，所以应该报错。但是实际上，JavaScript 引擎会先成功执行<code>value = 070</code>，然后进入函数体内部，发现需要用严格模式执行，这时才会报错。</p><p>虽然可以先解析函数体代码，再执行参数代码，但是这样无疑就增加了复杂性。因此，标准索性禁止了这种用法，只要参数使用了默认值、解构赋值、或者扩展运算符，就不能显式指定严格模式。</p><p>两种方法可以规避这种限制。第一种是设定全局性的严格模式，这是合法的。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b <span class="token operator">=</span> a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// code</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二种是把函数包在一个无参数的立即执行函数里面。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> doSomething <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value <span class="token operator">=</span> <span class="token number">42</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 数据类型</span>
<span class="token number">1</span>. JS 中的 <span class="token number">8</span> 种数据类型及区别
- JS数据类型有8种：<span class="token variable"><span class="token variable">\`</span>Number、String、Boolean、Null、undefined、object、symbol、bigInt<span class="token variable">\`</span></span>
- 基本类型<span class="token punctuation">(</span>值类型<span class="token punctuation">)</span>：<span class="token variable"><span class="token variable">\`</span>Undefined、Null、Boolean、Number、String、Symbol、BigInt<span class="token variable">\`</span></span>（除了object）
- 引用类型<span class="token punctuation">(</span>复杂数据类型<span class="token punctuation">)</span>：<span class="token variable"><span class="token variable">\`</span>Object<span class="token variable">\`</span></span>（Object 包含 Function、Array、Date、RegExp、特殊的基本包装类型<span class="token punctuation">(</span>String、Number、Boolean<span class="token punctuation">)</span> 以及单体内置对象<span class="token punctuation">(</span>Global、Math<span class="token punctuation">)</span>等）。


<span class="token number">2</span>. 存储空间
- 栈：存储基本数据类型的值和执行代码的环境。
- 堆：堆内存存储的是引用类型值的空间（对象的变量标识符以及对象在内存中的存储地址）。

- 基本数据类型：
		- 在内存中占据固定大小，保存在栈内存中。其存储的是值。
		- 可以直接操作保存在变量中的实际值（基本数据类型的实际值）。

- 引用数据类型：
		- 复杂数据类型的值存储在堆内存中<span class="token punctuation">(</span>每个空间大小都不一样，会根据情况进行特定的配置<span class="token punctuation">)</span>，地址<span class="token punctuation">(</span>指向堆中的值<span class="token punctuation">)</span>存储在栈内存。
		- 当我们把对象赋值给另外一个变量时，复制的是地址，指向同一块内存空间，当其中一个对象改变时，另一个对象也会变化。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="数据类型检测方案" tabindex="-1"><a class="header-anchor" href="#数据类型检测方案"><span>数据类型检测方案</span></a></h4><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 数据类型检测方案</span>
<span class="token comment">### 1. typeof：</span>
  - 主要用作基础数据类型的判定，返回值有如下：<span class="token variable"><span class="token variable">\`</span>string、boolean、number、function、object、undefined、bigInt<span class="token variable">\`</span></span>。
      其中在判定 <span class="token variable"><span class="token variable">\`</span>null、array、object<span class="token variable">\`</span></span> 以及函数实例（new+函数）时，都返回<span class="token variable"><span class="token variable">\`</span>object<span class="token variable">\`</span></span>。
      但 <span class="token variable"><span class="token variable">\`</span><span class="token keyword">function</span><span class="token variable">\`</span></span> 还是会判断出为 <span class="token variable"><span class="token variable">\`</span><span class="token keyword">function</span><span class="token variable">\`</span></span> 类型
      - 优点：能够快速区分基本数据类型
      - 缺点：不能将Object、Array和Null区分，都返回object

<span class="token comment">### 2. instanceof：</span>
  - 只能正确判定引用数据类型，而不能判断基本数据类型，其内部运行机制是判断一个对象在其原型链中依次向下查询栏能否找到该类型的原型<span class="token punctuation">(</span>构造函数的prototype属性<span class="token punctuation">)</span>。
      如obj2的原型属性存在obj1的原型链上，即当obj1是obj2的实例，则<span class="token variable"><span class="token variable">\`</span>obj1 instanceof obj2<span class="token variable">\`</span></span>的值为true。
      - 优点：能够区分Array、Object 和 Function，适合用于判断自定义的类实例对象
			- 缺点：Number、Boolean、String 基本数据类型不能判断

<span class="token comment">### 3. constructor：</span>
  - 一是判断数据类型，二是对象实例通过<span class="token variable"><span class="token variable">\`</span>constructor<span class="token variable">\`</span></span>对象访问它的构造函数。
        注意：如果创建一个对象来改变它的原型，constructor 就不能用来判断数据类型。

<span class="token comment">### 4. Object.prototype.toString.call()</span>
  - 使用 Object 对象的原型方法 <span class="token variable"><span class="token variable">\`</span>toString<span class="token variable">\`</span></span> 来判断数据类型。



<span class="token comment">### 判断数组的类型</span>
- 通过Object.prototype.toString.call<span class="token punctuation">(</span><span class="token punctuation">)</span>：<span class="token variable"><span class="token variable">\`</span>Object.prototype.toString.call<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>.slice<span class="token punctuation">(</span><span class="token number">8</span>,-1<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">&#39;Array&#39;</span><span class="token variable">\`</span></span>
- 通过constructor判断：<span class="token variable"><span class="token variable">\`</span>obj.constructor <span class="token operator">==</span><span class="token operator">=</span> Array<span class="token variable">\`</span></span>
- 通过instanceof做判断：<span class="token variable"><span class="token variable">\`</span>obj instanceof Array<span class="token variable">\`</span></span>
- 通过ES6的Array.isArray<span class="token punctuation">(</span><span class="token punctuation">)</span>判断：<span class="token variable"><span class="token variable">\`</span>Array.isArrray<span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token variable">\`</span></span>
- 通过原型链判断：<span class="token variable"><span class="token variable">\`</span>obj.__proto__ <span class="token operator">==</span><span class="token operator">=</span> Array.prototype<span class="token variable">\`</span></span>
- 通过Array.prototype.isPrototypeOf：<span class="token variable"><span class="token variable">\`</span>Array.prototype.isPrototypeOf<span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token variable">\`</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/** typeof */</span>
<span class="token keyword">typeof</span> <span class="token string">&quot;willy&quot;</span> <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span>
<span class="token keyword">typeof</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span>
<span class="token keyword">typeof</span> <span class="token number">NaN</span> <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span>
<span class="token keyword">typeof</span> <span class="token boolean">false</span> <span class="token operator">===</span> <span class="token string">&#39;boolean&#39;</span>
<span class="token keyword">typeof</span> <span class="token keyword">undefined</span> <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span>
<span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span>
<span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span>
<span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span>
<span class="token keyword">typeof</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span>


<span class="token doc-comment comment">/** instanceof */</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// false </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;str&#39;</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// false </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Function <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span>							<span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span>							<span class="token comment">// true</span>
<span class="token comment">// 原型链</span>
<span class="token keyword">function</span> <span class="token function">obj1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">obj1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2 <span class="token keyword">instanceof</span> <span class="token class-name">obj1</span><span class="token punctuation">)</span>	<span class="token comment">// true</span>


<span class="token doc-comment comment">/**  constructor 给对象修改原型 */</span>
<span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Fn<span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">)</span> <span class="token comment">// true</span>


<span class="token doc-comment comment">/** Object.prototype.toString.call() */</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 					<span class="token comment">// [object Number]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  			<span class="token comment">// [object Boolean]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;str&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token comment">// [object String]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  				<span class="token comment">// [object Array]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Function]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  				<span class="token comment">// [object Object]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	 <span class="token comment">// [object Undefined]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  			 <span class="token comment">// [object Null]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  	 <span class="token comment">// [object Map]</span>


<span class="token doc-comment comment">/** 获取数据类型的方法封装 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">getType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="【instanceof-运算符】实现" tabindex="-1"><a class="header-anchor" href="#【instanceof-运算符】实现"><span>【instanceof 运算符】实现</span></a></h4><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 【instanceof 运算符】实现</span>
instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。

只能正确判定引用数据类型，而不能判断基本数据类型，其内部运行机制是判断一个对象在其原型链中依次向下查询栏能否找到该类型的原型<span class="token punctuation">(</span>构造函数的prototype属性<span class="token punctuation">)</span>。
      如obj2的原型属性存在obj1的原型链上，即当obj1是obj2的实例，则<span class="token variable"><span class="token variable">\`</span>obj1 instanceof obj2<span class="token variable">\`</span></span>的值为true。
      - 优点：能够区分Array、Object 和 Function，适合用于判断自定义的类实例对象
			- 缺点：Number、Boolean、String 基本数据类型不能判断
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
  * <span class="token keyword">@description</span> 判断对象是否属于某个构造函数
  * <span class="token keyword">@prams</span> left: 实例对象  right: 构造函数
  * <span class="token keyword">@return</span> boolean
*/</span>
<span class="token keyword">const</span> <span class="token function-variable function">myInstanceof</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取构造函数的显示原型</span>
  <span class="token keyword">const</span> rightPrototype <span class="token operator">=</span> right<span class="token punctuation">.</span>prototype
  <span class="token comment">// 获取实例对象的隐式原型</span>
  <span class="token keyword">let</span> leftProto <span class="token operator">=</span> left<span class="token punctuation">.</span>__proto__

  <span class="token comment">// 循环执行，直到找到对应的原型 or 到达原型链顶层</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当到达原型链顶层，还未找到，则返回 false</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftProto <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>

    <span class="token comment">// 隐式原型与显式原型相等</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftProto <span class="token operator">===</span> rightPrototype<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>

    <span class="token comment">// 获取隐式原型的隐式原型，重新赋值给 leftProto，继续向上一层原型链中查找</span>
    leftProto <span class="token operator">=</span> leftProto<span class="token punctuation">.</span>__proto__
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">myInstanceof</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Function<span class="token punctuation">)</span>	<span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="数值运算" tabindex="-1"><a class="header-anchor" href="#数值运算"><span>数值运算</span></a></h3><h4 id="与-的区别" tabindex="-1"><a class="header-anchor" href="#与-的区别"><span><code>==</code> 与 <code>===</code> 的区别</span></a></h4><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## \`==\` 与 \`===\` 的区别</span>
- <span class="token variable"><span class="token variable">\`</span><span class="token operator">==</span><span class="token operator">=</span><span class="token variable">\`</span></span> 表示恒等（类型和值都要相等）。不需要进行类型转换，只有类型相同并且值相等时，才返回 true。

- <span class="token variable"><span class="token variable">\`</span><span class="token operator">==</span><span class="token variable">\`</span></span> 表示相等 （值相等）。如果两者类型不同，会先做类型转换，再判断值是否相等。
    <span class="token number">1</span>. 首先判断两者类型是否相等，如果相等，判断值是否相等。
    <span class="token number">2</span>. 如果类型不同，进行类型转换。
    <span class="token number">3</span>. 判断比较的是否是 null 或者是 undefined，如果是，则返回 true。
    <span class="token number">4</span>. 判断两者类型是否为 string 和 number，如果是，将字符串转换成 number。
		<span class="token number">5</span>. 判断其中一方是否为 boolean，如果是，将 boolean 转为 number 再进行判断。
		<span class="token number">6</span>. 判断其中一方是否为 object 且另一方为 string、number 或 symbol，如果是，将 object 转为原始类型再进行比较。



<span class="token comment">### [] == ![] 为什么为 true ？</span>
<span class="token number">1</span>. 首先 <span class="token variable"><span class="token variable">\`</span><span class="token operator">!</span><span class="token variable">\`</span></span> 的优先级是高于 <span class="token variable"><span class="token variable">\`</span><span class="token operator">==</span><span class="token variable">\`</span></span> 的。
<span class="token number">2</span>. <span class="token variable"><span class="token variable">\`</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token variable">\`</span></span> 引用类型转换成布尔值都是 true，因此 <span class="token variable"><span class="token variable">\`</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token variable">\`</span></span> 的是 false。
<span class="token number">3</span>. 根据上面的步骤中的第五条，其中一方是 boolean，将 boolean 转为 number 再进行判断。
		而 <span class="token boolean">false</span> 转换成 number 对应的值是 <span class="token number">0</span> 。
<span class="token number">4</span>. 根据上面的步骤中的第六条，有一方是 number，那么将 object 也转换为 Number。<span class="token punctuation">[</span><span class="token punctuation">]</span> 转换成数字对应的值为 <span class="token number">0</span>。
		<span class="token punctuation">(</span>空数组转成数字对应的值是 <span class="token number">0</span>，如果数组中只有一个数字，那么转成 number 就是和这个数字，其他情况均为 NaN<span class="token punctuation">)</span>
<span class="token number">5</span>. <span class="token number">0</span> <span class="token operator">==</span> <span class="token number">0</span> 得到结果为 true。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> person2 <span class="token operator">=</span> person1<span class="token punctuation">;</span>
person2<span class="token punctuation">.</span>gae <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1 <span class="token operator">===</span> person2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true，注意复杂数据类型，比较的是引用地址</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="undefined-与-null" tabindex="-1"><a class="header-anchor" href="#undefined-与-null"><span>undefined 与 null</span></a></h4><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## undefined 与 null</span>
- null 和 undefined 的共同点：都是基本数据类型，数据保存在栈中，且在 <span class="token keyword">if</span> 判断语句中值都为 false。

- <span class="token variable"><span class="token variable">\`</span>null<span class="token variable">\`</span></span> 表示<span class="token string">&#39;无&#39;</span>的对象，即空对象。
      <span class="token number">1</span>. 作为函数的参数，表示该函数的参数是正常或意料之中的值空缺。
      <span class="token number">2</span>. 作为对象原型链的终点。
      <span class="token number">3</span>. null 转为数值时为<span class="token variable"><span class="token variable">\`</span><span class="token number">0</span><span class="token variable">\`</span></span>。
      <span class="token number">4</span>. 解除对象引用，便于对象垃圾回收。
      		- 垃圾回收机制：当一个对象不再被任何变量引用时，会被释放
      		- 即 null 是主动释放一个变量引用的对象，表示一个变量不再指向任何对象地址，null会被内存收集器回收。


- <span class="token variable"><span class="token variable">\`</span>undefined<span class="token variable">\`</span></span>表示<span class="token string">&#39;无&#39;</span>的原始值，即变量声明但未赋值。
      <span class="token number">1</span>. 作判断变量是否声明（变量被声明但没有赋值时，就等于undefined）。
      <span class="token number">2</span>. 调用函数时，应该提供的参数没有提供，该参数值为undefined。
      <span class="token number">3</span>. 对象中没有赋值的属性的值为undefined。
      <span class="token number">4</span>. 函数没有返回值时，默认返回undefined。
      <span class="token number">5</span>. undefined 转为数值时为<span class="token variable"><span class="token variable">\`</span>NaN<span class="token variable">\`</span></span>。

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="_0-1-0-2-0-3" tabindex="-1"><a class="header-anchor" href="#_0-1-0-2-0-3"><span>0.1 + 0.2 != 0.3</span></a></h4><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 为什么 0.1 + 0.2 != 0.3</span>
<span class="token number">0.1</span> + <span class="token number">0.2</span> <span class="token operator">!=</span> <span class="token number">0.3</span> 是因为在进制转换和进阶运算的过程中出现精度损失。

计算机无法直接对十进制的数字进行运算, 需要先对照 IEEE <span class="token number">754</span> 规范转换成二进制，然后对阶运算。

<span class="token number">1</span>.进制转换
 <span class="token number">0.1</span>和0.2转换成二进制后会无限循环
     <span class="token number">0.1</span> -<span class="token operator">&gt;</span> <span class="token number">0.0001100110011001</span><span class="token punctuation">..</span>.<span class="token punctuation">(</span>无限循环<span class="token punctuation">)</span>
     <span class="token number">0.2</span> -<span class="token operator">&gt;</span> <span class="token number">0.0011001100110011</span><span class="token punctuation">..</span>.<span class="token punctuation">(</span>无限循环<span class="token punctuation">)</span>
 但是由于IEEE <span class="token number">754</span>尾数位数限制，需要将后面多余的位截掉，这样在进制之间的转换中精度已经损失。

<span class="token number">2</span>.对阶运算
 由于指数位数不相同，运算时需要对阶运算 这部分也可能产生精度损失。
 按照上面两步运算（包括两步的精度损失），最后的结果是
     <span class="token number">0.0100110011001100110011001100110011001100110011001100</span>
 结果转换成十进制之后就是 <span class="token number">0.30000000000000004</span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+i+`" alt="image-20230410110121037"></p></blockquote><h4 id="void-和-undefined-的区别" tabindex="-1"><a class="header-anchor" href="#void-和-undefined-的区别"><span>void 和 undefined 的区别</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">### void 和 undefined 的区别</span>
- 因为不可能重写 <span class="token variable"><span class="token variable">\`</span>void<span class="token variable">\`</span></span> 操作符。因此，<span class="token variable"><span class="token variable">\`</span>void<span class="token variable">\`</span></span> 被用作 <span class="token variable"><span class="token variable">\`</span>undefined<span class="token variable">\`</span></span> 值的替换，以安全的方式获取 <span class="token variable"><span class="token variable">\`</span>undefined<span class="token variable">\`</span></span> 值。
- 而且在 ES5 中，不可能重写 <span class="token variable"><span class="token variable">\`</span>undefined<span class="token variable">\`</span></span>，因为它被 <span class="token variable"><span class="token variable">\`</span>Writeable<span class="token variable">\`</span></span> 设置为 <span class="token variable"><span class="token variable">\`</span><span class="token boolean">false</span><span class="token variable">\`</span></span>。

- <span class="token variable"><span class="token variable">\`</span>void<span class="token variable">\`</span></span>是一个操作符，而不是一个函数。因此不需要将表达式括在括号中。<span class="token variable"><span class="token variable">\`</span>void <span class="token number">0</span><span class="token variable">\`</span></span> 相当于 <span class="token variable"><span class="token variable">\`</span>void<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>。
- 有些缩微器使用 <span class="token variable"><span class="token variable">\`</span>void <span class="token number">0</span><span class="token variable">\`</span></span> 来缩短 <span class="token variable"><span class="token variable">\`</span>undefined<span class="token variable">\`</span></span> 的长度。
- 如果使用立即调用的函数表达式（称为 IIFE），则可以使用 <span class="token variable"><span class="token variable">\`</span>void<span class="token variable">\`</span></span> 将 <span class="token variable"><span class="token variable">\`</span><span class="token keyword">function</span><span class="token variable">\`</span></span> 关键字视为表达式，而不是声明。


<span class="token comment">#### 在落后 ES 引擎中的对比</span>
<span class="token number">1</span>. 在 ES5 浏览器中，直接使用 void 的运算符和 undedfined 的值没有区别。
    void <span class="token number">0</span> <span class="token operator">==</span><span class="token operator">=</span> undefined // <span class="token boolean">true</span>
    void <span class="token number">1</span> <span class="token operator">==</span><span class="token operator">=</span> undefined // <span class="token boolean">true</span>
    void <span class="token string">&#39;Foo&#39;</span> <span class="token operator">==</span><span class="token operator">=</span> undefined // <span class="token boolean">true</span>
    

<span class="token number">2</span>. 在运行 ES3 引擎的旧浏览器中，undefined 是一个全部变量，是可以更改的。
    // 在 ES3 中
    console.log<span class="token punctuation">(</span>undefined<span class="token punctuation">)</span> // undefined
    var undefined <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span>
    console.log<span class="token punctuation">(</span>undefined<span class="token punctuation">)</span> // <span class="token string">&#39;foo&#39;</span>



<span class="token comment">#### void 在箭头函数中的作用</span>
- 当与箭头函数一起使用时，可以使用 <span class="token variable"><span class="token variable">\`</span>void<span class="token variable">\`</span></span> 来避免副作用。
	- 产生副作用原因：ES6 箭头函数允许通过省略函数体中的大括号来使用函数的返回值。

案例：
  如在某些情况下，我们不打算使用函数的返回值，因为它可能会导致不同的行为产生。
    <span class="token variable"><span class="token variable">\`</span>button.onClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> doSomething<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>
    其在返回 <span class="token boolean">false</span> 的情况下，将跳过 click 事件的默认行为，这可能是您不希望看到的。
  而将结果传递给 void 将确保无论执行函数的结果如何，它都不会改变箭头函数的行为：
    <span class="token variable"><span class="token variable">\`</span>button.onClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> void doSomething<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>

现实场景：
  如在 React、Svelte 等库中可以看到使用 void 和箭头函数的优势。
  这些库允许我们在将组件装入 DOM 之后立即执行函数。例如，React 提供 <span class="token variable"><span class="token variable">\`</span>useEffect<span class="token variable">\`</span></span>，Svelte 具有 <span class="token variable"><span class="token variable">\`</span>onMount<span class="token variable">\`</span></span>。
  React： 
    <span class="token variable"><span class="token variable">\`</span>useEffect<span class="token punctuation">((</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> doSomething<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token variable">\`</span></span> 
    它可以在运行时产生 Bug，为了避免这种情况，我们可以使用 void：
    <span class="token variable"><span class="token variable">\`</span>useEffect<span class="token punctuation">((</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> void doSomething<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token variable">\`</span></span>
    或者使用大括号的方式：
    <span class="token variable"><span class="token variable">\`</span>useEffect<span class="token punctuation">((</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> doSomething<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>
	
	
<span class="token comment">#### javascript URI 中的 void</span>
在以 <span class="token variable"><span class="token variable">\`</span>javascript:<span class="token variable">\`</span></span> 为前缀的 URL 中使用了 <span class="token variable"><span class="token variable">\`</span>void<span class="token variable">\`</span></span> 运算符。
默认情况下，浏览器将在遵循 <span class="token variable"><span class="token variable">\`</span>javascript:<span class="token variable">\`</span></span> URI 时计算代码，然后用返回值替换页面内容。

为了防止出现默认行为，代码必须返回 <span class="token variable"><span class="token variable">\`</span>undefined<span class="token variable">\`</span></span>。这就是我们看到以下代码的原因：
	<span class="token variable"><span class="token variable">\`</span><span class="token operator">&lt;</span>a <span class="token assign-left variable">href</span><span class="token operator">=</span><span class="token string">&quot;javascript: void(0);&quot;</span> <span class="token assign-left variable">onclick</span><span class="token operator">=</span><span class="token string">&quot;doSomething&quot;</span><span class="token operator">&gt;</span> <span class="token punctuation">..</span>. <span class="token operator">&lt;</span>/a<span class="token operator">&gt;</span><span class="token variable">\`</span></span>

现在，不推荐使用 <span class="token variable"><span class="token variable">\`</span>javascript:<span class="token variable">\`</span></span> 协议。由于用户可以将未初始化的输入放入事件处理程序中，因此可能会产生安全问题：
	<span class="token variable"><span class="token variable">\`</span><span class="token operator">&lt;</span>a <span class="token assign-left variable">href</span><span class="token operator">=</span><span class="token string">&quot;javascript: alert(&#39;unsanitized input&#39;)&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">..</span>.<span class="token operator">&lt;</span>/a<span class="token operator">&gt;</span><span class="token variable">\`</span></span>

从 v16.9.0 开始，React 还反对使用 <span class="token variable"><span class="token variable">\`</span>javascript:<span class="token variable">\`</span></span> URL。

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="和-object-is-的区别" tabindex="-1"><a class="header-anchor" href="#和-object-is-的区别"><span><code>===</code> 和 Object.is() 的区别</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">### \`===\` 和 Object.is() 的区别</span>
<span class="token variable"><span class="token variable">\`</span>Object.is<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span> 的行为与 <span class="token variable"><span class="token variable">\`</span><span class="token operator">==</span><span class="token operator">=</span><span class="token variable">\`</span></span>（严格相等操作符）相同，除了 <span class="token variable"><span class="token variable">\`</span>NaN<span class="token variable">\`</span></span>、<span class="token variable"><span class="token variable">\`</span>+0<span class="token variable">\`</span></span> 和 <span class="token variable"><span class="token variable">\`</span><span class="token parameter variable">-0</span><span class="token variable">\`</span></span>。

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">+</span><span class="token number">0</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">0</span> <span class="token comment">// true</span>
Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// false</span>

<span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span> <span class="token comment">// false</span>
Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span>

Number<span class="token punctuation">.</span><span class="token number">NaN</span> <span class="token operator">===</span> Number<span class="token punctuation">.</span><span class="token number">NaN</span> <span class="token comment">// false</span>
Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token number">NaN</span><span class="token punctuation">,</span> Number<span class="token punctuation">.</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span>

<span class="token number">NaN</span> <span class="token operator">===</span> Number<span class="token punctuation">.</span><span class="token number">NaN</span> <span class="token comment">// false</span>
Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> Number<span class="token punctuation">.</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="variable-undefined-与-typeof-variable-undefined-的区别" tabindex="-1"><a class="header-anchor" href="#variable-undefined-与-typeof-variable-undefined-的区别"><span>variable === undefined 与 typeof variable === undefined 的区别</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">### variable === undefined 与 typeof variable === undefined 的区别</span>
检测变量是否为 undefined 有两种方法
	<span class="token number">1</span>. <span class="token variable"><span class="token variable">\`</span>variable <span class="token operator">==</span><span class="token operator">=</span> undefined<span class="token variable">\`</span></span>
	<span class="token number">2</span>. <span class="token variable"><span class="token variable">\`</span>typeof variable <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">&#39;undefined&#39;</span><span class="token variable">\`</span></span>
	
两者区别：
在 es3 旧版浏览器中，undefined 是一个全局变量名，其原始值未定义，但是可以更改该值。
	typeof undeclaredVar <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">&#39;undefined&#39;</span> // <span class="token boolean">true</span>
	undeclaredVar <span class="token operator">==</span><span class="token operator">=</span> undefined // 引发 ReferenceError 异常
在新版浏览器中，因为 undefined 的 writable 属性设置为 false，所以无法更改 undefined，因而没有这种问题。

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="虚值与布尔值" tabindex="-1"><a class="header-anchor" href="#虚值与布尔值"><span>虚值与布尔值</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 虚值与布尔值</span>
- 虚值是在转换为布尔值时变为 <span class="token boolean">false</span> 的值。
- 使用 <span class="token variable"><span class="token variable">\`</span>Boolean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span> 方法或 <span class="token variable"><span class="token variable">\`</span><span class="token operator">!</span><span class="token operator">!</span><span class="token variable">\`</span></span> 运算符，可将 <span class="token variable"><span class="token variable">\`</span>truthy<span class="token variable">\`</span></span> 或 <span class="token variable"><span class="token variable">\`</span>falsy<span class="token variable">\`</span></span> 值转换为布尔值。
	- Falsy：false、null、undefined、NaN、0、+0、-0、空字符串
	- Truthy：其他都为 false。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">!</span><span class="token operator">!</span><span class="token boolean">false</span> <span class="token comment">// false</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">undefined</span> <span class="token comment">// false</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">null</span> <span class="token comment">// false</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token number">NaN</span> <span class="token comment">// false</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token number">0</span> <span class="token comment">// false</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token string">&#39;&#39;</span> <span class="token comment">// false</span>

<span class="token operator">!</span><span class="token operator">!</span><span class="token string">&#39;hello&#39;</span> <span class="token comment">// true</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token number">1</span> <span class="token comment">// true</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// true</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// true</span>

<span class="token comment">// or</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="作用域-scope" tabindex="-1"><a class="header-anchor" href="#作用域-scope"><span>作用域 SCope</span></a></h2><h3 id="var" tabindex="-1"><a class="header-anchor" href="#var"><span>var</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## var</span>
<span class="token comment">### 有 var 和没有 var 的区别</span>
- 添加 var 为局部变量<span class="token punctuation">(</span>在方法内<span class="token punctuation">)</span>，不添加 var 为全局变量<span class="token punctuation">(</span>当方法使用后才生效<span class="token punctuation">)</span>
- 在定义全局变量时加或不加 var 关键字没影响；但在定义局部变量<span class="token punctuation">(</span>函数内<span class="token punctuation">)</span>时如果不加var，JS会将其解释为全局变量。
- var 或 window 添加的属性不能被 delete 删除。
        var a <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">function</span> <span class="token function-name function">aFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> b <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">}</span>
        console.log<span class="token punctuation">(</span>a<span class="token punctuation">)</span>	// <span class="token number">1</span>
        // console.log<span class="token punctuation">(</span>b<span class="token punctuation">)</span> // b is not defined
        aFn<span class="token punctuation">(</span><span class="token punctuation">)</span>
        console.log<span class="token punctuation">(</span>b<span class="token punctuation">)</span>	// <span class="token number">2</span>
        console.log<span class="token punctuation">(</span>delete a<span class="token punctuation">)</span> // <span class="token boolean">false</span>
        
        
<span class="token comment">### 函数与变量提升</span>
- 变量声明、函数声明都会被提升到作用域顶处。
- 当出现相同名称时，优先级为：<span class="token string">&#39;变量/函数赋值 &gt; 函数声明 &gt; 变量声明&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/** js编译器处理过程 */</span>
<span class="token keyword">var</span> foo<span class="token punctuation">;</span>	<span class="token comment">// foo#1</span>
<span class="token keyword">var</span> num<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span>	<span class="token comment">// foo#2</span>
<span class="token keyword">var</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">-</span> y <span class="token punctuation">}</span>	<span class="token comment">// foo#3</span>
num <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>	<span class="token comment">// foo#4</span>

<span class="token comment">/* ---------------------- */</span>
<span class="token keyword">var</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">-</span> y <span class="token punctuation">}</span>	<span class="token comment">// 函数赋值不会提升</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span>	<span class="token comment">// 函数声明会提升</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="var、let、const的区别" tabindex="-1"><a class="header-anchor" href="#var、let、const的区别"><span>var、let、const的区别</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## var、let、const 的区别</span>
<span class="token number">1</span>. var定义的变量，其作用域为该语句所在的函数内，会挂在window，且存在变量提升现象。
			没有块的概念，可以跨块访问，不能跨函数访问。
	let定义的变量，其作用域为该语句所在的代码块内，不存在变量提升。
			不能跨块、跨函数访问。
	const用来定义常量，声明时必须赋值，声明后值不可修改，只能在块作用域访问，不存在变量提升。
			 const声明常量，即一旦声明必须赋值,不能使用null占位；声明后值不能再修改。
			 常量的含义是指向的对象不能修改，但是可以改变对象内部的属性--<span class="token operator">&gt;</span>即保存的只是内存的地址，而不是保存内容。
			 栈有地址的指向，堆存放数据。

<span class="token number">2</span>. var 可以先使用，后声明，因为存在变量提升；let 必须先声明后使用。

<span class="token number">3</span>. var 允许在相同作用域内重复声明同一个变量，而let与const不允许这一现象。

<span class="token number">4</span>. 在全局上下文中，基于 <span class="token builtin class-name">let</span> 声明的全局变量和全局对象 GO<span class="token punctuation">(</span>window<span class="token punctuation">)</span> 没有任何关系，var 声明的变量会和 GO 有映射关系。

<span class="token number">5</span>. 会产生暂时性死区：
		暂时性死区：检测一个未被声明的变量类型时，不会返回undefined，会报错。
          console.log<span class="token punctuation">(</span>typeof a<span class="token punctuation">)</span> // undefined
          console.log<span class="token punctuation">(</span>typeof b<span class="token punctuation">)</span>	// 未被声明之前不能使用
          var a
          <span class="token builtin class-name">let</span> b

<span class="token number">6</span>. let/const/function 会把当前所在的大括号<span class="token punctuation">(</span>除函数之外<span class="token punctuation">)</span>作为一个全新的块级上下文。
	应用这个机制，在遇到循环事件绑定等类似的需求，无需再自己构建闭包来存储，只要基于let的块作用域特征即可解决。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment">// 1. var声明的变量会挂载在window上，而let和const声明的变量不会</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>window<span class="token punctuation">.</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span>window<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 100 100</span>

<span class="token comment">// 2. var声明变量存在变量提升，let和const不存在变量提升</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined  ===&gt;  a已声明还没赋值，默认得到undefined值</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错：b is not defined  ===&gt; 找不到b这个变量</span>
  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 3. let和const声明形成块作用域</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment">// b is not defined</span>

<span class="token comment">// 4. 同一作用域下let和const不能声明同名变量，而var可以</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 报错：识符a已经被声明</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 5. let/const有暂存性死区</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>	<span class="token comment">// Error:a is not defined，当前块作用域存在a量在此语句调用之后声明</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="块级作用域" tabindex="-1"><a class="header-anchor" href="#块级作用域"><span>块级作用域</span></a></h3><blockquote><ol><li>外部的为全局变量(公有作用域)，内部的为局部变量(私有作用域)</li><li>块作用域由<code>{}</code>包括，if语句和for语句里面的<code>{}</code>语句块也属于块作用域。 <ul><li>在<code>if</code>执行的<code>{ }</code>语句块中，使用<code>const、let</code>，他们会有块级作用域</li></ul></li><li>JS中使用var来声明一个变量时，变量的作用域主要是和函数的定义有关</li><li>针对于其他块定义来说是没有作用域的，如:<code>if、for</code>等（只有函数有作用域，if是没有作用域的）</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// IIFE 写法</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token operator">...</span><span class="token punctuation">;</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 块级作用域写法</span>
<span class="token punctuation">{</span>
  <span class="token keyword">let</span> tmp <span class="token operator">=</span> <span class="token operator">...</span><span class="token punctuation">;</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">{</span>
  <span class="token punctuation">{</span><span class="token keyword">let</span> insane <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>insane<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>
<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="作用域链" tabindex="-1"><a class="header-anchor" href="#作用域链"><span>作用域链</span></a></h3><blockquote><ul><li>当该作用域内本身不存在该变量，就会<strong>逐级向上寻找</strong>，直至找到全局作用域还是没找到，就宣布放弃。这种逐级的关系称为作用域链</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">function</span> <span class="token constant">F1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">200</span>
    <span class="token keyword">function</span> <span class="token constant">F2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">300</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 自由变量，顺作用域链向父作用域找</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// 自由变量，顺作用域链向父作用域找</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">// 本作用域的变量</span>
    <span class="token punctuation">}</span>
    <span class="token constant">F2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token constant">F1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="预解释" tabindex="-1"><a class="header-anchor" href="#预解释"><span>预解释</span></a></h3><blockquote><ol><li><p>解释变量和函数（函数解释时只将其当作字符串来解释，调用时才开始翻译）</p></li><li><p>预解释值发生在当前的作用域下，开始只对 window 下的进行预解释，函数只在执行时才会对函数中的进行预解释</p></li><li><p>对于带var和function关键字的预解释作用是不一样的</p><p>1）var-&gt;在预解释时只是提前声明</p><p>2）function-&gt;在预解释时提前的声明和定义都完成了</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//--&gt;undefined</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//--&gt;12</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;myName&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> total <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="gloabalthis对象" tabindex="-1"><a class="header-anchor" href="#gloabalthis对象"><span>gloabalThis对象</span></a></h3>`,43),y=a(`<p>JavaScript 语言存在一个顶层对象，它提供全局环境（即全局作用域），所有代码都是在这个环境中运行。但是，顶层对象在各种实现里面是不统一的。</p><ul><li>在 Web 浏览器顶层对象可以是 <code>window</code>，<code>self</code>，<code>frames</code> 或 <code>this</code>。</li><li>对于 Web Worker 来说，它是 <code>self</code>。</li><li>在 Node.js 中，顶层对象是 <code>global</code>，但其他环境都不支持。</li></ul><p>同一段代码为了能够在各种环境，都能取到顶层对象，现在一般是使用<code>this</code>关键字，但是有局限性。</p><ul><li>全局环境中，<code>this</code>会返回顶层对象。但是，Node.js 模块中<code>this</code>返回的是当前模块，ES6 模块中<code>this</code>返回的是<code>undefined</code>。</li><li>函数里面的<code>this</code>，如果函数不是作为对象的方法运行，而是单纯作为函数运行，<code>this</code>会指向顶层对象。但是，严格模式下，这时<code>this</code>会返回<code>undefined</code>。</li><li>不管是严格模式，还是普通模式，<code>new Function(&#39;return this&#39;)()</code>，总是会返回全局对象。但是，如果浏览器用了 CSP（Content Security Policy，内容安全策略），那么<code>eval</code>、<code>new Function</code>这些方法都可能无法使用。</li></ul><p>综上所述，很难找到一种方法，可以在所有情况下，都取到顶层对象。下面是两种勉强可以使用的方法。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 方法一</span>
<span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span>
 <span class="token operator">?</span> window
 <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> process <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span>
    <span class="token keyword">typeof</span> require <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span>
    <span class="token keyword">typeof</span> global <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span>
 <span class="token operator">?</span> global
 <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 方法二</span>
<span class="token keyword">var</span> <span class="token function-variable function">getGlobal</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> self <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> self<span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> window<span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> global <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> global<span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;unable to locate global object&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),h={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"globalThis",-1),j=a(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// node 环境</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>globalThis<span class="token punctuation">)</span>

<span class="token doc-comment comment">/**
&lt;ref *1&gt; Object [global] <span class="token punctuation">{</span>
 global: [Circular *1],
  clearInterval: [Function: clearInterval],
 clearTimeout: [Function: clearTimeout],
  setInterval: [Function: setInterval],
 setTimeout: [Function: setTimeout] <span class="token punctuation">{</span>
    [Symbol(nodejs.util.promisify.custom)]: [Function (anonymous)]
 <span class="token punctuation">}</span>,
  queueMicrotask: [Function: queueMicrotask],
  clearImmediate: [Function: clearImmediate],
  setImmediate: [Function: setImmediate] <span class="token punctuation">{</span>
    [Symbol(nodejs.util.promisify.custom)]: [Function (anonymous)]
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
*/</span>

<span class="token comment">// 浏览器</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>globalThis<span class="token punctuation">)</span> <span class="token comment">// Window {0: global, 1: global, window: Window, self: Window, ...}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),x=n("strong",null,"注意",-1),q=n("code",null,"globalThis",-1),N={href:"https://exploringjs.com/deep-js/ch_global-scope.html#window-proxy",target:"_blank",rel:"noopener noreferrer"},S=n("p",null,[s("但 "),n("code",null,"globalThis"),s(" 会对性能产生负面影响，也可能会产生一些不到的错误，建议使用 ES6 的一些特性避免全局对象，例如：")],-1),O=n("ul",null,[n("li",null,[s("声明在 "),n("code",null,"const"),s("、"),n("code",null,"let"),s(" 和 "),n("code",null,"class"),s(" 全局作用域内，使用时不会创建全局对象属性。")]),n("li",null,"每个 ES 模块都有自己的局部作用域。（默认开启严格模式）")],-1),_=a('<h3 id="执行上下文" tabindex="-1"><a class="header-anchor" href="#执行上下文"><span>执行上下文</span></a></h3><ul><li><p>执行上下文是以栈（一种 LIFO 的数据结构）的方式被存放起来的，我们称之为<strong>执行上下文栈（Execution Context Stack）</strong></p></li><li><p><strong>在 JavaScript 代码开始执行时，首先进入全局环境，此时全局上下文被创建并入栈，之后当调用函数时则进入相应的函数环境，此时相应函数上下文被创建并入栈，当处于栈顶的执行上下文代码执行完毕后，则会将其出栈</strong></p><ul><li><p>在全局代码执行前, JS引擎就会创建一个栈来存储管理所有的执行上下文对象</p></li><li><p>在全局执行上下文(window)确定后, 将其添加到栈中(压栈)</p></li><li><p>在函数执行上下文创建后, 将其添加到栈中(压栈)</p></li><li><p>在当前函数执行完后,将栈顶的对象移除(出栈)</p></li><li><p>当所有的代码执行完后, 栈中只剩下window</p></li><li><blockquote><p>所以在执行上下文栈中，栈底永远是全局上下文，而栈顶则是当前正在执行的函数上下文</p></blockquote></li></ul></li><li><p><img src="'+u+`" alt="image-20210917112206551"></p></li><li><p>在一个执行上下文中，最重要的三个属性分别是<strong>变量对象（Variable Object）</strong>、**作用域链（Scope Chain）**和 <strong>this 指向</strong></p></li><li><p>一个执行上下文的生命周期分为<strong>创建</strong>和<strong>执行</strong>阶段。创建阶段主要工作是<strong>生成变量对象</strong>、<strong>建立作用域链</strong>和<strong>确定 this 指向</strong>。而执行阶段主要工作是变量赋值以及执行其它代码等</p></li></ul><p><strong>1. 全局执行上下文</strong></p><ul><li>在执行全局代码前将window确定为全局执行上下文。</li><li>对全局数据进行预处理（并没有赋值） <ul><li>var定义的全局变量==&gt;undefined, 添加为window的属性</li><li>function声明的全局函数==&gt;赋值(fun), 添加为window的方法</li><li>this==&gt;赋值(window)</li></ul></li><li>开始执行全局代码</li></ul><h3 id="作用域与执行上下文" tabindex="-1"><a class="header-anchor" href="#作用域与执行上下文"><span>作用域与执行上下文</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 作用域与执行上下文</span>
JS 的执行分为解释阶段和执行阶段：
  - 解释阶段
      - 词法分析
      - 语法分析
      - 作用域规则确定
  - 执行阶段
      - 创建执行上下文<span class="token punctuation">(</span>生成 this 指向<span class="token punctuation">)</span>
      - 执行函数代码
      - 垃圾回收<span class="token punctuation">(</span>清除该函数和变量<span class="token punctuation">)</span>
		


<span class="token comment">### JS 执行上下文栈</span>
执行上下文就是当前 JavaScript 代码被解析和执行时所在环境，JS 执行上下文栈可以认为是一个存储函数调用的栈结构，遵循先进后出的原则。
		- JavaScript 执行在单线程上，所有的代码都是排队执行。
		- 一开始浏览器执行全局的代码时，首先创建全局的执行上下文，压入执行栈的顶部。
		- 每当进入一个函数的执行就会创建函数的执行上下文，并且把它压入执行栈的顶部。当前函数执行完成后，当前函数的执行上下文出栈，并等待垃圾回收。
		- 浏览器的 JS 执行引擎总是访问栈顶的执行上下文。
		- 全局上下文只有唯一的一个，它在浏览器关闭时出栈。



<span class="token comment">### 作用域链</span>
无论是 LHS 还是 RHS 查询，都会在当前的作用域开始查找，如果没有找到，就会向上级作用域继续查找目标标识符，每次上升一个作用域，一直到全局作用域为止。



<span class="token comment">### 作用域和执行上下文的最大区别：</span>
<span class="token number">1</span>. 执行上下文在调用函数是已确认，函数调用结束就会自动释放，可随时改变；
	作用域在定义时确认就一直存在，并且不会被改变。

<span class="token number">2</span>. 一个作用域可能包含若干个上下文环境。有可能没有上下文<span class="token punctuation">(</span>函数从未被调用<span class="token punctuation">)</span>；有可能有过<span class="token punctuation">(</span>函数已调用完毕，上下文环境已被销毁<span class="token punctuation">)</span>；有可能同时存在一个或多个<span class="token punctuation">(</span>闭包<span class="token punctuation">)</span>。

<span class="token number">3</span>. 同一个作用域下，不同的调用会产生不同的执行上下文环境，继而产生不同的变量的值。



<span class="token comment">### 词法作用域和 this 的区别</span>
- 此法作用域是由你在写代码时将变量和块作用域写在哪里来决定的。
- this 是在调用时被绑定的，this 指向什么，完全取决于函数的调用位置。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="this-的指向" tabindex="-1"><a class="header-anchor" href="#this-的指向"><span>this 的指向</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## this 的指向</span>
this 的绑定规则有四种：默认绑定、隐式绑定、显式绑定、new绑定
<span class="token number">1</span>. 函数是否在 new 中调用<span class="token punctuation">(</span>new 绑定<span class="token punctuation">)</span>，如果是，则 this 绑定的是 new 中新创建的对象。
<span class="token number">2</span>. 函数是否通过 call、apply 调用，或使用 <span class="token builtin class-name">bind</span> <span class="token punctuation">(</span>即硬绑定<span class="token punctuation">)</span>，如果是，则 this 绑定的是指定的对象。
<span class="token number">3</span>. 函数是否在某个上下文对象中调用<span class="token punctuation">(</span>隐式绑定<span class="token punctuation">)</span>，如果是，则 this 绑定的是那个上下文对象。一般是如 <span class="token variable"><span class="token variable">\`</span>obj.foo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>
<span class="token number">4</span>. 如果以上都不是，那么使用默认绑定。如果在严格模式下，则绑定到 undefined，否则绑定到全局对象。
<span class="token number">5</span>. 如果把 null 或 undefined 作为 this 的绑定对象传入 call、apply 或 bind，这些值在调用时会被忽略，实际应用的是默认绑定规则。
<span class="token number">6</span>. 箭头函数没有自身的 this，它的 this 继承于上一层代码块的 this。



<span class="token comment">### 常规 this 指向</span>
- 普通函数、定时器函数、立即执行函数的this指向window
- 以对象方法调用时this指向对象本身
- 构造函数的this指向实例对象
- 绑定事件函数的this指向函数的调用者
- 还可通过call、bind、apply改变this的指向，区别是传参方式或执行时间不同
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//1、普通函数 this指向window</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;普通函数this：&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
window<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//2、对象的方法 this指向是对象本身</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;对象的方法的this：&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
obj<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> fun <span class="token operator">=</span> obj<span class="token punctuation">.</span>say<span class="token punctuation">;</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 此时指向window</span>

<span class="token comment">//3、构造函数  this指向的是willy实例对象，原型对象里面的this指向的也是willY实例对象</span>
<span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;this指向Start&#39;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token class-name">Star</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sing</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;this指向Star&#39;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> willy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//4、绑定事件函数  this指向是函数的调用者 btn按钮对象</span>
<span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;绑定事件函数的this：&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//5、定时器函数 this指向window</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;定时器函数的this：&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//6、立即执行函数 this指向window</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;立即执行函数的this：&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="【典例】this的指向" tabindex="-1"><a class="header-anchor" href="#【典例】this的指向"><span>【典例】this的指向</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> uname <span class="token operator">=</span> <span class="token string">&quot;window&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">uname</span><span class="token operator">:</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">fun</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>uname<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>uname<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
object<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 输出 object window</span>
<span class="token comment">// 因为第一个函数是由object对象调用，this指向object对象；第二个是普通函数调用，指向window</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="改变函数内部this指向" tabindex="-1"><a class="header-anchor" href="#改变函数内部this指向"><span>改变函数内部<code>this</code>指向</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 改变函数内部\`this\`指向</span>
    <span class="token number">1</span>. 借用构造函数继承父类型属性、方法--<span class="token operator">&gt;</span><span class="token variable"><span class="token variable">\`</span>call<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>
        - ES6之前并没有<span class="token variable"><span class="token variable">\`</span>extends<span class="token variable">\`</span></span>继承，我们可以通过构造函数+原型对象模拟实现继承，被称为组合继承。
        - 核心原理：通过<span class="token variable"><span class="token variable">\`</span>call<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>把父类型的<span class="token variable"><span class="token variable">\`</span>this<span class="token variable">\`</span></span>指向子类型的<span class="token variable"><span class="token variable">\`</span>this<span class="token variable">\`</span></span>，这样就可实现子类型继承父类型的属性。

    <span class="token number">2</span>. ES6后通过<span class="token variable"><span class="token variable">\`</span>extends、super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>来实现继承。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//this指向父构造函数的对象实例</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Father</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">money</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//this 指向子构造函数的对象实例</span>
  <span class="token function">Father</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 继承父构造函数的方法-&gt;直接赋值：（通过让父子共用相同地址来实现），如果修改子原型对象，父原型对象会跟着改变</span>
<span class="token comment">//Son.prototype = Father.prototype;	</span>

<span class="token comment">//继承父构造函数的方法-&gt;new：不会共用相同地址，修改子原型对象，父原型对象不会改变</span>
<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Son<span class="token punctuation">;</span>    <span class="token comment">//利用对象形式修改原型对象，需利用constructor指回原来的构造函数</span>

<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">exam</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//子构造函数专门的方法</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;儿子要考试~&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">&#39;willy&#39;</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Father</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Son</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="call、bind、apply-改变-this-指向" tabindex="-1"><a class="header-anchor" href="#call、bind、apply-改变-this-指向"><span>call、bind、apply 改变 this 指向</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># call、bind、apply ：改变函数内部的\`this\`指向</span>
- call<span class="token punctuation">(</span><span class="token punctuation">)</span> ：立即调用函数，并可改变函数的this指向，主要作用是实现继承
- apply<span class="token punctuation">(</span><span class="token punctuation">)</span>：立即调用函数，并可改变函数的this指向， 但apply<span class="token punctuation">(</span><span class="token punctuation">)</span>的参数必须是数组（伪数组），主要用作数学内置对象运用
- bind<span class="token punctuation">(</span><span class="token punctuation">)</span>：不会立即调用函数，但能改变函数内部this指向
		- 传入一个对象，返回一个 this 绑定了传入对象的新函数，这个函数的 this 指向除了使用 new 时会被改变，其它情况下都不会改变。
		- 若传值为空，则 this 默认是指向全局对象 window。
		- 如果有的函数我们不需要立即调用，但又想改变这个函数内部的this指向，则用bind。


<span class="token comment"># call、bind、apply 的区别</span>
    <span class="token number">1</span>. 相同点：
        - 所有的函数都是<span class="token variable"><span class="token variable">\`</span>Function<span class="token variable">\`</span></span>的实例<span class="token operator">==</span><span class="token operator">&gt;</span><span class="token variable"><span class="token variable">\`</span>call、apply和bind<span class="token variable">\`</span></span>都是<span class="token variable"><span class="token variable">\`</span>Function<span class="token variable">\`</span></span>原型<span class="token variable"><span class="token variable">\`</span>Function.prototype<span class="token variable">\`</span></span>中的方法
        - 都可改变函数执行上下文（改变函数内部的<span class="token variable"><span class="token variable">\`</span>this<span class="token variable">\`</span></span>指向）
        - <span class="token variable"><span class="token variable">\`</span>call、apply、bind<span class="token variable">\`</span></span>必须通过函数来调用，第一个参数为对象，若第一个参数为null或者undefined，则指向window

    <span class="token number">2</span>. 区别点：
        - call和bind方法接收参数列表；apply方法只能接收2个参数，且第二个参数为数组或伪数组<span class="token variable"><span class="token variable">\`</span><span class="token punctuation">[</span>arg<span class="token punctuation">]</span><span class="token variable">\`</span></span>
        - call和apply方法返回undefined，bind方法返回一个原函数的拷贝，并具有指定的 this 值和初始参数
        - call和apply方法是立即调用；bind方法是稍后调用，传参形式与call<span class="token punctuation">(</span><span class="token punctuation">)</span>相同

    <span class="token number">3</span>. 主要应用场景：
        - <span class="token variable"><span class="token variable">\`</span>call<span class="token variable">\`</span></span>主要用做继承
        - <span class="token variable"><span class="token variable">\`</span>apply<span class="token variable">\`</span></span>主要用跟数组有关的操作，如借助数学对象实现最大值最小值。
        - <span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">bind</span><span class="token variable">\`</span></span>不调用函数，但会改变<span class="token variable"><span class="token variable">\`</span>this<span class="token variable">\`</span></span>指向，如改变定时器内部的<span class="token variable"><span class="token variable">\`</span>this<span class="token variable">\`</span></span>指向。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//1、call() 可调用函数，改变函数的this指向，call()主要作用是实现继承</span>
<span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//this通过call()方法调用后指向son</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Father</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">&#39;willy&#39;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">/* 2、apply() 可调用函数，可改变函数的this指向，
但是apply()的参数必须是数组（伪数组）
apply()主要应用 借助于数学内置对象求最大最小值 */</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;willy&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">/* 3、bind() 不会调用函数，但能改变函数内部this指向
返回的是原函数改变this之后产生的新函数
如果有的函数我们不需要立即调用，但又想改变这个函数内部的this指向，则用bind，如定时器函数  
fun.bind(thisArg, arg1, arg2, ...)  
thisArg:在fun函数运行时指定的this值，argn传递的其他函数，返回值由指定的this值和初始参数改造的原函数拷贝*/</span>
<span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;andy&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="【call】实现" tabindex="-1"><a class="header-anchor" href="#【call】实现"><span>【call】实现</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 模拟实现 call()</span>
- call<span class="token punctuation">(</span><span class="token punctuation">)</span> 主要是会改变this指向，第一个参数为所改变的this指向，第二个之后的参数列表为传递的值

<span class="token comment">## 实现原理</span>
<span class="token number">1</span>. 将函数设为传入参数的属性，如果不传入参数则默认指向为 window/global
<span class="token number">2</span>. 判断当前 this 是否为函数，防止 <span class="token variable"><span class="token variable">\`</span>Function.prototype.myCall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span> 直接调用
<span class="token number">3</span>. context 为可选参数，如果不传的话默认上下文为 window
<span class="token number">4</span>. 为 context 创建一个 Symbol 属性来保证不会重名，将当前函数复制给这个属性
<span class="token number">5</span>. 处理参数，传入的第一个参数后的其余参数
<span class="token number">6</span>. 调用函数后立即删除该 Symbol 属性
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@context</span> 上下文
 *    1. 传入的是 null 或 undefined 时，this 指向 window/global
 *    2. 传入的不是 null 或 undefined 时，必须为一个对象
 */</span>
<span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context <span class="token operator">=</span> window<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 用于防止 Function.prototype.myCall() 直接调用</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">undefined</span>
  
	<span class="token comment">// context为null或者是undefined，指向到 window/global</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    context <span class="token operator">=</span> <span class="token keyword">typeof</span> window <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">?</span> global <span class="token operator">:</span> window
  <span class="token punctuation">}</span>

  <span class="token comment">// this指向的是当前的函数(Function的实例)</span>
  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span>

  <span class="token comment">// 隐式绑定, 当前函数的this指向了context.</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span>
  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>


<span class="token comment">// 测试代码</span>
<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Selina&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;Chirs&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">bar</span> <span class="token punctuation">(</span><span class="token parameter">job<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
bar<span class="token punctuation">.</span><span class="token function">myCall</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> <span class="token string">&#39;programmer&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Selina programmer 20</span>
bar<span class="token punctuation">.</span><span class="token function">myCall</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;teacher&#39;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 浏览器环境: Chirs teacher 25; node 环境: undefined teacher 25</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="【apply】实现" tabindex="-1"><a class="header-anchor" href="#【apply】实现"><span>【apply】实现</span></a></h3><blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@context</span> 上下文
 *    1. 传入的是 null 或 undefined 时，this 指向 window/global
 *    2. 传入的不是 null 或 undefined 时，必须为一个对象
 */</span>
<span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myApply</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context <span class="token operator">=</span> window<span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 用于防止 Function.prototype.myApply() 直接调用</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">undefined</span>
  
	<span class="token comment">// context为null或者是undefined，指向到 window/global</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    context <span class="token operator">=</span> <span class="token keyword">typeof</span> window <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">?</span> global <span class="token operator">:</span> window
  <span class="token punctuation">}</span>

  <span class="token comment">// this指向的是当前的函数(Function的实例)</span>
  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span>
  <span class="token keyword">let</span> result
  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span>
  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>


<span class="token comment">// 测试代码</span>
<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Selina&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;Chirs&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">bar</span> <span class="token punctuation">(</span><span class="token parameter">job<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
bar<span class="token punctuation">.</span><span class="token function">myApply</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;programmer&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Selina programmer 20</span>
bar<span class="token punctuation">.</span><span class="token function">myApply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;teacher&#39;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 浏览器环境: Chirs programmer 20; node 环境: undefined teacher 25</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="【bind】实现" tabindex="-1"><a class="header-anchor" href="#【bind】实现"><span>【bind】实现</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 模拟 bind 实现</span>
<span class="token number">1</span>. 处理参数，返回一个闭包
<span class="token number">2</span>. 判断是否为构造函数调用，如果是则使用 <span class="token variable"><span class="token variable">\`</span>new<span class="token variable">\`</span></span> 调用当前函数
<span class="token number">3</span>. 如果不是，使用 <span class="token variable"><span class="token variable">\`</span>apply<span class="token variable">\`</span></span>，将 <span class="token variable"><span class="token variable">\`</span>context<span class="token variable">\`</span></span> 和处理好的参数传入
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myBind</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context <span class="token operator">=</span> window<span class="token punctuation">,</span> <span class="token operator">...</span>args1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 用于防止 Function.prototype.myBind() 直接调用</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;Error&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// context为null或者是undefined，指向到 window/global</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    context <span class="token operator">=</span> <span class="token keyword">typeof</span> window <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">?</span> global <span class="token operator">:</span> window
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token constant">F</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断是否用于构造函数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">F</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">self</span><span class="token punctuation">(</span><span class="token operator">...</span>args1<span class="token punctuation">,</span> <span class="token operator">...</span>args2<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token function">self</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>args2<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 测试</span>
<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;Jack&#39;</span>
<span class="token keyword">function</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token parameter">age<span class="token punctuation">,</span> job<span class="token punctuation">,</span> gender</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token punctuation">,</span> age<span class="token punctuation">,</span> job<span class="token punctuation">,</span> gender<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> Yve <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span> <span class="token operator">:</span> <span class="token string">&#39;Yvette&#39;</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">person</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>Yve<span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">&#39;enginner&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">&#39;female&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="垃圾回收-gc-机制" tabindex="-1"><a class="header-anchor" href="#垃圾回收-gc-机制"><span>垃圾回收(GC)机制</span></a></h2><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 垃圾回收（GC）机制</span>

<span class="token comment">### 内存存储</span>
- 当对象被需要的时候就会为其分配内存空间，如声明变量时。
- 在对象已经分配了内存的对象时再做对内存的读取操作。
- 对象销毁是指在这个对象不再被需要时，就会释放这个对象的内存，对象就会被销毁。
- 全局变量：浏览器关闭的时候就会被销毁。


<span class="token comment">### 数据的存储原理</span>
- 基础数据类型：number，String，boolean，Symbol，Bigint，unll，undefined
  	基本类型在传递过程中传递的是内容
- 引用数据类型：Object<span class="token punctuation">(</span><span class="token punctuation">)</span>,<span class="token function-name function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
		引用类型在传递的时候传递过程中的是地址
- 可通过<span class="token variable"><span class="token variable">\`</span>console.dir<span class="token punctuation">(</span><span class="token function-name function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>去查看函数（函数也是属于基本数据类型）


<span class="token comment">### 栈内存和堆内存</span>
- 栈内存：用来提供一个供JS代码执行的环境 -<span class="token operator">&gt;</span> 作用域（全局作用域/私有作用域）
			栈：小而快
- 堆内存：用来存储引用数据类型的值 -<span class="token operator">&gt;</span> 对象存储的是属性名和属性值，函数存储的是代码字符串
			（JS所有的数据都是存放在堆内存中）


<span class="token comment">### 浏览器垃圾回收机制</span>
<span class="token number">1</span>. 项目中如果存在大量不被释放的内存（堆、栈、上下文），页面性能会变得很慢。
		当某些代码操作不被合理释放，就会造成内存泄露。
		我们尽可能减少使用闭包，因为它会消耗内存。

<span class="token number">2</span>. 浏览器垃圾回收机制/内存回收机制：
浏览器的Javascript具有自动垃圾回收机制<span class="token punctuation">(</span>GC:Garbage Collecation<span class="token punctuation">)</span>，垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。

<span class="token number">3</span>. 垃圾回收的方法
标记清除法：当变量进入执行环境时，被标记为 <span class="token string">&quot;进入环境&quot;</span>，当变量离开执行环境时，会被标记为 <span class="token string">&quot;离开环境&quot;</span>，垃圾回收器会销毁那些带标记的值并回收它们所占用的内存空间。
引用计数法：当前内存内占用一次，计数累加一次，移除占用就减1，减到0时，浏览器就会回收它。



<span class="token comment">### 优化手段</span>
虽然浏览器可以进行垃圾自动回收，但是当代码比较复杂时，垃圾回收所带来的代价比较大，所以应该尽量减少垃圾回收。
- 优化手段：内存优化；手动释放：取消内存的占用即可。
    - 对数组进行优化：在清空一个数组时，最简单的方法是给其赋值 <span class="token variable"><span class="token variable">\`</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token variable">\`</span></span>，但是与此同时会创建一个新的空对象；可以将数组的长度设置为0，以此来达到清空数组的目的。
    - 对 Object 进行优化：对象尽量复用，对于不再使用的对象，将其设置为 null，垃圾回收机制会自动回收该变量。
    - 对函数进行优化：在循环中的函数表达式，如果可以复用，尽量放在函数外部。
- 堆内存：fn <span class="token operator">=</span> null
- 栈内存：把上下文中，被外部占用的堆的占用取消即可。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="内存泄露" tabindex="-1"><a class="header-anchor" href="#内存泄露"><span>内存泄露</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 内存泄露（垃圾回收机制BUG）</span>
在 JS 中，常见的内存泄露主要有 <span class="token number">4</span> 中，全局变量、闭包、DOM元素的引用、定时器。

<span class="token number">1</span>. 意外创建的全局变量：由于使用未声明的变量，而意外的创建了一个全局变量，而使得这个变量一直留在内存中而无法被回收。	
<span class="token number">2</span>. 被遗忘的计时器或回调函数：设置了 <span class="token variable"><span class="token variable">\`</span>setInterval<span class="token variable">\`</span></span> 定时器，而忘记销毁它；如果循环函数有对外部变量引用，那么这个变量会被一直保留在内存中而无法被回收。
<span class="token number">3</span>. 脱离 DOM 的引用：获取一个 DOM 元素的引用，而后这个元素被删除，由于一直保留了这个元素的引用，所以它也无法被回收。
<span class="token number">4</span>. 闭包：不合理的使用闭包，从而导致某些变量一直被保留在内存中。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="【闭包的使用不当】" tabindex="-1"><a class="header-anchor" href="#【闭包的使用不当】"><span>【闭包的使用不当】</span></a></h4><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 闭包的使用不当 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">myClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>执行fn1函数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">function</span> <span class="token function">fn1</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span>  <span class="token comment">// 这里设置了一个很大的数组对象</span>
    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">3</span>
    <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> a
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  
  <span class="token keyword">function</span> <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="【意外地使用全局变量】" tabindex="-1"><a class="header-anchor" href="#【意外地使用全局变量】"><span>【意外地使用全局变量】</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/** 全局变量 */</span>
<span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 此处变量name未被声明</span>
  name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">99999999</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token doc-comment comment">/** 纠正式写法 */</span>
<span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>
  name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">99999999</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="【分离的dom节点】" tabindex="-1"><a class="header-anchor" href="#【分离的dom节点】"><span>【分离的DOM节点】</span></a></h4><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>child<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>我是子元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>移除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> child <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.child&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">)</span>
  btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    root<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>


<span class="token comment">&lt;!-- 改进式写法 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>
  btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">let</span> child <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.child&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">)</span>
    root<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="【控制台的打印】" tabindex="-1"><a class="header-anchor" href="#【控制台的打印】"><span>【控制台的打印】</span></a></h4><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>


<span class="token comment">&lt;!-- 改进式写法 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
    obj <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="【被遗忘的定时器】" tabindex="-1"><a class="header-anchor" href="#【被遗忘的定时器】"><span>【被遗忘的定时器】</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> largeObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span>
  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> myObj <span class="token operator">=</span> largeObj
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token doc-comment comment">/** 写法改进 */</span>
<span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> largeObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>

  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> myObj <span class="token operator">=</span> largeObj
    index <span class="token operator">++</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="垃圾回收的方法" tabindex="-1"><a class="header-anchor" href="#垃圾回收的方法"><span>垃圾回收的方法</span></a></h3><blockquote><p>JS中存在垃圾回收机制，其原理是：使用引用计数法，就是语言引擎有一张“引用表”，保存了内存里面所有的资源的引用次数，如下：</p><p><img src="`+r+'" alt="image-20200921174129923"></p><p>但是如果一个值不在需要了，引用数却不为零，垃圾回收机制是无法释放这块内存，从而导致了“内存泄露”，如：</p><p><img src="'+k+`" alt="image-20200921174421861"></p><h4 id="垃圾回收算法" tabindex="-1"><a class="header-anchor" href="#垃圾回收算法"><span>垃圾回收算法</span></a></h4><ul><li>如果堆内存中的对象，没有任何变量引用它，则这个堆内存里的对象就会成为垃圾； 如果不再使用该变量，将该变量设置为null，浏览器会自动回收销毁该变量。</li><li>现在各大浏览器通常用采用的垃圾回收有两种方法：标记清除、引用计数(接近淘汰)。</li></ul><h5 id="引用计数" tabindex="-1"><a class="header-anchor" href="#引用计数"><span>引用计数</span></a></h5><ul><li>用法：当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数就是1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减1。当这个引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其所占的内存空间给收回来。当垃圾收集器下次再运行时，它就会释放那些引用次数为0的值所占的内存。即是看一个对象是否有指向它的引用，如果没有其他对象指向它，则说明该对象已经不再需要，可被视为垃圾回收。</li><li>定义：引用计数的含义是跟踪记录每个值被引用的次数。</li><li>基本原理：就是变量的引用次数，被引用一次则加1，当这个引用计数为0时，被视为准备回收的对象。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个对象person，他有两个指向属性age和name的引用</span>
<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;aaaa&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 虽然name设置为null，但因为person对象还有指向name的引用，因此name不会回收</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> person<span class="token punctuation">;</span>
person <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment">//原来的person对象被赋值为1，但因为有新引用p指向原person对象，因此它不会被回收</span>
p <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>           <span class="token comment">//原person对象已经没有引用，很快会被回收</span>


console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;---------------分割线------------------&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// objA、objB两个对象是互相引用的，也就是说他们的引用次数永远为2，如果不进行其他操作的话，这样的互相引用如果大量使用的话，就会造成内存泄漏问题。</span>
<span class="token keyword">function</span> <span class="token function">bigBug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> objA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> objB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  objA<span class="token punctuation">.</span>bug1 <span class="token operator">=</span> objB<span class="token punctuation">;</span>
  objB<span class="token punctuation">.</span>bug2 <span class="token operator">=</span> objA<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
objA<span class="token punctuation">.</span>bug1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
objB<span class="token punctuation">.</span>bug2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="标记清除法" tabindex="-1"><a class="header-anchor" href="#标记清除法"><span>标记清除法</span></a></h5><ul><li>标记清除法：&quot;查找引用&quot;，浏览器不定时去查找当前内存的引用，如果没有被占用，浏览器会回收它；如果被占用，就不能回收。</li><li>定义：标记清除算法将“不再使用的对象”定义为“无法到达的对象”。即从根部（在JS中就是全局对象）出发，定时扫描内存中的对象，凡是能从根部到达的对象，则会保留。那些从根部出发无法触及到的对象被标记为不再使用，稍后进行回收。</li><li>用法：每一个变量都有自己的使用环境，当变量进入环境时，垃圾回收机制将变量标记&quot;进入环境&quot;；当变量离开环境时，标记为&quot;离开环境&quot;。某一个时刻，垃圾回收器会过滤掉环境中的变量，以及被环境变量引用的变量，剩下的就是被视为准备回收的变量。</li><li>普及性：到目前为止，IE、Firefox、Opera、Chrome、Safari的js实现使用的都是标记清除的垃圾回收策略或类似的策略，只不过垃圾收集的时间间隔互不相同。</li></ul><h4 id="模拟用户使用期间所耗内存" tabindex="-1"><a class="header-anchor" href="#模拟用户使用期间所耗内存"><span>模拟用户使用期间所耗内存</span></a></h4><ul><li>打开开发者工具，选择 Memory</li><li>在右侧的Select profiling type字段里面勾选 timeline</li><li>点击左上角的录制按钮。</li><li>在页面上进行各种操作，模拟用户的使用情况。</li><li>一段时间后，点击左上角的 stop 按钮，面板上就会显示这段时间的内存占用情况。</li></ul></blockquote><h3 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包"><span>闭包</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 闭包</span>
在 JS 中变量的作用域属于函数作用域。在函数执行完后，作用域就会被清理，内存也会随之被回收。
但是由于闭包函数时建立在函数内部的子函数，由于其可访问上级作用域，即使上级函数执行完，作用域也不会随之销毁，这时的子函数（也就是闭包）便拥有了访问上级作用域中变量的权限，即使上级函数执行完后作用域内的值也不会被销毁。

函数执行时形成的私有上下文EC（FN）的作用是：
    - 保护：划分一个独立的代码执行区域，在这个区域中有自己私有变量存储的空间，保护自己的私有变量不受外界干扰（操作自己的私有变量和外界没有关系）。
    - 保存：如果当前上下文不被释放（只要上下文中的某个东西被外部占用即可），则存储的这些私有变量也不会被释放，可以供其下级上下文中调取使用，相当于把一些值保存起来。
    我们把函数执行形成私有上下文来保护和保存私有变量的机制称为 <span class="token string">&#39;闭包&#39;</span>。

- 闭包产生的条件：内部函数使用外部变量 + 外部函数被调用。
- 闭包的优化：及时释放引用（将所引用闭包设定为 null）



<span class="token comment">### 闭包的特征：</span>
<span class="token number">1</span>. 内部函数可以访问定义它们外部函数的参数和变量（作用域链的向上查找，把外围的作用域中的变量值存储在内存中而不是在函数调用完毕后销毁）。注意要设计私有的方法和变量，避免全局变量的污染。
<span class="token number">2</span>. 闭包是密闭的容器，类似 Set/Map容器，存储数据的。
<span class="token number">3</span>. 本质是函数嵌套函数，内部函数引用外部函数的局部变量，延长外部函数的变量生命周期。


<span class="token comment">### 闭包作用：</span>
- 延长了局部变量的作用范围与生命周期：执行完所有调用的函数才销毁函数里面的变量，保存函数中变量的值始终保持在内存中。
- 模仿块级作用域
- 封装私有化变量
- 创建模块

		
<span class="token comment">### 闭包缺点：</span>
- 函数执行完后，函数内的局部变量始终保持在内存中没有释放，占用内存时间会变长，容易导致 <span class="token string">&#39;内存泄露&#39;</span>。
- 在父函数外部改变复函数内部的值。
- this 的指向问题。


<span class="token comment">### 闭包的应用</span>
		- 函数柯里化
		- 立即执行函数 IIFE：<span class="token variable"><span class="token variable">\`</span><span class="token punctuation">(</span><span class="token function-name function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>
		- 实现函数的防抖节流
		- 在 <span class="token keyword">for</span> 循环中<span class="token punctuation">(</span>var 定义循环下标i<span class="token punctuation">)</span>中使用定时器
          for<span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">(</span>function<span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              setTimeout<span class="token punctuation">(</span><span class="token function-name function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console.log<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>,1000<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
	
  

<span class="token comment">### 闭包的生命周期：</span>
		- 产生：在嵌套内部函数定义执行完时就产生（此时不是指调用）
		- 死亡：在嵌套的内部函数称为垃圾时（即没有函数/变量指向它，该情况一般是设置为 null）
        <span class="token keyword">function</span> <span class="token function-name function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token builtin class-name">let</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
          <span class="token keyword">function</span> <span class="token function-name function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console.log<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          fun<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token builtin class-name">let</span> f <span class="token operator">=</span> fn<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   //延伸变量作用范围，当f<span class="token punctuation">(</span><span class="token punctuation">)</span>执行完，才会销毁num变量；fun函数可以访问fn函数的作用域，所以fun函数是闭包
        //等价： <span class="token builtin class-name">let</span> f <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function-name function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console.log<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="【典例】点击li-显示对应的li" tabindex="-1"><a class="header-anchor" href="#【典例】点击li-显示对应的li"><span>【典例】点击li，显示对应的li</span></a></h4><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>消息1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>消息2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//1. 利用动态添加属性的方式</span>
    <span class="token comment">/* for(let i=0;i&lt;lis.length;i++) {
        lis[i].index = i;
        lis[i].onclick = function() {
            console.log(this.index);
        }
    } */</span>

    <span class="token comment">//2. 利用闭包获得当前li的索引号</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 利用for循环创建4个立即执行函数，立即执行函数也成为小闭包</span>
        <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span>  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="面向对象-class" tabindex="-1"><a class="header-anchor" href="#面向对象-class"><span>面向对象 Class</span></a></h2><ul><li>面向对象编程 <ul><li>特性：封装性、继承性、多态性</li><li>优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态的特性，可以设计出低耦合的系统，使系统更加灵活、易于维护。</li></ul></li><li>面向过程 <ul><li>优点：性能比面向对象高，适合跟硬件联系很紧密的东西，如单片机。</li><li>缺点：没有面向对象易维护、易复用、易扩展</li></ul></li></ul><h3 id="constructor构造函数" tabindex="-1"><a class="header-anchor" href="#constructor构造函数"><span><code>constructor</code>构造函数</span></a></h3><ul><li><code>constructor()</code>方法是类的构造函数(默认方法)，用于传递参数，返回实例对象，通过<code>new</code>命令生成对象实例时自动调用该方法。如果没显示，类内部会自动创建一个。</li><li>注意：不可通过构造函数访问实例成员；静态成员只能怪通过构造函数访问</li><li>构造函数也是一个普通函数，但是内部使用了this变量。对构造函数使用new运算符，就能生成实例，并且this变量会绑定在实例对象上。</li></ul><h3 id="创建、调用类" tabindex="-1"><a class="header-anchor" href="#创建、调用类"><span>创建、调用类</span></a></h3><ol><li>通过<code>class</code>关键字创建类</li><li>类中有<code>constructor函数</code>(构造函数)，可接受传递来的参数同时返回实例对象；</li><li><code>constructor函数</code>只要<code>new</code>生成实例时，就会自动调用这个函数，如果不写这个函数，类也会自动生成这个函数；</li><li>生成实例<code>new</code>不能省略；</li></ol><blockquote><p>注意：在JS并不存在类，class只是语法糖，本质还是函数</p></blockquote><p><strong>注意：类中的方法默认开启局部严格模式<code>&#39;user strict&#39;</code>，所以在实例中用this调用其方法会是undefined</strong></p><h3 id="类的继承与super" tabindex="-1"><a class="header-anchor" href="#类的继承与super"><span>类的继承与<code>super</code></span></a></h3><ul><li><p><code>super</code>必须在子类<code>this</code>之前调用（一般放在首部）</p></li><li><p><code>super</code>作为函数调用时，代表父类的构造函数。</p></li><li><blockquote><p>ES6要求，子类的构造函数必须执行一次<code>super</code>函数。</p><p>注意：<code>super()</code>作为函数时，<code>super()</code>只能在子类的构造函数之中，用在其他地方就会报错</p></blockquote></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token comment">//constructor里面的 this 指向的是创建的实例对象</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//这个this指向的是 btn 这个按钮，因为该按钮调用了sing函数</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token string">&#39;小星星2号&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">sing</span><span class="token punctuation">(</span><span class="token parameter">song</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;唱：&#39;</span> <span class="token operator">+</span> song<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> study</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>study <span class="token operator">=</span> study<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//这个this指向的是 btn 这个按钮，因为该按钮调用了sing函数</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token string">&#39;大星星&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">sing</span><span class="token punctuation">(</span><span class="token parameter">song</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">&#39;唱：&#39;</span> <span class="token operator">+</span> song <span class="token operator">+</span> <span class="token string">&quot;学：&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>study<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> willy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token string">&#39;willy&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
willy<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token string">&#39;小星星1号&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">&#39;son&#39;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">&quot;es6&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="extends" tabindex="-1"><a class="header-anchor" href="#extends"><span>Extends</span></a></h3><ul><li><code>extends</code>关键字用来创建一个普通类或者内建对象的子类；继承的<code>.prototype</code>必须是一个<code>Object</code>或者 <code>null</code>。</li><li>语法：<code>class ChildClass extends ParentClass { ... }</code></li><li>扩展null：可以像普通类一样扩展<code>null</code>，但是新对象的原型将不会继承<code>Object.prototype</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* 继承时间对象Date */</span>
<span class="token keyword">class</span> <span class="token class-name">MyDate</span> <span class="token keyword">extends</span> <span class="token class-name">Date</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">getFormattedDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> months <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Jan&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Feb&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Mar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Apr&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;May&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Jun&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Jul&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Aug&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Sep&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Oct&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Nov&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Dec&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> months<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> aDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aDate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aDate<span class="token punctuation">.</span><span class="token function">getFormattedDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">/* 扩展 null */</span>
<span class="token keyword">class</span> <span class="token class-name">nullExtends</span> <span class="token keyword">extends</span> <span class="token class-name">null</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>nullExtends<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Function.prototype</span>
Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>nullExtends<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// null</span>
<span class="token comment">// new nullExtends();   // 报错ReferenceError: this is not defined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="static" tabindex="-1"><a class="header-anchor" href="#static"><span>static</span></a></h3><ul><li>类（class）通过 <strong>static</strong> 关键字定义静态方法。不能在类的实例上调用静态方法，而应该通过类本身调用。</li><li>这些通常是实用程序方法，例如创建或克隆对象的功能。</li></ul><h3 id="封装" tabindex="-1"><a class="header-anchor" href="#封装"><span>封装</span></a></h3><h4 id="函数的原始封装" tabindex="-1"><a class="header-anchor" href="#函数的原始封装"><span>函数的原始封装</span></a></h4><ul><li>缺点：各个实例对象没有内在联系，不能反映是同一个原型对象的实例</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">,</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span> color
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 生成实例对象</span>
<span class="token keyword">let</span> cat1 <span class="token operator">=</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token string">&#39;小黄&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> cat2 <span class="token operator">=</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token string">&#39;小黑&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="构造函数模式" tabindex="-1"><a class="header-anchor" href="#构造函数模式"><span>构造函数模式</span></a></h4><ul><li>实例对象会自动含有一个<code>constructor</code>属性，指向它们的构造函数。</li><li>js提供<code>instanceof</code>运算符，验证原型对象与实例对象之间的关系</li><li>缺点：当构造函数内的属性/方法为不变时，就会存在浪费内存问题（因为每一次生成实例对象，都会存在如type此种不变，多次生成就会产生重复内容的现象）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&quot;猫科动物&quot;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 生成实例对象</span>
<span class="token keyword">let</span> cat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">&#39;小黄&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> cat2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">&#39;小黑&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat1<span class="token punctuation">.</span>name <span class="token operator">==</span> cat2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat1<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Cat<span class="token punctuation">,</span> cat2<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Cat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true, true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat1 <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span>	<span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat1<span class="token punctuation">.</span>type <span class="token operator">==</span> cat2<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true   type属性因为不变，所以会产生重复的现象，造成内存浪费</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="prototype模式" tabindex="-1"><a class="header-anchor" href="#prototype模式"><span>prototype模式</span></a></h4><ul><li>isPrototypeOf()：判断某个<code>prototype</code>对象和某个实例对象之间的关系</li><li>hasOwnProperty()：每个实例对象都有一个<code>hasOwnProperty()</code>方法，用来判断某一个属性是本地属性还是集成自<code>prototype</code>对象的属性</li><li>in运算符：判断某个实例是否包含某个属性（还可用来遍历某个对象的所有属性）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&quot;猫科动物&quot;</span>
<span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eat</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;吃猫粮&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> cat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">&#39;小黄&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>cat1<span class="token punctuation">)</span><span class="token punctuation">,</span> cat1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;type&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span> <span class="token keyword">in</span> cat1<span class="token punctuation">)</span>  <span class="token comment">// true false true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数式编程-function" tabindex="-1"><a class="header-anchor" href="#函数式编程-function"><span>函数式编程 Function</span></a></h2><h3 id="函数的定义" tabindex="-1"><a class="header-anchor" href="#函数的定义"><span>函数的定义</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 函数的定义</span>
- 所有函数都是Function构造函数的实例对象。

- 函数的长度获取的函数形参的个数 Function.length
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+d+`" alt="image-20210425195525649"></p></blockquote><h3 id="name-属性" tabindex="-1"><a class="header-anchor" href="#name-属性"><span>name 属性</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## name 属性</span>
- 函数的name属性，返回该函数的函数名。
- Function构造函数返回的函数实例，name属性的值为anonymous。
- bind返回的函数，name属性值会加上bound前缀。

- 注意：如果将一个匿名函数赋值给一个变量，ES5 的name属性，会返回空字符串；而 ES6 的name属性会返回实际的函数名。
- 如果将一个具名函数赋值给一个变量，则 ES5 和 ES6 的name属性都返回这个具名函数原本的名字
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
foo<span class="token punctuation">.</span>name <span class="token comment">// &quot;foo&quot;</span>


<span class="token comment">// 构造函数</span>
<span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token comment">// &quot;anonymous&quot;</span>


<span class="token comment">// 匿名函数</span>
<span class="token keyword">var</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 变量f等于一个匿名函数</span>
<span class="token comment">// ES5</span>
f<span class="token punctuation">.</span>name <span class="token comment">// &quot;&quot;</span>
<span class="token comment">// ES6</span>
f<span class="token punctuation">.</span>name <span class="token comment">// &quot;f&quot;</span>


<span class="token comment">// 具名函数</span>
<span class="token keyword">const</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// ES5</span>
bar<span class="token punctuation">.</span>name <span class="token comment">// &quot;baz&quot;</span>
<span class="token comment">// ES6</span>
bar<span class="token punctuation">.</span>name <span class="token comment">// &quot;baz&quot;</span>


<span class="token comment">// bind 返回的函数</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token comment">// &quot;bound foo&quot;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token comment">// &quot;bound &quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="纯函数" tabindex="-1"><a class="header-anchor" href="#纯函数"><span>纯函数</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 纯函数</span>
- 纯函数：相同的输入，总是会得到相同的输出，并且在执行的过程中没有任何副作用。

- 判断是否为纯函数的两个指标：函数不受外部影响，同时也不影响外部环境。
    <span class="token number">1</span>. 函数的返回结果只依赖于它的参数<span class="token punctuation">(</span>不依赖外部的参数/函数，形成闭环<span class="token punctuation">)</span>
    <span class="token number">2</span>. 不改变函数体外部数据、函数运行过程不影响运行环境<span class="token punctuation">(</span>即无副作用，如触发事件、发起http请求、打印/log等<span class="token punctuation">)</span>


- 函数在执行的过程中产生的副作用是啥？
副作用是指函数在执行的过程中产生了对外部可观察变化。
    <span class="token number">1</span>. 发起 HTTP 请求
    <span class="token number">2</span>. 操作 DOM
    <span class="token number">3</span>. 修改外部数据
    <span class="token number">4</span>. console.log<span class="token punctuation">(</span><span class="token punctuation">)</span> 打印数据
    <span class="token number">5</span>. 调用 Date.now<span class="token punctuation">(</span><span class="token punctuation">)</span> 或者 Math.random<span class="token punctuation">(</span><span class="token punctuation">)</span>


- 纯函数的好处
		<span class="token number">1</span>. 更容易进行测试，结果只依赖输入，测试时可以确保输出稳定。
		<span class="token number">2</span>. 更容易维护和重构，我们可以写出质量更高的代码。
		<span class="token number">3</span>. 更容易调用，我们不用担心函数会有什么副作用。
		<span class="token number">4</span>. 结果可以缓存，因为相同的输入总是会得到相同的输出。


- 纯函数的优点
		- 无副作用，我们不用担心副作用带来的一些难以捕获的问题。
		- 语法更简洁，可读性好，代码量相对较小，易复用。
		- 占用内存小，无生命周期和状态管理，提高了性能。
- 纯函数的缺点
		- 没有生命周期。


- 纯函数的实际应用
		<span class="token number">1</span>. 数组的很多基本方法，如 map、forEach、filter、reduce 等。
		<span class="token number">2</span>. React 的纯函数组件。
		<span class="token number">3</span>. Lodash 工具库的方法。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 非纯函数</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  a <span class="token operator">=</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b</span>



<span class="token comment">// 纯函数</span>
<span class="token keyword">function</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  a <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> a
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="回调函数" tabindex="-1"><a class="header-anchor" href="#回调函数"><span>回调函数</span></a></h3><blockquote><ul><li>当回调函数是一个this对象的方法时，我们必须改变执行回调函数的方法(call/apply方法)来保证this对象的上下文。否则如果回调函数被传递给一个全局函数，this对象要么指向全局window对象（在浏览器中）。要么指向包含方法的对象。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> clientData <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">094545</span><span class="token punctuation">,</span>
  <span class="token literal-property property">fullName</span><span class="token operator">:</span> <span class="token string">&quot;Not Set&quot;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">setUserName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">firstName<span class="token punctuation">,</span> lastName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> firstName <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> lastName
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getUserInput</span><span class="token punctuation">(</span><span class="token parameter">firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">callback</span><span class="token punctuation">(</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token parameter">firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> callbackObj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">callback</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>callbackObj<span class="token punctuation">,</span> <span class="token punctuation">[</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">getUserInput</span><span class="token punctuation">(</span><span class="token string">&quot;Barack&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Obama&quot;</span><span class="token punctuation">,</span> clientData<span class="token punctuation">.</span>setUserName<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>clientData<span class="token punctuation">,</span> fullName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Not Set</span>
<span class="token comment">//fullName属性将在window对象中被初始化    </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Barack Obama</span>

<span class="token comment">// 改正做法</span>
<span class="token comment">//将clientData.setUserName方法和clientData对象作为参数，clientData对象会被Apply方法使用来设置this对象</span>
<span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token string">&quot;Barack&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Obama&quot;</span><span class="token punctuation">,</span> clientData<span class="token punctuation">.</span>setUserName<span class="token punctuation">,</span> clientData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//clientData中的fullName属性被正确的设置</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>clientUser<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Barack Obama</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="组合函数" tabindex="-1"><a class="header-anchor" href="#组合函数"><span>组合函数</span></a></h3><ul><li>组合函数：函数中嵌套函数(形如<code>fn3(fn2(fn1(fn0(x))))</code>)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token parameter">next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fn1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fn1 settimeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end fn1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token parameter">next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fn2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end fn2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn3</span><span class="token punctuation">(</span><span class="token parameter">next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end fn3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token parameter">mids</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//最终组合结果函数</span>
    <span class="token comment">//执行第0个</span>
    <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//需要返回Promise</span>
    <span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> fn <span class="token operator">=</span> mids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//执行任务结束</span>
        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">compose</span><span class="token punctuation">(</span><span class="token punctuation">[</span>fn1<span class="token punctuation">,</span> fn2<span class="token punctuation">,</span> fn3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;任务执行结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* fn1
fn2
fn1 settimeout
end fn3
end fn2
end fn1
任务执行结束 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="缓存函数" tabindex="-1"><a class="header-anchor" href="#缓存函数"><span>缓存函数</span></a></h3><blockquote><ul><li>缓存函数<code>memorizition</code>定义：将上次的计算结果缓存起来，当下次调用时，如果遇到相同的参数，就直接返回缓存中的数据。</li><li>应用场景：需要大量重复计算并且依赖之前的结果</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token keyword">let</span> calc <span class="token operator">=</span> <span class="token function">memoize</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30</span>
<span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30 缓存</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要实现以上功能，主要依靠 闭包 、柯里化、高阶函数 实现原理：把参数和对应的结果数据存在一个对象中，调用时判断参数对应的数据是否存在，存在就返回对应的结果数据，否则就返回计算结果。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">memoize</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> cache <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
  content <span class="token operator">=</span> content <span class="token operator">||</span> <span class="token keyword">this</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>过程分析 <ul><li>在当前函数作用域定义了一个空对象，用于缓存运行结果</li><li>运用柯里化返回一个函数，返回的函数因为作用域链的原因，可以访问到<code>cache</code></li><li>然后判断输入参数是不是在<code>cache</code>的中。如果已经存在，直接返回<code>cache</code>的内容，如果没有存在，使用函数<code>func</code>对输入参数求值，然后把结果存储在<code>cache</code>中。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 例：把字符串开头转成大写</span>
<span class="token keyword">let</span> <span class="token function-variable function">cached</span> <span class="token operator">=</span> <span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> cache <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> cache<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> capitalize <span class="token operator">=</span> <span class="token function">cached</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">&#39;willy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>capitalize<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="惰性函数" tabindex="-1"><a class="header-anchor" href="#惰性函数"><span>惰性函数</span></a></h3><blockquote><ul><li>惰性函数是针对优化频繁使用的函数(当再次调用相同的函数，不再执行某些判断条件)；常用于函数库的编写、单例模式中。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUTCFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function-variable function">test1</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//第一次调用之后，改变test函数，使得可以直接返回t</span>
    <span class="token keyword">return</span> t<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 例：添加绑定事件（原版）</span>
<span class="token keyword">function</span> <span class="token function">addEvent</span><span class="token punctuation">(</span><span class="token parameter">dom<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dom<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    dom<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&#39;on&#39;</span> <span class="token operator">+</span> type<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用惰性函数优化</span>
<span class="token keyword">function</span> <span class="token function">addEvent</span><span class="token punctuation">(</span><span class="token parameter">dom<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dom<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function-variable function">addEvent</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">dom<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//第一次判断后，之后就不再判断</span>
      dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    dom<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&#39;on&#39;</span> <span class="token operator">+</span> type<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function-variable function">addEvent</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">dom<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      dom<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&#39;on&#39;</span> <span class="token operator">+</span> type<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> addEvent<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="立即执行函数iife" tabindex="-1"><a class="header-anchor" href="#立即执行函数iife"><span>立即执行函数<code>IIFE</code></span></a></h3><blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>	<span class="token comment">// 在立即表达函数前面添加分号，否则会报错(a is not a function)</span>
<span class="token comment">// 调用匿名函数</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> window<span class="token punctuation">,</span> a<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> window<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 调用匿名对象</span>
<span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;willy&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">show</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token function-variable function">a</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;匿名函数&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="函数防抖与节流" tabindex="-1"><a class="header-anchor" href="#函数防抖与节流"><span>函数防抖与节流</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 函数防抖与节流</span>
- 在进行窗口的resize、scroll，输入框内容校验等操作时，如果事件处理函数调用的频率无限制，会加重浏览器的负担，导致用户体验非常糟糕。此时我们可以采用debounce（防抖）和throttle（节流）的方式来限制函数调用的频度，弱化事件函数运行带来的影响，同时又不影响实际效果。（ 高频触发优化方式）


<span class="token comment">### 函数节流(事件降频)</span>
当持续触发事件时，每隔一段时间后调用一次事件处理函数，即降低频率，将高频操作优化成低频操作。


<span class="token comment">### 函数防抖</span>
当某事件频繁触发时，一定时间段内没有再触发事件，事件处理函数才会执行一次；如果设定的时间到来之前又一次触发了事件，就重新开始延时。
  - 将多次高频操作优化为只在最后一次执行
  - 即当某事件在设定时间内持续触发时，事件处理函数只会执行一次（有效的降低了事件的使用频率，以及降低了浏览器的负担）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="防抖函数封装" tabindex="-1"><a class="header-anchor" href="#防抖函数封装"><span>防抖函数封装</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
   * <span class="token keyword">@desc</span> 函数防抖
   * <span class="token keyword">@param</span> <span class="token parameter">func</span> 目标函数
   * <span class="token keyword">@param</span> <span class="token parameter">wait</span> 延迟执行毫秒数
   */</span>
<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait <span class="token operator">=</span> <span class="token number">50</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> func <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;need a function arguments&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token comment">// 清除未执行的代码，重置回初始化状态</span>
    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;延迟执行事件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token comment">// 创建监听器</span>
<span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> updateLayout <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;resize&quot;</span><span class="token punctuation">,</span> updateLayout<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  window<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&quot;onresize&quot;</span><span class="token punctuation">,</span> updateLayout<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="节流函数封装" tabindex="-1"><a class="header-anchor" href="#节流函数封装"><span>节流函数封装</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">throttle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> wait <span class="token operator">=</span> <span class="token number">500</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>
    <span class="token comment">// 判断是否已空闲，如果在执行中，则直接return</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
        timer <span class="token operator">=</span> <span class="token keyword">null</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;延迟执行&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> <span class="token function">throttle</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="箭头函数" tabindex="-1"><a class="header-anchor" href="#箭头函数"><span>箭头函数</span></a></h3><blockquote><ul><li>箭头函数表达式的语法比函数表达式更简洁，且自身没有<code>this、arguments、super、new.target</code>。箭头函数表达式适用于本来需要匿名函数的地方，并且它不能用作构造函数(即不能使用new)。</li><li>箭头函数没有自己的<code>this</code>对象，箭头函数内部的<code>this</code>指向是固定为定义时上层作用域中的<code>this</code>，而普通函数内部的<code>this</code>指向函数运行时所在对象(普通函数this可变)。</li><li>不可当做构造函数，即不可对箭头函数使用<code>new</code>命令，否则会抛出错误</li><li>不可使用<code>arguments</code>对象，该对象在函数体内不存在，但可使用rest参数来替代<code>arguments</code></li><li>不可使用<code>yield</code>命令，因此箭头函数不能用作<code>Generator</code>函数</li><li>因为箭头函数没有自身<code>this</code>，因此不能用<code>call()、apply()、bind()</code>来改变this的指向</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//1、函数代码块中只有返回值：(param1) =&gt;{ return expression; }</span>
<span class="token keyword">const</span> <span class="token function-variable function">mul</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> num1 <span class="token operator">*</span> num2
<span class="token function">mul</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>

<span class="token comment">// 2、当只有一个参数时，圆括号可省略：(singleParam) =&gt; { statements }</span>
<span class="token parameter">singleParam</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> statements <span class="token punctuation">}</span>

<span class="token comment">// 3、没有参数的函数应该写成一对圆括号。</span>
<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> statements <span class="token punctuation">}</span>

<span class="token comment">//高级语法</span>
<span class="token comment">// 1、加括号的函数体返回对象字面量表达式：</span>
<span class="token parameter">params</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">foo</span><span class="token operator">:</span> bar<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 2、支持剩余参数和默认参数</span>
<span class="token punctuation">(</span><span class="token parameter">param1 <span class="token operator">=</span> defaultVal1<span class="token punctuation">,</span> param2 <span class="token operator">=</span> defaultVal2<span class="token punctuation">,</span> <span class="token operator">...</span>rest</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> statements <span class="token punctuation">}</span>

<span class="token comment">//3、同样支持参数列表解构</span>
<span class="token keyword">let</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> c<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>箭头函数中的this</strong></p><ul><li>箭头函数中的<code>this</code>引用的是函数定义位置的上下文this（最近作用域中的 this）。</li><li>箭头函数中的 this 查找方式是：向外层作用域中，一层层查找this，查到this的定义</li><li>只要上级或自己是function，this则为匿名函数的window对象；上级和自己都是箭头函数，this则为自定义对象obj</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/*  第二个是在第一个里面，所以找的是第一个里面的this
第四个是在a函数里面所以找的是obj对象的this   */</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//window</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//window</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//window</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//obj.a()</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
obj<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="尾调用" tabindex="-1"><a class="header-anchor" href="#尾调用"><span>尾调用</span></a></h3><blockquote><ul><li>尾调用<code>Tail Call</code>是指某个函数最后一步通过<code>return</code>来调用另一个函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* ---------以下三种情况都不属于尾调用--------------- */</span>
<span class="token comment">// 情况一：函数调用后还有赋值操作，所以不属于未调用</span>
<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 情况二：函数调用后还有操作，所以不属于未调用</span>
<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 情况三：等同return undefined，所以不属于未调用</span>
<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 正确的尾调用</span>
<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">m</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">n</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>函数调用会在内存形成一个调用记录（又称“调用帧”<code>call frame</code>），保存调用位置和内部变量等信息，如果在函数内部调用函数，还会形成该函数的调用帧；这些所有的调用帧就会形成一个“调用栈”<code>call stack</code>。</li><li>尾部调用犹豫是函数最后一步操作，所以不需要保留外层函数的调用帧，因为调用位置、内部变量等都不会用到，只要直接用内层函数的调用帧取代外层函数调用帧即可。</li></ul></blockquote><h3 id="递归" tabindex="-1"><a class="header-anchor" href="#递归"><span>递归</span></a></h3><blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* 递归遍历多层\`json\`数据 */</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;家电&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">goods</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>
    <span class="token literal-property property">gname</span><span class="token operator">:</span> <span class="token string">&#39;冰箱&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">goods</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token literal-property property">gname</span><span class="token operator">:</span> <span class="token string">&#39;海尔&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token literal-property property">gname</span><span class="token operator">:</span> <span class="token string">&#39;美的&#39;</span><span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
    <span class="token literal-property property">gname</span><span class="token operator">:</span> <span class="token string">&#39;洗衣机&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;服饰&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span>

<span class="token comment">//输入id号，返回数据对象</span>
<span class="token keyword">function</span> <span class="token function">getID</span><span class="token punctuation">(</span><span class="token parameter">json<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  json<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id <span class="token operator">==</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      o <span class="token operator">=</span> item<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>goods <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>goods<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      o <span class="token operator">=</span> <span class="token function">getID</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>goods<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> o<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">getID</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">getID</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">getID</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="尾递归" tabindex="-1"><a class="header-anchor" href="#尾递归"><span>尾递归</span></a></h3><blockquote><ul><li>函数调用自身称为递归，若尾调用自身，则称为尾递归。</li><li>递归非常耗内存，因为需要同事保存成千上百个调用帧，就容易发生“栈溢出”错误。但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误，相对节省内存。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* 阶乘函数，最多需要保存 n 个调用记录，复杂度O(n)    结果保存在内存中 */</span>
<span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n
  <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 改成尾递归，只保留一个调用记录，复杂度O(1)   结果保存在参数中*/</span>
<span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> total <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> total
  <span class="token keyword">return</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">*</span> total<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* ---------------斐波那契数列实现-------------- */</span>
<span class="token keyword">function</span> <span class="token function">Fibonacci</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">Fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">Fibonacci</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 89</span>
<span class="token function">Fibonacci</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// 超时</span>
<span class="token function">Fibonacci</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token comment">// 超时</span>

<span class="token comment">/* 尾递归优化斐波那契数列 */</span>
<span class="token keyword">function</span> <span class="token function">Fibonacci2</span> <span class="token punctuation">(</span><span class="token parameter">n <span class="token punctuation">,</span> ac1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">,</span> ac2 <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> ac2<span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">Fibonacci2</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> ac2<span class="token punctuation">,</span> ac1 <span class="token operator">+</span> ac2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">Fibonacci2</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// 573147844013817200000</span>
<span class="token function">Fibonacci2</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// 7.0330367711422765e+208</span>
<span class="token function">Fibonacci2</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token comment">// Infinity</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="函数柯里化" tabindex="-1"><a class="header-anchor" href="#函数柯里化"><span>函数柯里化</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 函数柯里化</span>
柯里化<span class="token punctuation">(</span>currying<span class="token punctuation">)</span>是一个函数，它一次接受一个参数，并返回一个新函数，该函数期待下一个参数。它是一种函数转换，将 <span class="token variable"><span class="token variable">\`</span>f<span class="token punctuation">(</span>a,b,c<span class="token punctuation">)</span><span class="token variable">\`</span></span> 转换为可以被以 <span class="token variable"><span class="token variable">\`</span>f<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token variable">\`</span></span> 的形式进行调用。
即柯里化是计算具有多个参数的函数，并将它们分解为具有单个参数的函数序列。

使用柯里化的原因
	- 柯里化是一种检查方法，确保你在继续之前得到了所需的一切<span class="token punctuation">(</span>结果缓存<span class="token punctuation">)</span>
	- 它可以避免多次传递同一个变量<span class="token punctuation">(</span>参数服用<span class="token punctuation">)</span>
	- 它将函数划分为多个较小的功能，可以处理一项职责。这使你的函数更纯粹，降低出错及产生副作用的概率。<span class="token punctuation">(</span>函数颗粒化<span class="token punctuation">)</span>
	- 在函数编程中，可用于创建高阶函数。
	

柯里化的缺点
	- 柯里化基于闭包实现，可能会导致内存泄漏
	- 使用递归执行会降低性能，递归过多时会发生栈溢出，需要进行递归优化。
	- arguments 是类数组，使用 <span class="token variable"><span class="token variable">\`</span>Array.prototype.slice.call<span class="token variable">\`</span></span> 转换为数组时效率低。

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 非柯里化</span>
<span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c
<span class="token punctuation">}</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 6</span>


<span class="token comment">// 柯里化</span>
<span class="token keyword">const</span> <span class="token function-variable function">addCurrying</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">addCurrying</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 6</span>


<span class="token comment">// 箭头函数简化</span>
<span class="token keyword">const</span> <span class="token function-variable function">addCurry</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c
<span class="token function">addCurry</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="高级柯里化" tabindex="-1"><a class="header-anchor" href="#高级柯里化"><span>高级柯里化</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">curry</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> rest <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token operator">...</span>arguments<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rest<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> fn<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">curry</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> fn<span class="token punctuation">,</span> rest<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> rest<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// test</span>
<span class="token keyword">function</span> <span class="token function">sum</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c <span class="token punctuation">}</span>
<span class="token keyword">const</span> sumFn <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">curry</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 6</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sumFn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 6</span>


<span class="token doc-comment comment">/** 箭头函数的写法 */</span>
cons <span class="token function-variable function">currys</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> args<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> fn<span class="token punctuation">.</span>length
  	<span class="token operator">?</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
  	<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">curry</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token operator">...</span>args2<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c <span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">curry</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="函数复用" tabindex="-1"><a class="header-anchor" href="#函数复用"><span>函数复用</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 函数封装后</span>
<span class="token keyword">function</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token parameter">reg<span class="token punctuation">,</span> txt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token function">check</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span>       <span class="token comment">//false</span>
<span class="token function">check</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span>    <span class="token comment">//true</span>

<span class="token comment">// Currying后</span>
<span class="token keyword">function</span> <span class="token function">curryingCheck</span><span class="token punctuation">(</span><span class="token parameter">reg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">txt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> hasNumber <span class="token operator">=</span> <span class="token function">curryingCheck</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span>
<span class="token keyword">var</span> hasLetter <span class="token operator">=</span> <span class="token function">curryingCheck</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span>
<span class="token function">hasNumber</span><span class="token punctuation">(</span><span class="token string">&#39;test1&#39;</span><span class="token punctuation">)</span>      <span class="token comment">// true</span>
<span class="token function">hasNumber</span><span class="token punctuation">(</span><span class="token string">&#39;testtest&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// false</span>
<span class="token function">hasLetter</span><span class="token punctuation">(</span><span class="token string">&#39;21212&#39;</span><span class="token punctuation">)</span>      <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h4 id="参数不定长的柯里化" tabindex="-1"><a class="header-anchor" href="#参数不定长的柯里化"><span>参数不定长的柯里化</span></a></h4><ul><li>valueOf()：返回最适合该对象类型的原始值</li><li>toString(): 将该对象的原始值以字符串形式返回</li><li>这两个方法一般是交由JS去隐式调用，以满足不同的运算情况。 在数值运算里，会优先调用valueOf()，如a + b 在字符串运算里，会优先调用toString()，如alert(c)。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 保存预置参数</span>
  <span class="token keyword">const</span> presetArgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>

  <span class="token comment">// 返回一个新函数</span>
  <span class="token keyword">function</span> <span class="token function">curried</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 新函数调用时会继续传参</span>
    <span class="token keyword">const</span> restArgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>
    <span class="token comment">// 下面这个相当于 return curry(fn, ...[...presetArgs, ...restArgs])</span>
    <span class="token keyword">return</span> <span class="token function">curry</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> fn<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">[</span><span class="token operator">...</span>presetArgs<span class="token punctuation">,</span> <span class="token operator">...</span>restArgs<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 重写toString</span>
  curried<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> presetArgs<span class="token punctuation">)</span> <span class="token comment">// return fn.call(null, ...presetArgs)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> curried<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> curr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> prev <span class="token operator">+</span> curr
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> add <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 21</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="柯里化加法" tabindex="-1"><a class="header-anchor" href="#柯里化加法"><span>柯里化加法</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> fn_args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>fn_args<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  fn<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> fn
<span class="token punctuation">}</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token comment">// 1</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  	<span class="token comment">// 3</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 6</span>
<span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>
<span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>
<span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// ƒ 1 ƒ 3 ƒ 6 ƒ 6 ƒ 6 ƒ 6</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
  <span class="token function">String</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>
  b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  c<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  d<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">String</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token comment">// ƒ 1 ƒ 3 ƒ 6 ƒ 6 ƒ 6 ƒ 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="偏函数" tabindex="-1"><a class="header-anchor" href="#偏函数"><span>偏函数</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 偏函数</span>
- 柯里化：将一个多参数函数转换成多个单参数的函数，即将一个 n 元函数转换为 n 个一元函数。
- 偏函数：固定一个函数的一个或多个参数<span class="token punctuation">(</span>即设置默认值<span class="token punctuation">)</span>，返回一个新函数，在新函数中继续接收剩余参数，即将一个 n 元函数转换成一个 n-x 元函数。

- 柯里化：一个接受多个参数的函数。它将把这个函数转换成一系列函数，其中每个小函数将接受一个参数，直到所有参数都完成。
- 偏函数：当给定的参数少于预期的参数时，函数将转化为偏函数，并返回一个期望剩余参数的新函数。

偏函数的使用场景
    - 动态生成函数
    - 减少参数
    - 延迟计算
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 乘法</span>
<span class="token keyword">let</span> <span class="token function-variable function">multi</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>

<span class="token comment">// 构造一个对数值乘以2的函数</span>
<span class="token keyword">let</span> double <span class="token operator">=</span> <span class="token function">multi</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>

<span class="token keyword">const</span> <span class="token function-variable function">addPartial</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z
<span class="token keyword">const</span> partialFunc <span class="token operator">=</span> <span class="token function">addPartial</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token function">partialFunc</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 10</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="链式调用" tabindex="-1"><a class="header-anchor" href="#链式调用"><span>链式调用</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">### 链式调用</span>
在构造函数中创建方法时，<span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">return</span> this<span class="token variable">\`</span></span> 返回当前调用方法的对象，可以实现链式调用方法。

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">modifyName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">return</span> <span class="token keyword">this</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;IU&#39;</span><span class="token punctuation">)</span>

person
  <span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">modifyName</span><span class="token punctuation">(</span><span class="token string">&#39;UI&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// IU</span>
<span class="token comment">// UI</span>
<span class="token comment">// Person { name: &#39;UI&#39;, sayHi: f, modifyName: f }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="原型链-prototype" tabindex="-1"><a class="header-anchor" href="#原型链-prototype"><span>原型链 prototype</span></a></h2><h3 id="proto、prototype、constructor" tabindex="-1"><a class="header-anchor" href="#proto、prototype、constructor"><span><strong>proto</strong>、prototype、constructor</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## \`__proto__、prototype、constructor\`</span>
<span class="token comment">### 原型对象 \`prototype\`</span>
- prototype 是构造函数的属性。
- prototype属性在函数创建时已经生成，它是函数实例化的对象。即是当前函数new出来的对象指向当前函数的prototype。
- 作用：
		<span class="token number">1</span>. 共享方法。
		<span class="token number">2</span>. 解决构造函数多命名，防止冲突问题。
- 原型对象的 constructor 属性：为了让对象/实例找到创建该对象的构造函数<span class="token punctuation">(</span>指回构造函数本身<span class="token punctuation">)</span>
- 注意：当重新设置构造函数的prototype，一定要重新设置constructor属性指向自身：<span class="token variable"><span class="token variable">\`</span>fn.constructor <span class="token operator">=</span> fn<span class="token variable">\`</span></span>。


<span class="token comment">### 对象原型 \`__proto__\`</span>
- <span class="token variable"><span class="token variable">\`</span>__proto__<span class="token variable">\`</span></span>读作<span class="token variable"><span class="token variable">\`</span>dunder proto<span class="token variable">\`</span></span>，由<span class="token variable"><span class="token variable">\`</span>__proto__<span class="token variable">\`</span></span>属性来连接对象，直到null。
- 当对象查找一个属性时，如果没有在自身找到，则会通过<span class="token variable"><span class="token variable">\`</span>__proto__<span class="token variable">\`</span></span>属性逐级向上查找自身的原型，直到找到 Object.prototype 原型为 null 时查找停止，再往上找就相当于在null上取值，会报错。这种通过<span class="token variable"><span class="token variable">\`</span>__proto__<span class="token variable">\`</span></span>属性逐级向上查找原型链称为原型链。
- 对象的<span class="token variable"><span class="token variable">\`</span>__proto__<span class="token variable">\`</span></span>链接到最后两个节点应是<span class="token variable"><span class="token variable">\`</span>前面N层 -<span class="token operator">&gt;</span> Object.protype -<span class="token operator">&gt;</span> null<span class="token variable">\`</span></span>，即<span class="token variable"><span class="token variable">\`</span>Object.prototype.__proto__ <span class="token operator">==</span><span class="token operator">=</span> null<span class="token variable">\`</span></span>
- 对象都有一个属性 <span class="token variable"><span class="token variable">\`</span>_-proto__<span class="token variable">\`</span></span> 指向构造函数的 prototype 原型对象，之所有可使用构造函数 prototype 原型对象的属性和方法，就是因为对象有 <span class="token variable"><span class="token variable">\`</span>__proto__<span class="token variable">\`</span></span> 原型存在。
- 通过new出来的实例对象的<span class="token variable"><span class="token variable">\`</span>__proto__ <span class="token variable">\`</span></span>等于对象的prototype，<span class="token variable"><span class="token variable">\`</span>实例对象.__proto__ <span class="token operator">=</span> 实例对象.constructor.prototype<span class="token variable">\`</span></span>
- 对象原型<span class="token variable"><span class="token variable">\`</span>__proto_-<span class="token variable">\`</span></span> 的存在意义是为对象的查找提供一个路线，但它是非标准属性，因此实际开发不推荐使用该属性，它只是内部指向原型对象 <span class="token variable"><span class="token variable">\`</span>prototype<span class="token variable">\`</span></span>。


<span class="token comment">### constructor</span>
- 只有 prototype 对象才会拥有constructor属性，constructor属性指向对象的构造函数，<span class="token variable"><span class="token variable">\`</span>fn.prototype.constructor <span class="token operator">==</span><span class="token operator">=</span> fn<span class="token variable">\`</span></span>
- 如果一个对象没有prototype的话，那么就会寻找它的<span class="token variable"><span class="token variable">\`</span>__proto__<span class="token variable">\`</span></span>。


<span class="token comment">### 总结</span>
- 对象包含：<span class="token variable"><span class="token variable">\`</span>__proto__、constructor<span class="token variable">\`</span></span>
- 函数包含：<span class="token variable"><span class="token variable">\`</span>__proto__、constructor、prototype<span class="token variable">\`</span></span>
- <span class="token variable"><span class="token variable">\`</span>__proto__和constructor<span class="token variable">\`</span></span>属性是对象独有的，<span class="token variable"><span class="token variable">\`</span>prototype<span class="token variable">\`</span></span>属性是函数所独有的，因为函数也是一种对象，所以函数也拥有<span class="token variable"><span class="token variable">\`</span>__proto__和constructor<span class="token variable">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="原型链解决的是什么问题" tabindex="-1"><a class="header-anchor" href="#原型链解决的是什么问题"><span>原型链解决的是什么问题</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 原型链</span>
- 通过new出来的实例对象的<span class="token variable"><span class="token variable">\`</span>__proto__ <span class="token variable">\`</span></span>等于对象的prototype，<span class="token variable"><span class="token variable">\`</span>实例对象.__proto__ <span class="token operator">=</span> 实例对象.constructor.prototype<span class="token variable">\`</span></span>。
- 使用后<span class="token variable"><span class="token variable">\`</span>hasOwnProperty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>方法来判断属性是否属于原型链的属性
- <span class="token variable"><span class="token variable">\`</span>__proto__<span class="token variable">\`</span></span>属性的作用：当对象查找一个属性时，如果没有在自身找到，则会通过<span class="token variable"><span class="token variable">\`</span>__proto__<span class="token variable">\`</span></span>属性逐级向上查找自身的原型，直到找到 Object.prototype 原型为 null 时查找停止，再往上找就相当于在null上取值，会报错。这种通过<span class="token variable"><span class="token variable">\`</span>__proto__<span class="token variable">\`</span></span>属性逐级向上查找原型链称为原型链。
- prototype属性的作用：让该函数所实例化的对象们都可以找到公用的属性和方法，即<span class="token variable"><span class="token variable">\`</span>f1.__proto__ <span class="token operator">==</span><span class="token operator">=</span> Foo.prototype<span class="token variable">\`</span></span>
- constructor属性的含义：指向该对象的构造函数，所有函数（此时看成对象）最终的构造函数都指向Function
- 原型继承：一个对象可以使用另一个对象的属性或者方法称为继承。具体是通过将这个对象的原型设置为另外一个对象，这样根据原型链的规则，如果查找一个对象属性且在自身不存在时，就会查找另外一个对象，相当于一个对象可以使用另外一个对象的属性和方法了。



<span class="token comment">### 对原型的理解</span>
在 JavaScript 中，每当定义一个对象（函数也是对象）时候，对象中都会包含一些预定义的属性。其中每个函数对象都有一个prototype 属性，这个属性指向函数的原型对象。
使用原型对象的好处是所有对象实例共享它所包含的属性和方法。



<span class="token comment">### 原型链解决什么问题？</span>
原型链解决的主要是继承问题。
每个对象拥有一个原型对象，通过 <span class="token variable"><span class="token variable">\`</span>__proto__<span class="token variable">\`</span></span> <span class="token punctuation">(</span>读音: dunder proto<span class="token punctuation">)</span> 指针指向其原型对象，并从中继承方法和属性，同时原型对象也可能拥有原型，这样一层一层，最终指向 null <span class="token punctuation">(</span>Object.prototype.__proto__ 指向的是 null<span class="token punctuation">)</span>，这种关系被称为原型链<span class="token punctuation">(</span>prototype chain<span class="token punctuation">)</span>。
通过原型链，一个对象可以拥有定义在其他对象中的属性和方法。



<span class="token comment">### 原型链和作用域链的区别</span>
<span class="token number">1</span>. 原型链
当访问一个对象的某个属性时，会先在这个对象本身的属性上找；
如果没有找到，会去这个属性的__proto__属性上找，即这个构造函数的prototype；
如果还没找到，就会继续在__proto__上查找，直到最顶层，找不到即为undefined。
这样一层一层往上找，彷佛是一条链子串起来，所以叫做原型链。

<span class="token number">2</span>. 作用域链
变量取值会到创建这个变量的函数的作用域中取值；
如果找不到，就会向上级作用域去查，直到查到全局作用域。
这么一个查找过程形成的链条就叫做作用域链。

<span class="token number">3</span>. 区别
作用域是对变量而言，原型链是对于对象的属性而言
作用域链的顶层是window，原型链的顶层是Object
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//很多情况下，需手动的利用constructor这个属性只会原来的构造函数</span>
<span class="token class-name">Star</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sing</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span> <span class="token string">&#39;sing&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Star</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//如果修改了原来的原型对象，给原型对象赋值的是一个对象，则必须手动利用construtor指回原来的构造函数</span>
  <span class="token literal-property property">constructor</span><span class="token operator">:</span> Star<span class="token punctuation">,</span>
  <span class="token function-variable function">song</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;song&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">&#39;willy&#39;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ldh<span class="token punctuation">.</span>sing<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// undefined (被覆盖了)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ldh<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Star</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Star</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> ldh<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//{constructor: [Function: Star], song: [Function: song]}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Star</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//[Function: Star]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ldh<span class="token punctuation">.</span><span class="token class-name">__proto__</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Star</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>  <span class="token comment">//ture</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">//null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+v+`" alt="image-20210422131258473"></p></blockquote><h3 id="扩展内置对象" tabindex="-1"><a class="header-anchor" href="#扩展内置对象"><span>扩展内置对象</span></a></h3><blockquote><ul><li><p>可以通过原型对象，给原来的内置对象进行扩展自定义的方法。如给数组增加自定义求和的功能。</p></li><li><p>注意：数组和字符串内置对象不能给原型对象覆盖操作 <code>Array.prototype = {}</code>，只能是<code>Array.protype.xxx = function(){}</code>的方式。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//给数组添加求和方法</span>
<span class="token comment">//Array.prototype = {sum: function(){}}//这是错误的书写方式</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        sum <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//66</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数"><span>构造函数</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 构造函数</span>
- 构造函数是通过 new 关键字来生成对象实例，生成对象实例的过程也是通过构造函数给实例绑定this的过程，而箭头函数没有自己的this。
- 创建对象过程，new首先会创建一个空对象，并将这个空对象的<span class="token variable"><span class="token variable">\`</span>___propto__<span class="token variable">\`</span></span>指向构造函数的prototype，从而继承原型上的方法。
- 注意：箭头函数没有prototype。因此不能使用箭头函数作为构造函数，也就不能通过new操作符来调用箭头函数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="new生成一个对象的过程" tabindex="-1"><a class="header-anchor" href="#new生成一个对象的过程"><span>new生成一个对象的过程</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">### 构造函数的new做了什么</span>
var obj <span class="token operator">=</span> new Base<span class="token punctuation">(</span><span class="token punctuation">)</span>
所做的过程是 <span class="token operator">==</span><span class="token operator">&gt;</span>  var obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> obj.__proto__ <span class="token operator">=</span> Base.prototype<span class="token punctuation">;</span> Base.call<span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

创建过程：
    <span class="token number">1</span>. JS内部首先会创建一个空对象 <span class="token variable"><span class="token variable">\`</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token variable">\`</span></span>；
    <span class="token number">2</span>. 为步骤1新创建的对象添加属性 <span class="token variable"><span class="token variable">\`</span>__proto__<span class="token variable">\`</span></span>，将该属性连接至构造函数的原型对象（将构造函数的原型链赋给实例对象）；
    <span class="token number">3</span>. 将步骤1新创建的对象作为 this 的上下文（使用 call 改变构造函数 this 指向，指向到实例对象 obj）；
    <span class="token number">4</span>. 如果该函数没有返回对象，则返回 this。

注意：
		- 在构造函数中是不用写 <span class="token builtin class-name">return</span> 语句，因为它会默认返回新创建的对象。
		- 但如果在构造函数中写了 <span class="token builtin class-name">return</span> 语句，且 <span class="token builtin class-name">return</span> 的是一个对象，那么函数就会覆盖新创建的对象并返回。
	 	- 如果 <span class="token builtin class-name">return</span> 的是基本类型，如字符串、数字、布尔值等，那么函数会忽略掉 <span class="token builtin class-name">return</span> 语句，还是返回新创建的对象。



<span class="token comment">### 字面量创建对象</span>
字面量创建对象，不会调用 Object构造函数, 简洁且性能更好<span class="token punctuation">;</span>
new Object<span class="token punctuation">(</span><span class="token punctuation">)</span> 方式创建对象本质上是方法调用，涉及到在proto链中遍历该方法，当找到该方法后，又会生产方法调用必须的 堆栈信息，方法调用结束后，还要释放该堆栈，性能不如字面量的方式。
通过对象字面量定义对象时，不会调用Object构造函数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="new生成一个对象的实现" tabindex="-1"><a class="header-anchor" href="#new生成一个对象的实现"><span>new生成一个对象的实现</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">let</span> <span class="token punctuation">[</span>constructor<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>argument<span class="token punctuation">]</span>
  target<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> constructor<span class="token punctuation">.</span>prototype
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
  <span class="token comment">// 如果函数没有返回其他对象，那么返回创建的这个新对象，否则返回构造函数的执行结果。</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>res <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> res <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>typeofres <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> res
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> target
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="原型继承-继承模式" tabindex="-1"><a class="header-anchor" href="#原型继承-继承模式"><span>原型继承（继承模式）</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 原型继承（继承模式）</span>
<span class="token number">1</span>. 原型链继承：
  - 在子函数中通过<span class="token variable"><span class="token variable">\`</span><span class="token assign-left variable">this.constructor</span><span class="token operator">=</span>子函数本身<span class="token variable">\`</span></span>来改变子函数的构造函数（为了防止构造函数指向父函数），然后把子函数原型指向父函数<span class="token variable"><span class="token variable">\`</span>子函数.prototype<span class="token operator">=</span>new 父函数<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>
  - 缺点：无法向父构造函数传参，因为prototype的原型共享会使得所有的子函数实例都会共享父函数实例的属性

<span class="token number">2</span>. 构造函数继承：
  -  在子函数中使用call<span class="token punctuation">(</span><span class="token punctuation">)</span>或apply<span class="token punctuation">(</span><span class="token punctuation">)</span>调用父函数的构造函数<span class="token variable"><span class="token variable">\`</span>父函数.call<span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token variable">\`</span></span>，使得父构造函数的this指向子函数并在子函数中自执行
  -  缺点：只能继承父构造函数的属性，无法实现构造函数复用，每个实例都有父构造函数的副本

<span class="token number">3</span>. 原型链+构造函数组合继承：
  - 在子函数中通过<span class="token variable"><span class="token variable">\`</span>子函数.prototype<span class="token operator">=</span>new 父函数<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>把子函数原型指向父函数，然后在子函数中使用<span class="token variable"><span class="token variable">\`</span>父函数.call<span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token variable">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="原型链继承-constructor-prototype" tabindex="-1"><a class="header-anchor" href="#原型链继承-constructor-prototype"><span>原型链继承（constructor + prototype）</span></a></h4><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">### 原型链继承</span>
- 实现：
    <span class="token number">1</span>. 子类原型必须设置指向自身：<span class="token variable"><span class="token variable">\`</span>Sub.constructor <span class="token operator">=</span> Sub<span class="token variable">\`</span></span>。
    <span class="token number">2</span>. 通过原型继承：<span class="token variable"><span class="token variable">\`</span>Sub.prototype <span class="token operator">=</span> new Supper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>。
    
- 关键：子类的原型必须为父类的一个实例对象
- 特点：可实现继承的属性：实例的构造函数的属性、父类构造函数的属性、父类原型的属性
		（注意：子类实例不会继承父类实例的属性）
- 缺点：
    <span class="token number">1</span>. 子类实例无法向父类构造函数传参
    <span class="token number">2</span>. 继承单一
    <span class="token number">3</span>. 所有的子类实例都会共享父类实例的属性
      （原型上的属性是共享的，一个实例修改了原型属性，另一个实例的原型属性也会被改变）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Supper</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">&#39;父类&#39;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">showName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token class-name">Supper</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">// 给构造函数添加原型属性</span>

<span class="token keyword">function</span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果子类原型的constructor不设置指向子类自身,其构造函数找的 new Supper() 时从顶层Object继承来的构造函数,会导致指向 Supper()</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>constructor <span class="token operator">=</span> Sub<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">&#39;子类&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token class-name">Sub</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Supper</span><span class="token punctuation">(</span><span class="token string">&#39;父&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 关键</span>
<span class="token keyword">let</span> sub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token string">&#39;子&#39;</span><span class="token punctuation">)</span>
sub<span class="token punctuation">.</span><span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sub <span class="token keyword">instanceof</span> <span class="token class-name">Supper</span><span class="token punctuation">)</span>  <span class="token comment">// true,实现继承</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="构造函数继承-call" tabindex="-1"><a class="header-anchor" href="#构造函数继承-call"><span>构造函数继承（call）</span></a></h4><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 借用构造函数继承 (没有真正实现继承)</span>
- 关键：在子类构造函数中通过<span class="token variable"><span class="token variable">\`</span>call<span class="token punctuation">(</span><span class="token punctuation">)</span>或apply<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>调用父类构造函数
			（把父类的构造函数的this指向子类，在子类函数中做了父类函数的自执行<span class="token punctuation">(</span>复制<span class="token punctuation">)</span>）
- 特点
  - 只继承父类构造函数的属性，没有继承父类原型的属性
  - 解决了原型链继承的缺点
  - 可以继承多个构造函数属性<span class="token punctuation">(</span>call多个父类<span class="token punctuation">)</span>
  - 在子实例中可向父实例传参
- 缺点
  <span class="token number">1</span>. 只能继承父类构造函数的属性
  <span class="token number">2</span>. 无法实现构造函数的复用<span class="token punctuation">(</span>每次都需要重新调用<span class="token punctuation">)</span>
  <span class="token number">3</span>. 每个新实例都有父类构造函数的副本<span class="token punctuation">(</span>臃肿<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">&#39;父类&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>  <span class="token comment">// 相当于: this.Person(name, age)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price
<span class="token punctuation">}</span>

<span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">14000</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span>	<span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="组合继承-call-prototype" tabindex="-1"><a class="header-anchor" href="#组合继承-call-prototype"><span>组合继承（call + prototype）</span></a></h4><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 组合继承(原型链继承+借用构造函数继承)</span>
- 关键
  <span class="token number">1</span>. 子类型的原型必须为父类型的一个实例对象
  <span class="token number">2</span>. 在子类构造函数中通过<span class="token variable"><span class="token variable">\`</span>call<span class="token punctuation">(</span><span class="token punctuation">)</span>或apply<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>调用父类构造函数
  
- 特点
  - 结合了两种模式的优点：可以继承父类原型上的属性，可以传参和复用
  - 每个新实例引入的构造函数属性是私有的
  
- 缺点：调用了两次父类构造函数<span class="token punctuation">(</span>耗内存<span class="token punctuation">)</span>，子类的构造函数会代替原型上的父类构造函数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Supper</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">&#39;父类&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token class-name">Supper</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">// 给构造函数添加原型属性</span>

<span class="token keyword">function</span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Supper</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Sub</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Supper</span><span class="token punctuation">(</span><span class="token string">&#39;父&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 关键</span>

<span class="token keyword">let</span> sub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token string">&#39;子&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sub<span class="token punctuation">,</span> sub <span class="token keyword">instanceof</span> <span class="token class-name">Supper</span><span class="token punctuation">)</span>
sub<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="原型式继承-函数包装-prototype" tabindex="-1"><a class="header-anchor" href="#原型式继承-函数包装-prototype"><span>原型式继承（函数包装 + prototype）</span></a></h4><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 原型式继承</span>
- 重点：用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了个可以随意增添属性的实例或对象。object.create<span class="token punctuation">(</span><span class="token punctuation">)</span>就是这个原理。
- 特点：类似于复制一个对象，用函数来包装
- 缺点：
	<span class="token number">1</span>、所有实例都会继承原型上的属性；
	<span class="token number">2</span>、无法实现复用（新实例属性都是后面添加的）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Supper</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">&#39;默认名字&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token class-name">Supper</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">// 给构造函数添加原型属性</span>

<span class="token keyword">function</span> <span class="token function">content</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> obj<span class="token punctuation">;</span> <span class="token comment">// 继承传入的参数</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回函数对象</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> sup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Supper</span><span class="token punctuation">(</span><span class="token string">&#39;willy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> sup1 <span class="token operator">=</span> <span class="token function">content</span><span class="token punctuation">(</span>sup<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sup1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="寄生式继承-包装原型式" tabindex="-1"><a class="header-anchor" href="#寄生式继承-包装原型式"><span>寄生式继承（包装原型式）</span></a></h4><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 寄生式继承</span>
- 重点：就是给原型式继承外面套了个壳子。
- 优点：没有创建自定义类型，因为只是套了个壳子返回对象（这个），这个函数顺理成章就成了创建的新对象
- 缺点：没用到原型，无法复用。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Supper</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">&#39;默认名字&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token class-name">Supper</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">// 给构造函数添加原型属性</span>

<span class="token keyword">function</span> <span class="token function">content</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> obj<span class="token punctuation">;</span> <span class="token comment">// 继承传入的参数</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回函数对象</span>
<span class="token punctuation">}</span>

<span class="token comment">// 在&#39;原型式继承&#39;的基础上套一个函数</span>
<span class="token keyword">function</span> <span class="token function">subObject</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> sub <span class="token operator">=</span> <span class="token function">content</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  sub<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;子类&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> sub<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> sup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Supper</span><span class="token punctuation">(</span><span class="token string">&#39;willy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> sup2 <span class="token operator">=</span> <span class="token function">subObject</span><span class="token punctuation">(</span>sup<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> subObject<span class="token punctuation">,</span> <span class="token keyword">typeof</span> sup2<span class="token punctuation">)</span>  <span class="token comment">// function object</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sup2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="寄生组合式继承-函数包装-原型链-call" tabindex="-1"><a class="header-anchor" href="#寄生组合式继承-函数包装-原型链-call"><span>寄生组合式继承（函数包装 + 原型链 + call）</span></a></h4><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 寄生组合式继承</span>
- 重点：修复了组合继承的问题
- 寄生：在函数内返回对象然后调用
- 组合：
	<span class="token number">1</span>、函数的原型等于另一个实例。
	<span class="token number">2</span>、在函数中用apply或者call引入另一个构造函数，可传参
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Supper</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">&#39;默认名字&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token class-name">Supper</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">// 给构造函数添加原型属性</span>

<span class="token keyword">function</span> <span class="token function">content</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> obj<span class="token punctuation">;</span> <span class="token comment">// 继承传入的参数</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回函数对象</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> con <span class="token operator">=</span> <span class="token function">content</span><span class="token punctuation">(</span><span class="token class-name">Supper</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Supper</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Sub</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> con<span class="token punctuation">;</span>  <span class="token comment">// 继承 con 实例</span>
con<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Sub<span class="token punctuation">;</span> <span class="token comment">// 一定要修复实例</span>

<span class="token keyword">let</span> sub1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token string">&#39;子&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sub1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="圣杯模式-临时函数-原型链" tabindex="-1"><a class="header-anchor" href="#圣杯模式-临时函数-原型链"><span>圣杯模式（临时函数 + 原型链）</span></a></h4><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 圣杯模式</span>
- 主要思想是利用一个临时函数作为中间层，以及在临时函数中使用原型链的方式实现继承。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> grailMode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Origin<span class="token punctuation">,</span> Target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">Temp</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>	<span class="token comment">// 临时构造函数</span>
    <span class="token class-name">Temp</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">Origin</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
    <span class="token class-name">Target</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Temp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 加个临时构造函数</span>
    <span class="token class-name">Target</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Target<span class="token punctuation">;</span> <span class="token comment">// 目标构造函数原型属性constructor指向 目标构造函数</span>
    <span class="token class-name">Target</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>ancestor <span class="token operator">=</span> Origin<span class="token punctuation">;</span> <span class="token comment">// target 的父</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Person</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">spell</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;i can spell!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> personA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> personB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 定制构造函数</span>
<span class="token keyword">const</span> <span class="token function-variable function">ChinaPerson</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token function">grailMode</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span> ChinaPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 解决方法/函数复用覆盖父类方法问题</span>
<span class="token class-name">ChinaPerson</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;你好&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> ChinaPersonA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChinaPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ChinaPersonA<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ChinaPersonA<span class="token punctuation">.</span><span class="token function">spell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
personA<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
personA<span class="token punctuation">.</span><span class="token function">spell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="运算符扩展" tabindex="-1"><a class="header-anchor" href="#运算符扩展"><span>运算符扩展</span></a></h2><h3 id="解构赋值" tabindex="-1"><a class="header-anchor" href="#解构赋值"><span>解构赋值</span></a></h3><blockquote><ul><li>数组解构按照一一对应的关系从数组中提取值，然后将值赋值给变量</li><li>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于<code>undefined</code>和<code>null</code>无法转为对象，所以对它们进行解构赋值，都会报错。</li><li>作用：交换变量值、从函数返回多值、函数参数定义、提取JSON数据、函数默认值、遍历Map结构、暴露模块指定方法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* 数组 */</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span> <span class="token comment">// a=1, b=2, c=3, d=undefined</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> third<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span> <span class="token comment">// third为3</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>head<span class="token punctuation">,</span> <span class="token operator">...</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span> <span class="token comment">// tail为 2,3</span>

<span class="token comment">/* 对象 */</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;willy&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> myName<span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> myAge<span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>    <span class="token comment">//赋别名</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> myName<span class="token punctuation">,</span> age<span class="token punctuation">,</span> myAge<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// willy willy 20 20</span>

<span class="token comment">/* Set结构 */</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x为1</span>

<span class="token comment">/* Iterator接口数据 */</span>
<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">fibs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">yield</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> third<span class="token punctuation">,</span> fourth<span class="token punctuation">,</span> fifth<span class="token punctuation">,</span> sixth<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fibs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// sixth为5</span>

<span class="token comment">/* 字符串 */</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>  <span class="token comment">// c=&quot;l&quot;</span>

<span class="token comment">/* 数值和布尔值：数值和布尔值的包装对象都有toString对象，因此都能取值 */</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span><span class="token literal-property property">toString</span><span class="token operator">:</span> s<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
s <span class="token operator">===</span> <span class="token class-name">Number</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString <span class="token comment">// true</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span><span class="token literal-property property">toString</span><span class="token operator">:</span> s<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
s <span class="token operator">===</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString <span class="token comment">// true</span>

<span class="token keyword">let</span> <span class="token punctuation">{</span> <span class="token literal-property property">prop</span><span class="token operator">:</span> x <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// TypeError</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span> <span class="token literal-property property">prop</span><span class="token operator">:</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// TypeError</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用解构删除不必要属性" tabindex="-1"><a class="header-anchor" href="#使用解构删除不必要属性"><span>使用解构删除不必要属性</span></a></h4><ul><li>通过定义新的变量来接收那些不必要的属性，可使得不必要属性不存在剩余参数中（即所想取的值都在剩余参数中）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 通过定义 _internal, tooBig 接收此两个属性的值，这样使得剩余参数中不存在此两个属性 </span>
<span class="token keyword">let</span> <span class="token punctuation">{</span> _internal<span class="token punctuation">,</span> tooBig<span class="token punctuation">,</span> <span class="token operator">...</span>cleanObject <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">el1</span><span class="token operator">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">_internal</span><span class="token operator">:</span> <span class="token string">&quot;secret&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">tooBig</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">el2</span><span class="token operator">:</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">el3</span><span class="token operator">:</span> <span class="token string">&#39;3&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cleanObject<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// {el1: &#39;1&#39;, el2: &#39;2&#39;, el3: &#39;3&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="函数参数中解构嵌套对象" tabindex="-1"><a class="header-anchor" href="#函数参数中解构嵌套对象"><span>函数参数中解构嵌套对象</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> car <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token string">&#39;bmw 2018&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">engine</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">v6</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">vin</span><span class="token operator">:</span> <span class="token number">12345</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 通过结构只获取 car 中 model 属性和 engine 的 vin 属性</span>
<span class="token keyword">const</span> <span class="token function-variable function">modelAndVIN</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> model<span class="token punctuation">,</span> <span class="token literal-property property">engine</span><span class="token operator">:</span> <span class="token punctuation">{</span> vin <span class="token punctuation">}</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">model: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>model<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> vin: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>vin<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">modelAndVIN</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// =&gt; model: bmw 2018  vin: 12345</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="连续解构赋值" tabindex="-1"><a class="header-anchor" href="#连续解构赋值"><span>连续解构赋值</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">p</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token string">&#39;World&#39;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span> p<span class="token punctuation">,</span> <span class="token literal-property property">p</span><span class="token operator">:</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> <span class="token punctuation">{</span> y <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>
x <span class="token comment">// &quot;Hello&quot;</span>
y <span class="token comment">// &quot;World&quot;</span>
p <span class="token comment">// [&quot;Hello&quot;, {y: &quot;World&quot;}]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="值互换" tabindex="-1"><a class="header-anchor" href="#值互换"><span>值互换</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>y<span class="token punctuation">,</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数和属性增强写法" tabindex="-1"><a class="header-anchor" href="#函数和属性增强写法"><span>函数和属性增强写法</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;Kobe&#39;</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>
<span class="token comment">//ES5</span>
<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> age<span class="token punctuation">,</span>
  <span class="token function-variable function">run</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function-variable function">eat</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//ES6</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="可变参数-arguments" tabindex="-1"><a class="header-anchor" href="#可变参数-arguments"><span>可变参数 arguments</span></a></h3><ul><li><p>虽然arguments对象并不是一个数组而是一个伪数组，但是访问单个参数的方式与访问数组元素的方式相同.</p></li><li><p>在js中无需明确指出参数名，就能访问它们；存放所有的参数</p></li><li><p>引用属性 arguments.length检测函数的参数个数</p></li><li><p>用 arguments 对象判断传递给函数的参数个数，即可模拟函数重载</p></li><li><blockquote><p>注意：箭头函数无法调用arguments</p></blockquote></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">doAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">doAdd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//输出 &quot;15&quot;</span>
<span class="token function">doAdd</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//输出 &quot;60&quot;</span>

<span class="token keyword">function</span> <span class="token function">doConcat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    s <span class="token operator">+=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">doConcat</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//输出name age</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="剩余-rest-参数" tabindex="-1"><a class="header-anchor" href="#剩余-rest-参数"><span>剩余(<code>rest</code>)参数</span></a></h3><p>剩余参数语法允许将一个不定数量的参数表示为一个数组。</p><blockquote><p>注意：剩余参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//剩余参数（不定长可变参）</span>
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">...</span>num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//可以给多个参数到sum函数里面</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 2, 3, 4, 5, 6, 7, 8, 9</span>
<span class="token punctuation">}</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="剩余参数和-arguments对象的区别" tabindex="-1"><a class="header-anchor" href="#剩余参数和-arguments对象的区别"><span>剩余参数和 <code>arguments</code>对象的区别</span></a></h4><ul><li>剩余参数只包含那些没有对应形参的实参，而 arguments 对象包含了传给函数的所有实参。</li><li><code>arguments</code>对象不是一个真正的数组，而剩余参数是真正的<code> Array</code>实例，也就是说你能够在它上面直接使用所有的数组方法，比如 <code>sort、map、forEach或pop</code>。</li><li><code>arguments</code>对象还有一些附加的属性 （如callee属性：返回当前函数的引用(匿名函数可以使用该属性实现递归调用)）。</li></ul><h4 id="剩余参数与解构配合" tabindex="-1"><a class="header-anchor" href="#剩余参数与解构配合"><span>剩余参数与解构配合</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>s1<span class="token punctuation">,</span> <span class="token operator">...</span>s2<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//[ &#39;b&#39;, &#39;c&#39; ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="扩展运算符" tabindex="-1"><a class="header-anchor" href="#扩展运算符"><span>扩展运算符<code>...</code></span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 扩展运算符 ...</span>
用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中
    <span class="token number">1</span>. 复制数组 <span class="token variable"><span class="token variable">\`</span>const a2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">..</span>.a1<span class="token punctuation">]</span><span class="token variable">\`</span></span>
    <span class="token number">2</span>. 合并数组 <span class="token variable"><span class="token variable">\`</span><span class="token punctuation">[</span><span class="token punctuation">..</span>.arr1, <span class="token punctuation">..</span>.arr2, <span class="token punctuation">..</span>.arr3<span class="token punctuation">]</span><span class="token variable">\`</span></span>
    <span class="token number">3</span>. 与解构赋值结合<span class="token variable"><span class="token variable">\`</span>const <span class="token punctuation">[</span>first, <span class="token punctuation">..</span>.rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span>, <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> //<span class="token punctuation">..</span>.rest:2,3,4,5<span class="token variable">\`</span></span>

注意0：如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错
注意1：任何定义了遍历器<span class="token punctuation">(</span>Iterator<span class="token punctuation">)</span>接口的对象，都可以用扩展运算符转为真正的数组。
注意2: 扩展运算符取出的数据只是浅拷贝，当其属性值为复杂数据类型时，被扩展对象与扩展对象两者共用内存空间。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//1. 合并、复制数组</span>
<span class="token keyword">let</span> ary1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ary2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> ary3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>ary1<span class="token punctuation">,</span> <span class="token operator">...</span>ary2<span class="token punctuation">]</span><span class="token punctuation">;</span>	<span class="token comment">//等价于 let ary3 = ary1.push(...ary2);</span>
<span class="token keyword">let</span> ary4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>ary1<span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ary3<span class="token punctuation">,</span> ary4<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//2. 遍历、拷贝数组</span>
<span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> baz <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>bar <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 az = Object.assign({}, bar);</span>

<span class="token comment">//将数组转换为参数数列</span>
<span class="token keyword">function</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 42</span>

<span class="token comment">//将伪数组(字符串)转为真正的数组</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">&#39;=&gt;&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">/* 将元素组织成对象 */</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">,</span> rest<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// {b: 2, c: 3}  2</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>a<span class="token punctuation">,</span> <span class="token operator">...</span>obj<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出 {b: 2, c: 3}</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* 将对象扩展为元素 */</span>
<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newObj <span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">...</span>obj1<span class="token punctuation">,</span> <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// {a: 1, b: 2, c: 3, d: 4}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="模板字符串" tabindex="-1"><a class="header-anchor" href="#模板字符串"><span>模板字符串</span></a></h3><blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//模板字符串解析变量</span>
<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">willy</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">//模板字符串换行</span>
<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;willy&#39;</span><span class="token punctuation">,</span>
<span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>
<span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&#39;男&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span> <span class="token comment">//在模板字符串调用函数</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--&gt;name:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>obj<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,age:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>obj<span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,sex:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>obj<span class="token punctuation">.</span>sex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> start <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;willy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//头部是否为willy</span>
<span class="token keyword">let</span> end <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;willy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//尾部是否为willy</span>
<span class="token keyword">let</span> strCpoy <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//重复一次</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> strCpoy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//true true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="空值合并运算符" tabindex="-1"><a class="header-anchor" href="#空值合并运算符"><span>空值合并运算符<code>??</code></span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 空值合并运算符 ??</span>
- 在读取对象属性时，若某个属性值为<span class="token variable"><span class="token variable">\`</span>null 或 undefined<span class="token variable">\`</span></span>，有时需要为它们指定默认值。常见做法是通过<span class="token variable"><span class="token variable">\`</span><span class="token operator">||</span><span class="token variable">\`</span></span>运算符指定默认值。

- <span class="token variable"><span class="token variable">\`</span><span class="token operator">||</span><span class="token variable">\`</span></span>运算符不仅在属性值为<span class="token variable"><span class="token variable">\`</span>undefined<span class="token variable">\`</span></span>和<span class="token variable"><span class="token variable">\`</span>null<span class="token variable">\`</span></span>时生效，在属性值为空字符串或<span class="token variable"><span class="token variable">\`</span><span class="token boolean">false</span><span class="token variable">\`</span></span>或<span class="token variable"><span class="token variable">\`</span><span class="token number">0</span><span class="token variable">\`</span></span>时也会生效。

- Null判断运算符<span class="token variable"><span class="token variable">\`</span>??<span class="token variable">\`</span></span>只有运算符左侧值为<span class="token variable"><span class="token variable">\`</span>null<span class="token variable">\`</span></span>或<span class="token variable"><span class="token variable">\`</span>undefined<span class="token variable">\`</span></span>时才会返回右侧的值（即只关心左侧的值是否为 <span class="token variable"><span class="token variable">\`</span>null<span class="token variable">\`</span></span> 或 <span class="token variable"><span class="token variable">\`</span>undefined<span class="token variable">\`</span></span>，而不在乎是否为虚值）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">settings</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">headerText</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> headerText <span class="token operator">=</span> response<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>headerText <span class="token operator">||</span> <span class="token string">&#39;default Text&#39;</span>
<span class="token keyword">const</span> headerText1 <span class="token operator">=</span> response<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>headerText <span class="token operator">??</span> <span class="token string">&quot;default Text1&quot;</span>


<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">nullValue</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span>
  <span class="token literal-property property">animationDuration</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">headerText</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">showSplashScreen</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>undefinedValue <span class="token operator">??</span> <span class="token string">&#39;some other default&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;some other default&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>nullValue <span class="token operator">??</span> <span class="token string">&#39;some other default&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;some other default&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>headerText <span class="token operator">??</span> <span class="token string">&#39;Hello, world!&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>animationDuration <span class="token operator">??</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>showSplashScreen <span class="token operator">??</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="可选链判断运算符" tabindex="-1"><a class="header-anchor" href="#可选链判断运算符"><span>可选链判断运算符<code>?.</code></span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 可选链判断运算符 ?.</span>
- 当需要读取对象的深层次属性时，往往需要判断属性的上一层对象是否存在
- 可选链操作符<span class="token variable"><span class="token variable">\`</span> ?.<span class="token variable">\`</span></span> 允许读取位于连接对象链深处的属性的值，而不必明确验证链中的每个引用是否有效。
- <span class="token variable"><span class="token variable">\`</span>?.<span class="token variable">\`</span></span>与<span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">.</span><span class="token variable">\`</span></span>的区别在于，在引用为null 或 undefined 的情况下不会引起错误，而是使得该表达式短路并返回<span class="token variable"><span class="token variable">\`</span>undefined<span class="token variable">\`</span></span>


<span class="token comment">### 可选链 ?. 用法</span>
a?.x		// 等同于 	a <span class="token operator">==</span> null ? undefined <span class="token builtin class-name">:</span> a.x
a?.<span class="token punctuation">[</span>x<span class="token punctuation">]</span>	// 等同于	a <span class="token operator">==</span> null ? undefined <span class="token builtin class-name">:</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span>
a?.b<span class="token punctuation">(</span><span class="token punctuation">)</span>	// 等同于	a <span class="token operator">==</span> null ? undefined <span class="token builtin class-name">:</span> a.b<span class="token punctuation">(</span><span class="token punctuation">)</span>
a?.<span class="token punctuation">(</span><span class="token punctuation">)</span>		// 等同于	a <span class="token operator">==</span> null ? undefined <span class="token builtin class-name">:</span> a<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment">### 可选链的替代方案：&amp;&amp;</span>
- 缺点：
		- 语法冗长
		- 如果失败，<span class="token variable"><span class="token variable">\`</span><span class="token operator">&amp;&amp;</span><span class="token variable">\`</span></span> 返回其左侧，而 <span class="token variable"><span class="token variable">\`</span>?.<span class="token variable">\`</span></span> 始终返回 undefined
		- <span class="token variable"><span class="token variable">\`</span><span class="token operator">&amp;&amp;</span><span class="token variable">\`</span></span> 对所有的虚值的左侧都失败，而 <span class="token variable"><span class="token variable">\`</span>?.<span class="token variable">\`</span></span> 只对 undefined 和 null 失败。
- 案例：<span class="token variable"><span class="token variable">\`</span>user <span class="token operator">&amp;&amp;</span> user.address <span class="token operator">&amp;&amp;</span> user.address.street // undefined<span class="token variable">\`</span></span>



<span class="token comment">### 可选链的替代方案：解构赋值</span>
- 缺点：使用解构来处理链式属性的访问，这会不美观。
    const <span class="token punctuation">{</span> address: <span class="token punctuation">{</span> street <span class="token operator">=</span> undefined <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> user
    street // undefined
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 错误的写法（如果body属性 或 user属性不存在，则会报错）</span>
<span class="token keyword">const</span>  firstName <span class="token operator">=</span> message<span class="token punctuation">.</span>body<span class="token punctuation">.</span>user<span class="token punctuation">.</span>firstName <span class="token operator">||</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 正确的写法（可选链的替代方案 &amp;&amp;）</span>
<span class="token keyword">const</span> firstName <span class="token operator">=</span> <span class="token punctuation">(</span>
  message
  <span class="token operator">&amp;&amp;</span> message<span class="token punctuation">.</span>body
  <span class="token operator">&amp;&amp;</span> message<span class="token punctuation">.</span>body<span class="token punctuation">.</span>user
  <span class="token operator">&amp;&amp;</span> message<span class="token punctuation">.</span>body<span class="token punctuation">.</span>user<span class="token punctuation">.</span>firstName
<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">;</span>


<span class="token comment">/* 引入可选链 ?. 的优化写法 */</span>
<span class="token keyword">const</span>  firstName <span class="token operator">=</span> message<span class="token punctuation">.</span>body<span class="token punctuation">.</span>user<span class="token punctuation">.</span>firstName <span class="token operator">||</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="逻辑赋值运算符" tabindex="-1"><a class="header-anchor" href="#逻辑赋值运算符"><span>逻辑赋值运算符</span></a></h3><blockquote><ul><li>这三个二元运算符<code>||=</code>、<code>&amp;&amp;=</code>、<code>??=</code>相当于先进行逻辑运算，然后根据运算结果，再视情况进行赋值运算。</li><li>它们的一个用途是，为变量或属性设置默认值。</li></ul><table><thead><tr><th>赋值运算符</th><th>相当于</th><th>仅当 a 是</th><th></th></tr></thead><tbody><tr><td>\`a</td><td></td><td>= b\`</td><td>\`a</td></tr><tr><td><code>a &amp;&amp;= b</code></td><td><code>a &amp;&amp; (a = b)</code></td><td><code>true</code></td><td>如果左侧为<code>true</code>，则评估右侧表达式并将其分配给左侧的变量</td></tr><tr><td><code>a ??= b</code></td><td><code>a ?? (a = b)</code></td><td><code>null</code></td><td>如果左侧值为 <code>null</code> 或 <code>undefined</code>，则评估右侧表达式并将其分配给左侧的变量</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/** 或赋值运算符 */</span>
x <span class="token operator">||=</span> y		<span class="token comment">// 等同于	x || (x = y)</span>
user<span class="token punctuation">.</span>id <span class="token operator">||=</span> <span class="token number">1</span>	<span class="token comment">// 等同于 user.id = user.id || 1</span>


<span class="token doc-comment comment">/** 与赋值运算符 */</span>
x <span class="token operator">&amp;&amp;=</span> y		<span class="token comment">// 等同于	x &amp;&amp; (x = y)</span>


<span class="token doc-comment comment">/** Null 赋值运算符 */</span>
x <span class="token operator">??=</span> y		<span class="token comment">// 等同于	x ?? (x = y)</span>
opts<span class="token punctuation">.</span>foo <span class="token operator">??=</span> <span class="token string">&#39;bar&#39;</span>	<span class="token comment">// 等同于 opts.foo = opts.foo ?? &#39;bar&#39;; 或 opts.foo ?? (opts.foo = &#39;bar&#39;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="代码复用object-key" tabindex="-1"><a class="header-anchor" href="#代码复用object-key"><span>代码复用<code>Object[key]</code></span></a></h3><blockquote><ul><li>把<code>Object.key</code>写成<code>Object[key]</code>，这种做法构成了编写可重用代码的基础，如element UI的表单验证。可用作封装通用的表单验证函数。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// object validation rules</span>
<span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">first</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">last</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// universal validation function</span>
<span class="token keyword">const</span> <span class="token function-variable function">validate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">schema<span class="token punctuation">,</span> values</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>field <span class="token keyword">in</span> schema<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>schema<span class="token punctuation">[</span>field<span class="token punctuation">]</span><span class="token punctuation">.</span>required<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>values<span class="token punctuation">[</span>field<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">validate</span><span class="token punctuation">(</span>schema<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">first</span><span class="token operator">:</span> <span class="token string">&#39;Bruce&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">validate</span><span class="token punctuation">(</span>schema<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">first</span><span class="token operator">:</span> <span class="token string">&#39;Bruce&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">last</span><span class="token operator">:</span> <span class="token string">&#39;Wayne&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="幂运算符-和" tabindex="-1"><a class="header-anchor" href="#幂运算符-和"><span>幂运算符（<code>**</code> 和 <code>**=</code>）</span></a></h3><blockquote><ul><li>ES7 中引入了<strong>幂运算符（Exponentiation operator）<code>**</code></strong><code>，</code>**<code>具有与</code>Math.pow(..)<code> 等效的计算结果。例如：</code>a ** b<code>是</code>Math.pow(a, b)<code> 的简写，</code>a **= b<code>是</code>a = a ** b\` 的简写</li><li>幂赋值运算符使一个变量为底数、以右值为指数的指数运算（乘方）结果赋给该变量。</li><li>幂运算符<code>**</code>的特点是右结合，多个指数运算符连用时，是从最右边开始计算的</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span>	<span class="token comment">// 8</span>
Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>	<span class="token comment">// 8</span>

<span class="token number">4</span> <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token comment">// 相当于 4 ** (3 ** 2) = 262144</span>

<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>	
b <span class="token operator">**=</span> <span class="token number">3</span>	<span class="token comment">// 等同 b = b * b * b;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="数值-number" tabindex="-1"><a class="header-anchor" href="#数值-number"><span>数值 Number</span></a></h2><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 数值 Number</span>
- 二进制需要添加前缀<span class="token variable"><span class="token variable">\`</span>0b<span class="token variable">\`</span></span>，八进制需要添加前缀<span class="token variable"><span class="token variable">\`</span>0o<span class="token variable">\`</span></span>
- 数值可使用下划线<span class="token variable"><span class="token variable">\`</span>_<span class="token variable">\`</span></span>作为分隔符：<span class="token variable"><span class="token variable">\`</span>1_0000_00_000 <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">10</span>**12<span class="token punctuation">;</span>   <span class="token number">0</span>.000_001 <span class="token operator">==</span><span class="token operator">=</span> 1e10_000<span class="token variable">\`</span></span>（数值分隔符没有指定间隔位数，小数点及指数e前后不能有分隔符，两个分隔符不能相连）



<span class="token comment">### 实例方法</span>
- ES6将全局方法<span class="token variable"><span class="token variable">\`</span>parseInt<span class="token punctuation">(</span><span class="token punctuation">)</span> 和 parseFloat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>移植到<span class="token variable"><span class="token variable">\`</span>Number<span class="token variable">\`</span></span>对象上，<span class="token variable"><span class="token variable">\`</span>Number.parseInt<span class="token punctuation">(</span><span class="token number">12.34</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>
- <span class="token variable"><span class="token variable">\`</span>Number.isFinite<span class="token punctuation">(</span>Num<span class="token punctuation">)</span><span class="token variable">\`</span></span>：检查数字是否为有限的，即不是<span class="token variable"><span class="token variable">\`</span>Infinity<span class="token variable">\`</span></span>则为<span class="token variable"><span class="token variable">\`</span><span class="token boolean">true</span><span class="token variable">\`</span></span>（若参数类型不是数值则一律为false）
- <span class="token variable"><span class="token variable">\`</span>Number.isNaN<span class="token punctuation">(</span>Num<span class="token punctuation">)</span><span class="token variable">\`</span></span>：检查一个值是否为<span class="token variable"><span class="token variable">\`</span>NaN<span class="token variable">\`</span></span>，非<span class="token variable"><span class="token variable">\`</span>NaN<span class="token variable">\`</span></span>则为false
- <span class="token variable"><span class="token variable">\`</span>Numer.isInteger<span class="token punctuation">(</span>Num<span class="token punctuation">)</span><span class="token variable">\`</span></span>：判断一个数值是否为整数
- <span class="token variable"><span class="token variable">\`</span>Number.MAX_SAFE_INTEGER<span class="token variable">\`</span></span> 和 <span class="token variable"><span class="token variable">\`</span>Number.MIN_SAFE_INTEGER<span class="token variable">\`</span></span> 表示安全整数的上下限，JS能准确表达整数范围在 <span class="token variable"><span class="token variable">\`</span>-2^53<span class="token variable">\`</span></span> 到 <span class="token variable"><span class="token variable">\`</span><span class="token number">2</span>^53<span class="token variable">\`</span></span> 之间的数
- <span class="token variable"><span class="token variable">\`</span>Number.isSafeInteger<span class="token punctuation">(</span>Num<span class="token punctuation">)</span><span class="token variable">\`</span></span> 则是用来判断一个整数是否落在安全整数范围之内

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="特殊的数字类型" tabindex="-1"><a class="header-anchor" href="#特殊的数字类型"><span>特殊的数字类型</span></a></h3><blockquote><ul><li>包括浮点数和整数。特殊的数字类型有：<code>NaN、Infinity</code></li><li>NaN <ul><li>NaN(Not a Number)，表示不是数字，但它其实是一个特殊数字。</li><li>当运算操作符错误时，一般会得到NaN</li><li>NaN具有传染性，即NaN参与任何运算，结果都为NaN</li><li>NaN与任何值都不相等</li></ul></li><li>Infinity <ul><li>表示数据超过了JS可表示的范围，是一个特殊的数字</li><li>与其他数据类型进行操作运算时，结果还是Infinity</li><li>任何数字除以0得到Infinity</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* inNaN() 与 isFinite() 函数 */</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token comment">// 判断一个数是否为NaN的唯一方式</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="安全数" tabindex="-1"><a class="header-anchor" href="#安全数"><span>安全数</span></a></h3><blockquote><ul><li><code>2^53</code>是js内置的最大整数值(不安全)，<code>2^53+1</code>是会被摄入成<code>2^53</code></li><li><strong>Number.MAX_SAFE_INTEGER</strong>是js里整数的安全的最大值，由于js用的IEEE 754双精度浮点，可以安全地表示<code>[-2^53+1, 2^53-1]</code>这个范围，比这更大的表示 <strong>Infinity</strong>，与之相对的是 <strong>Number.MIN_VALUE</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">)</span> <span class="token operator">===</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><h3 id="bigint-大整数" tabindex="-1"><a class="header-anchor" href="#bigint-大整数"><span>BigInt 大整数</span></a></h3><blockquote><ul><li><code>BigInt</code> 一种用于大整数运算的新原始数据类型，表示大于 2⁵³ 的数字。后缀为 <code>n</code>。</li><li><code>BigInt(value)</code> 只用来表示整数，没有位数的限制，任何位数的整数都可以精确表示。</li><li>BigInt 和 Number 不是严格相等的，但是宽松相等。</li><li>可以通过typeof操作符来判断变量是否为BigInt类型（返回字符串&quot;bigint&quot;）</li><li>可以通过<code>Object.prototype.toString</code>方法来判断变量是否为BigInt类型（返回字符串&quot;[object BigInt]&quot;）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* BigInt类型 */</span>
<span class="token keyword">let</span> max1 <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token punctuation">;</span>    <span class="token comment">// 最大安全整数</span>
<span class="token keyword">let</span> max11 <span class="token operator">=</span> max1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> max12 <span class="token operator">=</span> max1 <span class="token operator">+</span> <span class="token number">2</span>
max11 <span class="token operator">===</span> max12   <span class="token comment">// true</span>

<span class="token keyword">let</span> max2 <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> max21 <span class="token operator">=</span> max2 <span class="token operator">+</span> <span class="token number">1n</span><span class="token punctuation">,</span> max22 <span class="token operator">=</span> max2 <span class="token operator">+</span> <span class="token number">2n</span>
max21 <span class="token operator">===</span> max22   <span class="token comment">// false</span>


<span class="token comment">// 判断是否为 BigInt 类型</span>
<span class="token keyword">typeof</span> <span class="token number">1n</span> <span class="token operator">===</span> <span class="token string">&#39;bigint&#39;</span><span class="token punctuation">;</span> <span class="token comment">// true </span>
<span class="token keyword">typeof</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;bigint&#39;</span><span class="token punctuation">;</span> <span class="token comment">// true </span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">1n</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object BigInt]&#39;</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token comment">// BigInt 与 Number 类型的对比</span>
<span class="token number">10n</span> <span class="token operator">===</span> <span class="token number">10</span> <span class="token comment">// false </span>
<span class="token number">10n</span> <span class="token operator">==</span> <span class="token number">10</span>  <span class="token comment">// true </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+m+`" alt="image-20210331160240361"></p></blockquote><h3 id="数字分隔符" tabindex="-1"><a class="header-anchor" href="#数字分隔符"><span>数字分隔符</span></a></h3><blockquote><ul><li>为了增加更大数字的可读性，从 ES2021 开始，我们可以在数字中使用下划线（<code>_</code>）作为分隔符。</li><li>数字分隔符可以在数字之间创建可视化分隔符，通过 _ 下划线来分割数字，使数字更具可读性，可以放在数字内的任何地方</li><li>该新特性也支持在八进制中使用</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> money <span class="token operator">=</span> <span class="token number">1_000_000_00_0</span>		<span class="token comment">// =&gt; 等价于 const money = 1000000000</span>
<span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">0o123_456</span>		<span class="token comment">// =&gt; 等价于 const num = 0o123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>数字组之间的视觉分离：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1_234_456_789.01</span><span class="token punctuation">)</span> <span class="token comment">// 1234456789.01</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1_000_000_000</span><span class="token punctuation">)</span> <span class="token comment">// 1000000000</span>

<span class="token keyword">const</span> fileSystemPermission <span class="token operator">=</span> <span class="token number">0b111_111_000</span> <span class="token comment">// 504</span>
<span class="token keyword">const</span> bytes <span class="token operator">=</span> <span class="token number">0b1111_10101011_11110000_00001101</span> <span class="token comment">// 262926349</span>
<span class="token keyword">const</span> words <span class="token operator">=</span> <span class="token number">0xa0_b0_c0</span> <span class="token comment">// 10531008</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还可以在分数和指数中使用分隔符：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token number">0.000_001</span> <span class="token comment">// 0.000001</span>
<span class="token number">1e10_000</span> <span class="token comment">// Infinity</span>

<span class="token keyword">const</span> massOfElectronInKg <span class="token operator">=</span> <span class="token number">9.109_383_56e-31</span> <span class="token comment">// 9.10938356e-31</span>
<span class="token keyword">const</span> trillionInShortScale <span class="token operator">=</span> <span class="token number">1e1_2</span> <span class="token comment">// 1000000000000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分隔符的位置有两种限制：</p><ul><li>我们只能在两位数之间加下划线。因此，以下所有数字都是非法的：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>3_<span class="token punctuation">.</span><span class="token number">141</span>
<span class="token number">3</span><span class="token punctuation">.</span>_141

1_e12
1e_12

_1464301
1464301_

0_b111111000
0b_111111000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>我们不能连续使用多个下划线：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>123__456 <span class="token comment">// 不允许</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这些限制背后的动机是保持解析简单并避免奇怪的边缘情况。</p><p>以下解析数字的函数不支持分隔符：</p><ul><li><code>Number()</code></li><li><code>parseInt()</code></li><li><code>parseFloat()</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;123_456&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;123_456&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 123</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;123_456.123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>理由是数字分隔符用于代码。其他类型的输入应该以不同的方式处理。</p><h4 id="下划线-作为-bigint-文本中的分隔符" tabindex="-1"><a class="header-anchor" href="#下划线-作为-bigint-文本中的分隔符"><span>下划线（<code>_</code>）作为 <code>bigint</code> 文本中的分隔符</span></a></h4><p><code>Bigint</code> 通常用于代表金融技术领域的货币。我们可以在 <code>bigint</code> 类型中使用下划线（<code>_</code>）作为分隔符：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> massOfEarthInKg <span class="token operator">=</span> <span class="token number">1_000_00n</span> <span class="token comment">// 100000n</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>与数字一样，有两个限制：</p><ul><li>我们只能在两位数之间加一个下划线。</li><li>我们最多可以连续使用一个下划线。</li></ul></blockquote><h3 id="位运算符-计算" tabindex="-1"><a class="header-anchor" href="#位运算符-计算"><span>位运算符/计算</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 位运算</span>
<span class="token number">1</span>. 按位与 <span class="token variable"><span class="token variable">\`</span><span class="token operator">&amp;</span><span class="token variable">\`</span></span>
<span class="token variable"><span class="token variable">\`</span><span class="token operator">&amp;</span><span class="token variable">\`</span></span> 以特定的方式组合操作二进制中对应的位，如果对应的位都为1，则结果为1，如果任意一个位是 <span class="token number">0</span> 则结果就是 <span class="token number">0</span>。


<span class="token number">2</span>. 按位或 <span class="token variable"><span class="token variable">\`</span><span class="token operator">|</span><span class="token variable">\`</span></span>
<span class="token variable"><span class="token variable">\`</span><span class="token operator">|</span><span class="token variable">\`</span></span> 运算符跟 <span class="token variable"><span class="token variable">\`</span><span class="token operator">&amp;</span><span class="token variable">\`</span></span> 的区别在于如果对应的位中任一操作数位1，则结果就是 <span class="token number">1</span>。
    

<span class="token number">3</span>. 按位异或 <span class="token variable"><span class="token variable">\`</span>^<span class="token variable">\`</span></span>
<span class="token variable"><span class="token variable">\`</span>^<span class="token variable">\`</span></span> 如果对应两个操作位有且仅有一个 <span class="token number">1</span> 时结果为 <span class="token number">1</span>，其他都是 <span class="token number">0</span>。


<span class="token number">4</span>. 按位非 <span class="token variable"><span class="token variable">\`</span>~<span class="token variable">\`</span></span>
<span class="token variable"><span class="token variable">\`</span>~<span class="token variable">\`</span></span> 运算符是对位取反，1 变 <span class="token number">0</span>，0 变 <span class="token number">1</span>。即是求二进制的反码。


<span class="token number">5</span>. 左移 <span class="token variable"><span class="token variable">\`</span><span class="token operator">&lt;&lt;</span><span class="token variable">\`</span></span>
<span class="token variable"><span class="token variable">\`</span><span class="token operator">&lt;&lt;</span><span class="token variable">\`</span></span> 运算符使指定值的二进制数所有位都左移指定次数，其移动规则：转化位二进制后，丢弃高位，低位补零。


<span class="token number">6</span>. 右移 <span class="token variable"><span class="token variable">\`</span><span class="token operator">&gt;&gt;</span><span class="token variable">\`</span></span>
<span class="token variable"><span class="token variable">\`</span><span class="token operator">&gt;&gt;</span><span class="token variable">\`</span></span> 操作符会将指定操作数的二进制位向右移动指定位数。向右被移出的位被丢弃，拷贝最左侧的位以填充左侧。由于新的最左侧的位总是和以前相同，符号位没有被改变。所以被称作“符号传播”。


<span class="token number">7</span>. 无符号右移 <span class="token variable"><span class="token variable">\`</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token variable">\`</span></span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>该操作符会将第一个操作数向右移动指定的位数。向右被移出的位被丢弃，左侧用0填充。因为符号位变成了 <span class="token number">0</span>，所以结果总是非负的。（即便右移 <span class="token number">0</span> 个比特，结果也是非负的。）
对于非负数，有符号右移和无符号右移总是返回相同的结果。例如， <span class="token number">9</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> 得到 <span class="token number">2</span> 和 <span class="token number">9</span> <span class="token operator">&gt;&gt;</span> <span class="token number">2</span> 相同。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span>
<span class="token comment">// 2的二进制表示为: 00000000 00000000 00000000 00000010</span>
<span class="token comment">// 3的二进制表示为: 00000000 00000000 00000000 00000011</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span>     <span class="token comment">// 1</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token number">3</span><span class="token punctuation">)</span>     <span class="token comment">// 3</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">^</span> <span class="token number">3</span><span class="token punctuation">)</span>		<span class="token comment">// 2</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">~</span> <span class="token number">1</span><span class="token punctuation">)</span>			<span class="token comment">// -2</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>		<span class="token comment">// 4</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>		<span class="token comment">// 0</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span>	<span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="判断奇偶性" tabindex="-1"><a class="header-anchor" href="#判断奇偶性"><span>判断奇偶性</span></a></h4><blockquote><ul><li>由于偶数的最低位为 0，奇数为 1，所以取模运算可以用位操作来代替。</li><li>0是一个特殊的偶数。对一个数字<code>num &amp; 1</code>可以判断奇偶数，负数同样使用</li><li>位运算：<code>偶数 &amp; 1 = 0，奇数 &amp; 1 = 1</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 奇数</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// 偶数 </span>
<span class="token punctuation">}</span>



<span class="token comment">// 位操作</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 奇数</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// 偶数</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="取整" tabindex="-1"><a class="header-anchor" href="#取整"><span>取整</span></a></h4><blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">~</span><span class="token operator">~</span><span class="token number">10.12</span> <span class="token comment">// 10</span>
<span class="token operator">~</span><span class="token operator">~</span><span class="token number">10</span> <span class="token comment">// 10</span>
<span class="token operator">~</span><span class="token operator">~</span><span class="token string">&#39;1.5&#39;</span> <span class="token comment">// 1</span>
<span class="token operator">~</span><span class="token operator">~</span><span class="token keyword">undefined</span> <span class="token comment">// 0</span>
<span class="token operator">~</span><span class="token operator">~</span><span class="token keyword">null</span> <span class="token comment">// 0</span>


<span class="token number">6.83</span> <span class="token operator">&gt;&gt;</span> <span class="token number">0</span>		<span class="token comment">// 6</span>
<span class="token number">6.83</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span>		<span class="token comment">// 6</span>
<span class="token number">6.83</span> <span class="token operator">|</span> <span class="token number">0</span>		<span class="token comment">// 6</span>
<span class="token operator">-</span><span class="token number">6.83</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">0</span>	<span class="token comment">// 6</span>
<span class="token operator">~</span><span class="token operator">~</span><span class="token number">6.83</span> 			<span class="token comment">// 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>对一个数字<code>num | 0</code>可以取整，负数同样使用</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1.3</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.9</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// -1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="值替换" tabindex="-1"><a class="header-anchor" href="#值替换"><span>值替换</span></a></h4><blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/** 使用解构来完成值替换 */</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [-2,12]</span>


<span class="token doc-comment comment">/** 使用 ^ 来完成值替换 */</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">5</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">8</span>
a <span class="token operator">^=</span> b
b <span class="token operator">^=</span> a
a <span class="token operator">^=</span> b
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token comment">// 8</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>   <span class="token comment">// 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="位掩码" tabindex="-1"><a class="header-anchor" href="#位掩码"><span>位掩码</span></a></h4><blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">4</span>
<span class="token keyword">const</span> options <span class="token operator">=</span> a <span class="token operator">|</span> b <span class="token operator">|</span> c
<span class="token comment">// 选项 b 是否在选项中</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="指数操作符" tabindex="-1"><a class="header-anchor" href="#指数操作符"><span>指数操作符</span></a></h4><blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1024</span>
<span class="token number">2</span><span class="token operator">**</span><span class="token number">10</span><span class="token punctuation">;</span>           <span class="token comment">// 1024</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="计算精度问题" tabindex="-1"><a class="header-anchor" href="#计算精度问题"><span>计算精度问题</span></a></h4><blockquote><ul><li>浮点数精度问题：浮点数值最高精度是17位小数，但进行算数计算时其精确度远不如整数。</li><li>所以可通过截取小数点前面的位数来当做真正的数字（<code>toFixed()</code>方法）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span>；	<span class="token comment">//结果为0.30000000000000004</span>
<span class="token keyword">const</span> mul <span class="token operator">=</span> <span class="token number">0.07</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">;</span>		<span class="token comment">//结果为7.000000000000001</span>

<span class="token comment">// 解决方案</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0.3</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="不同进制表示法" tabindex="-1"><a class="header-anchor" href="#不同进制表示法"><span>不同进制表示法</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token number">29</span>  <span class="token comment">// 10进制</span>
<span class="token number">035</span>  <span class="token comment">// 8进制29      原来的方式</span>
<span class="token number">0o35</span>  <span class="token comment">// 8进制29      ES6的方式</span>
<span class="token number">0x1d</span>  <span class="token comment">// 16进制29</span>
<span class="token number">0b11101</span>  <span class="token comment">// 2进制29</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="精确到指定位数的小数" tabindex="-1"><a class="header-anchor" href="#精确到指定位数的小数"><span>精确到指定位数的小数</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">round</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> decimals <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>n<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">e</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>decimals<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">e-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>decimals<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token function">round</span><span class="token punctuation">(</span><span class="token number">1.345</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// 1.35</span>
<span class="token function">round</span><span class="token punctuation">(</span><span class="token number">1.345</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// 1.3</span>

<span class="token number">1.345</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 1.35</span>
<span class="token number">1.345</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 1.3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="rgb值和16进制颜色值互转" tabindex="-1"><a class="header-anchor" href="#rgb值和16进制颜色值互转"><span>rgb值和16进制颜色值互转</span></a></h4><blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@hexoToRGB</span> 16进制颜色值转 RGB
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">hex</span> 16进制颜色字符串
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> RGB颜色字符
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">hexoToRGB</span> <span class="token punctuation">(</span><span class="token parameter">hex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> tranHex <span class="token operator">=</span> hex<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;0x&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> r <span class="token operator">=</span> tranHex <span class="token operator">&gt;&gt;</span> <span class="token number">16</span>
  <span class="token keyword">const</span> g <span class="token operator">=</span> tranHex <span class="token operator">&gt;&gt;</span> <span class="token number">8</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>
  <span class="token keyword">const</span> b <span class="token operator">=</span> tranHex <span class="token operator">&amp;</span> <span class="token number">0xff</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">rgb(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>r<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>g<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * @RGBToHex 16进制颜色值转 RGB
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">rgb</span> RGB颜色字符串
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> 16进制颜色字符串
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">RGBToHex</span> <span class="token punctuation">(</span><span class="token parameter">rgb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> rgbArr <span class="token operator">=</span> rgb<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^\\d]+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> color <span class="token operator">=</span> rgbArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span> <span class="token operator">|</span> rgbArr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span> <span class="token operator">|</span> rgbArr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>color<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="math-对象" tabindex="-1"><a class="header-anchor" href="#math-对象"><span>Math 对象</span></a></h3><blockquote><ul><li>Math对象不是构造函数，它具有数学常数和函数的属性和方法。跟数学相关的运算（求绝对值、取整、最大值等）可使用。</li><li>Math.PI()：圆周率</li><li>Math.abs(值)：绝对值</li><li>Math.floor(值)：向下取整</li><li>Math.ceil(值)：向上取整</li><li>Math.round(值)：四舍五入，注意-3.5 结果为-3</li><li>Math.max(值)：最大值</li><li>Math.min(值)：最小值</li><li>Math.random()：返回的是取值范围为<code>0 ~ 1</code> 的一个随机数</li><li><code>Math.trunc(Num)</code>：用于去除一个数的小数部分后返回整数部分，对于控制和无法截取整数的值返回<code>NaN</code></li><li><code>Math.sign</code>方法用来判断一个数到底是正数、负数、还是零。对于非数值会先将其转换为数值，可返回<code>+1、-1、0、-0、NaN</code></li></ul></blockquote><h4 id="获取选定区间的随机数" tabindex="-1"><a class="header-anchor" href="#获取选定区间的随机数"><span>获取选定区间的随机数</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@function</span> random 获取选定区间的随机数
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">min</span> 最小值
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">max</span> 最大值
 * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 * <span class="token keyword">@desc</span> 注意：此随机方法包括下限，但不包括上限。
 * <span class="token keyword">@eaample</span> random(10, 12) 将随机 10 或 11，但从不随机 12
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">random</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="date-对象" tabindex="-1"><a class="header-anchor" href="#date-对象"><span>Date 对象</span></a></h3><blockquote><ul><li>Date对象是构造函数，需实例化后才能使用，Date实例用来处理日期和时间</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 获取时间戳的三种方式</span>
new Date<span class="token punctuation">(</span><span class="token punctuation">)</span>.getTime<span class="token punctuation">(</span><span class="token punctuation">)</span>
+new Date
Date.now<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="date-prototype-tolocalestring-获取月份名称" tabindex="-1"><a class="header-anchor" href="#date-prototype-tolocalestring-获取月份名称"><span>Date.prototype.toLocaleString() 获取月份名称</span></a></h4><blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Wed May 05 2021 15:31:36 GMT+0800 (中国标准时间)</span>

<span class="token comment">// 使用 \`Date\` 对象的内置 getMonth 方法获取当前月份作为值</span>
<span class="token keyword">let</span> moonLanding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>moonLanding<span class="token punctuation">)</span> <span class="token comment">// 4</span>


<span class="token comment">// Date.prototype.toLocaleString()  返回该日期对象的字符串，该字符串格式因不同语言而不同</span>
<span class="token keyword">const</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">month</span><span class="token operator">:</span> <span class="token string">&#39;long&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;五月&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token string">&#39;en-GB&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">month</span><span class="token operator">:</span> <span class="token string">&#39;long&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;May&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token string">&#39;ko-KR&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">month</span><span class="token operator">:</span> <span class="token string">&#39;long&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;5월&quot;</span>


<span class="token comment">/* 自定义 Options */</span>
<span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">(</span><span class="token number">2012</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 请求参数 (options) 中包含参数星期 (weekday)，并且该参数的值为长类型 (long)</span>
<span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token literal-property property">weekday</span><span class="token operator">:</span> <span class="token string">&quot;long&quot;</span><span class="token punctuation">,</span> 
<span class="token literal-property property">year</span><span class="token operator">:</span> <span class="token string">&quot;numeric&quot;</span><span class="token punctuation">,</span> 
<span class="token literal-property property">month</span><span class="token operator">:</span> <span class="token string">&quot;long&quot;</span><span class="token punctuation">,</span> 
<span class="token literal-property property">day</span><span class="token operator">:</span> <span class="token string">&quot;numeric&quot;</span><span class="token punctuation">,</span>
<span class="token literal-property property">hour12</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token string">&quot;de-DE&quot;</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// &quot;Donnerstag, 20. Dezember 2012&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>自定义方法</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getMonthName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token keyword">const</span> month <span class="token operator">=</span> <span class="token punctuation">[</span>
<span class="token string">&#39;January&#39;</span><span class="token punctuation">,</span>
<span class="token string">&#39;February&#39;</span><span class="token punctuation">,</span>
<span class="token string">&#39;March&#39;</span><span class="token punctuation">,</span>
<span class="token string">&#39;April&#39;</span><span class="token punctuation">,</span>
<span class="token string">&#39;May&#39;</span><span class="token punctuation">,</span>
<span class="token string">&#39;June&#39;</span><span class="token punctuation">,</span>
<span class="token string">&#39;July&#39;</span><span class="token punctuation">,</span>
<span class="token string">&#39;August&#39;</span><span class="token punctuation">,</span>
<span class="token string">&#39;September&#39;</span><span class="token punctuation">,</span>
<span class="token string">&#39;October&#39;</span><span class="token punctuation">,</span>
<span class="token string">&#39;November&#39;</span><span class="token punctuation">,</span>
<span class="token string">&#39;December&#39;</span>
<span class="token punctuation">]</span>
<span class="token keyword">return</span> month<span class="token punctuation">[</span>val<span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> moonLanding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getMonthName</span><span class="token punctuation">(</span>moonLanding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;September&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="数值判定-isfinite-isnan" tabindex="-1"><a class="header-anchor" href="#数值判定-isfinite-isnan"><span>数值判定：isFinite() &amp; isNaN()</span></a></h3><blockquote><ul><li><code>Number.isFinite(value)</code>函数：用来检查一个数值是否为有限的（finite），即不是<code>Infinity</code>。</li><li>如果参数是一个数值则返回<code>true</code>，否则返回<code>false</code>（如<code>NaN</code>、null、undefined、正无穷大、负无穷大或字符串，则会返回false）</li><li><code>Number.isNaN()</code>用来检查一个值是否为<code>NaN</code>。如果参数类型不是<code>NaN</code>，<code>Number.isNaN</code>一律返回<code>false</code>。</li><li>它们与传统的全局方法<code>isFinite()</code>和<code>isNaN()</code>的区别在于，传统方法先调用<code>Number()</code>将非数值的值转为数值，再进行判断，而这两个新方法只对数值有效，<code>Number.isFinite()</code>对于非数值一律返回<code>false</code>, <code>Number.isNaN()</code>只有对于<code>NaN</code>才返回<code>true</code>，非<code>NaN</code>一律返回<code>false</code>。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token string">&#39;15&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>


Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;15&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token operator">/</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;true&#39;</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;true&#39;</span> <span class="token operator">/</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>


<span class="token doc-comment comment">/** 与 ES5 的方法对比 */</span>
<span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token string">&quot;25&quot;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token string">&quot;25&quot;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&quot;NaN&quot;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&quot;NaN&quot;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="字符串-string" tabindex="-1"><a class="header-anchor" href="#字符串-string"><span>字符串 String</span></a></h2><h3 id="查找字符串" tabindex="-1"><a class="header-anchor" href="#查找字符串"><span>查找字符串</span></a></h3><blockquote><h4 id="查找某子字符串的下标" tabindex="-1"><a class="header-anchor" href="#查找某子字符串的下标"><span>查找某子字符串的下标</span></a></h4><ul><li><code>indexOf(searchValue, startIndex?)</code>：返回某个子字符串值在字符串中首次出现的下标位置，若检索的子字符串值不存在则返回 -1</li><li><code>lastIndex(子字符串)</code>： 返回字符串当中子字符串最后一次出现的下标位置；若没有则返回-1</li></ul><h4 id="查找是否包含某子字符串" tabindex="-1"><a class="header-anchor" href="#查找是否包含某子字符串"><span>查找是否包含某子字符串</span></a></h4><ul><li><code>startsWith(value,start)</code>：检测字符串中是否以value开头，从start位置开始但不包括start，返回布尔值</li><li><code>endsWith(value,start)</code>：检测字符串中是否以value结尾，从start位置开始但不包括start，返回布尔值</li><li><code>includes(value,start) </code>：检测字符串中是否有value，从start位置但不包括start开始找，返回布尔值</li></ul><h4 id="查找指定下标所在位置" tabindex="-1"><a class="header-anchor" href="#查找指定下标所在位置"><span>查找指定下标所在位置</span></a></h4><ul><li><code>at(index)</code>：返回参数指定位置的字符，若参数位置超出字符串范围则返回undefined</li></ul><h4 id="正则检索字符串" tabindex="-1"><a class="header-anchor" href="#正则检索字符串"><span>正则检索字符串</span></a></h4><ul><li><code>search() </code>：用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串；若没有找到任何匹配的子串，则返回 -1</li><li><code>match() </code>：可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配</li><li><code>matchAll()</code>：返回一个正则表达式在当前字符串的所有匹配</li></ul></blockquote><h3 id="字符串补全长度-pad" tabindex="-1"><a class="header-anchor" href="#字符串补全长度-pad"><span>字符串补全长度 pad</span></a></h3><blockquote><ul><li><code>padStart(n, str)</code>用于头部补全，并以新字符串返回</li><li><code>padEnd(n, str)</code>用于尾部补全，并以新字符串返回</li><li>（第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串）</li><li>用途：常用于数值补全指定位数、提示字符串格式</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 限定长度数字，当数字位数不足时在前面用0补齐</span>
<span class="token string">&#39;12&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;0000000012&quot;</span>
<span class="token string">&#39;123456&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;0000123456&quot;</span>

<span class="token comment">// 提示字符串格式</span>
<span class="token string">&#39;12&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;YYYY-MM-DD&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;YYYY-MM-12&quot;</span>
<span class="token string">&#39;09-12&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;YYYY-MM-DD&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;YYYY-09-12&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="重复复制字符串-repeat" tabindex="-1"><a class="header-anchor" href="#重复复制字符串-repeat"><span>重复复制字符串：repeat</span></a></h3><blockquote><p><code>String.repeat(n)</code>：将原字符串重复n次（n若为小数会向下取整），并作为一个新字符串返回。</p></blockquote><h3 id="消除字符串空格-trim" tabindex="-1"><a class="header-anchor" href="#消除字符串空格-trim"><span>消除字符串空格：trim</span></a></h3><blockquote><ul><li><code>trim()</code>：两侧去空格，返回新字符串</li><li><code>trimStart()、trimLeft()</code>消除字符串头部的空格，返回新字符串</li><li><code>trimEnd()、trimRight()</code>消除尾部的空格，返回新字符串</li><li>注意：消除的是空格键、tab键、换行符等不可见的空白符号</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;  an dy   &#39;</span><span class="token punctuation">;</span>
str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>			<span class="token comment">// &quot;an dy&quot;</span>
str<span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>	<span class="token comment">// &quot;an dy  &quot; </span>
str<span class="token punctuation">.</span><span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>		<span class="token comment">// &quot;  an dy&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="字符串替换-replace" tabindex="-1"><a class="header-anchor" href="#字符串替换-replace"><span>字符串替换：replace</span></a></h3><blockquote><ul><li><code>replace(旧字符串，新字符串)</code>： 用新字符串替换旧字符串 <ul><li>replce(/旧字符串/ig,新字符串)：<code>i</code>表示不区分大小写，<code>g</code>表示全文搜索</li></ul></li><li><code>replaceAll(searchValue, replacement)</code>：全文所有符合规则的字符都会被替换，替换规则可以是字符串或正则表达式，返回一个新字符串 <ul><li>如果<code>searchValue</code>是一个不带有<code>g</code>修饰符的正则表达式，<code>replaceAll()</code>会报错，而<code>replace()</code>不会</li><li>replacement可使用一些特殊字符串 <ul><li><code>$&amp;</code>：匹配的字符串</li><li><code>$</code> \`：匹配结果前面的文本</li><li><code>$&#39;</code>：匹配结果后面的文本</li><li><code>$n</code>：匹配成功的第<code>n</code>组内容，<code>n</code>是从1开始的自然数。这个参数生效的前提是，第一个参数必须是正则表达式</li><li><code>$$</code>：指代美元符号<code>$</code></li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;aabbcc&#39;</span>
str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">b</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 不报错，aaddcc</span>
str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">b</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 报错</span>


<span class="token comment">/* replacement特殊字符串含义 */</span>
<span class="token comment">// $&amp; 表示匹配的字符串，即\`b\`本身</span>
<span class="token comment">// 所以返回结果与原字符串一致</span>
<span class="token string">&#39;abbc&#39;</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$&amp;&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// &#39;abbc&#39;</span>

<span class="token comment">// $\` 表示匹配结果之前的字符串</span>
<span class="token comment">// 对于第一个\`b\`，$\` 指代\`a\`</span>
<span class="token comment">// 对于第二个\`b\`，$\` 指代\`ab\`</span>
<span class="token string">&#39;abbc&#39;</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$\`&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// &#39;aaabc&#39;</span>

<span class="token comment">// $&#39; 表示匹配结果之后的字符串</span>
<span class="token comment">// 对于第一个\`b\`，$&#39; 指代\`bc\`</span>
<span class="token comment">// 对于第二个\`b\`，$&#39; 指代\`c\`</span>
<span class="token string">&#39;abbc&#39;</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">$&#39;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token comment">// &#39;abccc&#39;</span>

<span class="token comment">// $1 表示正则表达式的第一个组匹配，指代\`ab\`</span>
<span class="token comment">// $2 表示正则表达式的第二个组匹配，指代\`bc\`</span>
<span class="token string">&#39;abbc&#39;</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(ab)(bc)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$2$1&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// &#39;bcab&#39;</span>

<span class="token comment">// $$ 指代 $</span>
<span class="token string">&#39;abc&#39;</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$$&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// &#39;a$c&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="截取字符串-substring" tabindex="-1"><a class="header-anchor" href="#截取字符串-substring"><span>截取字符串 substring</span></a></h3><blockquote><ul><li><code>substr(start,length)</code>：将字符串从star位置开始截取到start位置，截取length个字符</li><li><code>substring(start,end) </code>： 将字符串从start位置开始截取到end位置，但不包括end；end可以省略，表示一直截取到结束</li><li><code>split(“分隔符”) </code>：将字符串转成数组，返回为一个新数组</li><li><code>slice(start, end?)</code>： 将字符串从start位置开始截取到end位置，但不包括end；</li></ul><h4 id="substr与substring的区别" tabindex="-1"><a class="header-anchor" href="#substr与substring的区别"><span><code>substr</code>与<code>substring</code>的区别</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
	* \`substr\` 第二个参数是子字符串的长度
	* \`substring\` 第二个参数是子字符串的结束位置
	*/</span> 
<span class="token string">&#39;hello world&#39;</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// &#39;ell&#39;</span>
<span class="token string">&#39;hello world&#39;</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// &#39;el&#39;</span>


<span class="token doc-comment comment">/**
	* \`substr\` 允许使用负数作为起始位置参数
	* \`substring\`会将子字符串将使负开始位置变为 0（零）
	*/</span> 
<span class="token string">&#39;hello world&#39;</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// &#39;ld&#39;</span>
<span class="token string">&#39;hello world&#39;</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// &#39;hello&#39;</span>
<span class="token string">&#39;hello world&#39;</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// &#39;hello&#39;</span>


<span class="token comment">// \`slice\` 是获取子字符串的另一个方法。它没有被弃用为 \`substr\`，并且支持负索引</span>
<span class="token string">&#39;hello world&#39;</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// &#39;ll&#39;</span>
<span class="token string">&#39;hello world&#39;</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// &#39;ello&#39;</span>
<span class="token string">&#39;hello world&#39;</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// &#39;world&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="子串字符访问-chatat-index-或-string-index" tabindex="-1"><a class="header-anchor" href="#子串字符访问-chatat-index-或-string-index"><span>子串字符访问 chatAt(index) 或 string[index]</span></a></h3><blockquote><p>有两种方法可以访问字符串的单个字符：</p><ul><li>使用 <code>charAt[index]</code> 方法</li><li>使用括号表示法，如 <code>&#39;hello&#39;[1]</code></li></ul><p>在这两种情况下，<code>&#39;hello&#39;[1]</code> 和 <code>&#39;hello&#39;.charAt(1)</code> 都将返回第二个字符 <code>e</code>。</p><h4 id="charat-i-与-string-i-的区别" tabindex="-1"><a class="header-anchor" href="#charat-i-与-string-i-的区别"><span>charAt(i) 与 string[i] 的区别</span></a></h4><ul><li>第二种方式是 ECMA5 的标准，在现代浏览器中受支持。在非常旧的浏览器（如 IE6、7）中不支持它。（我不认为我们仍然需要支持这些版本的 IE）。</li></ul><table><thead><tr><th>方法</th><th>索引的范围为 <code>0</code> 和 <code>string.length - 1</code></th><th>其他情况下</th></tr></thead><tbody><tr><td><code>string.charAt(index)</code></td><td>第一个和最后一个</td><td><code>&#39;&#39;</code></td></tr><tr><td><code>string[index]</code></td><td>第一个和最后一个</td><td><code>undefined</code></td></tr></tbody></table><p>如果不传递适当的索引（不是整数或超出范围），在某些边缘情况下我们将得到不同的结果。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">&#39;hello&#39;</span><span class="token punctuation">[</span><span class="token number">NaN</span><span class="token punctuation">]</span> <span class="token comment">// undefined</span>
<span class="token string">&#39;hello&#39;</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// &#39;h&#39;</span>

<span class="token string">&#39;hello&#39;</span><span class="token punctuation">[</span><span class="token keyword">undefined</span><span class="token punctuation">]</span> <span class="token comment">// undefined</span>
<span class="token string">&#39;hello&#39;</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// &#39;h&#39;</span>

<span class="token string">&#39;hello&#39;</span><span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">]</span> <span class="token comment">// undefined</span>
<span class="token string">&#39;hello&#39;</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// &#39;e&#39;</span>

<span class="token string">&#39;hello&#39;</span><span class="token punctuation">[</span><span class="token string">&#39;00&#39;</span><span class="token punctuation">]</span> <span class="token comment">// undefined</span>
<span class="token string">&#39;hello&#39;</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token string">&#39;00&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 返回 h，因为它将首先尝试将 00 转换为数字</span>

<span class="token string">&#39;hello&#39;</span><span class="token punctuation">[</span><span class="token number">1.5</span><span class="token punctuation">]</span> <span class="token comment">// undefined</span>
<span class="token string">&#39;hello&#39;</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1.23</span><span class="token punctuation">)</span> <span class="token comment">// 返回 e，因为它将 1.23 四舍五入到数字 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果索引超出可选范围：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">&#39;hello&#39;</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token comment">// undefined</span>
<span class="token string">&#39;hello&#39;</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// &#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="为什么-hello-charat-true-返回-e" tabindex="-1"><a class="header-anchor" href="#为什么-hello-charat-true-返回-e"><span>为什么 <code>&#39;hello&#39;.charAt(true)</code> 返回 <code>e</code>？</span></a></h4><p><code>charAt(index)</code> 方法首先尝试将索引转换为数字。由于 <code>Number(true) == 1</code>，<code>charAt(true)</code> 将返回一个索引位置的字符，即第二个字符。</p></blockquote><h3 id="转编码-encodeuricomponent" tabindex="-1"><a class="header-anchor" href="#转编码-encodeuricomponent"><span>转编码：encodeURIComponent()</span></a></h3><blockquote><ul><li>encodeURIComponent() 函数可把字符串作为 URI 组件进行编码。</li><li>该方法不会对 ASCII 字母和数字进行编码，也不会对这些 ASCII 标点符号进行编码： - _ . ! ~ * &#39; ( ) 。</li><li>其他字符（比如 ：;/?😡&amp;=+$,# 这些用于分隔 URI 组件的标点符号），都是由一个或多个十六进制的转义序列替换的。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">&quot;http://w3cschool.cc/my test.php?name=ståle&amp;car=saab&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// http%3A%2F%2Fw3cschool.cc%2Fmy%20test.php%3Fname%3Dst%C3%A5le%26car%3Dsaab</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="斜杠转义-string-raw" tabindex="-1"><a class="header-anchor" href="#斜杠转义-string-raw"><span>斜杠转义：String.raw()</span></a></h3><blockquote><ul><li><code>Sting.raw()</code>返回一个斜杠都被转义的字符串（即在斜杠前再加一个斜杠），常用于模板字符串的处理方法</li><li><code>String.raw()</code>本质上是一个正常的函数，只是专用于模板字符串的标签函数。若写成正常函数形式，其第一个参数为具有<code>raw</code>属性的对象，且<code>raw</code>属性值为数组；<code>raw</code>属性等同于模板字符串解析后得到的数组</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hi\\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>	<span class="token comment">// 换行输出3</span>
String<span class="token punctuation">.</span>raw<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hi\\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>	<span class="token comment">// 输出Hi\\n3</span>
String<span class="token punctuation">.</span>raw<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hi\\\\n</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">===</span> <span class="token string">&quot;Hi\\\\\\\\n&quot;</span>	<span class="token comment">// true</span>


<span class="token comment">/* 正常函数写法 */</span>
String<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">raw</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">foo</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">bar</span><span class="token template-punctuation string">\`</span></span>	<span class="token comment">// true</span>


<span class="token comment">/* String.raw()实现原理 */</span>
String<span class="token punctuation">.</span><span class="token function-variable function">raw</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> <span class="token operator">...</span>values</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> index<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> values<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    output <span class="token operator">+=</span> str<span class="token punctuation">.</span>raw<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> values<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  output <span class="token operator">+=</span> str<span class="token punctuation">.</span>raw<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> output<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="数组-array" tabindex="-1"><a class="header-anchor" href="#数组-array"><span>数组 Array</span></a></h2><h3 id="数组调用方法" tabindex="-1"><a class="header-anchor" href="#数组调用方法"><span>数组调用方法</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 数组内置方法</span>
<span class="token number">1</span>. push<span class="token punctuation">(</span><span class="token punctuation">)</span>：向数组的末尾添加一个或多个元素，并返回数组的新长度。
<span class="token number">2</span>. pop<span class="token punctuation">(</span><span class="token punctuation">)</span>：删除数组的最后一个元素并返回该元素。
<span class="token number">3</span>. unshift<span class="token punctuation">(</span><span class="token punctuation">)</span>：向数组的开头添加一个或多个元素，并返回数组的新长度。
<span class="token number">4</span>. shift<span class="token punctuation">(</span><span class="token punctuation">)</span>：删除数组开头的第一个元素，并返回该元素。
<span class="token number">5</span>. sort<span class="token punctuation">(</span><span class="token punctuation">)</span>：对数组元素进行排序，并返回数组。
<span class="token number">6</span>. join<span class="token punctuation">(</span><span class="token punctuation">)</span>：把数组的所有元素拼接成一个字符串并返回。
<span class="token number">7</span>. a.concat<span class="token punctuation">(</span>b<span class="token punctuation">)</span>：把b数组添加到a数组最后面。
<span class="token number">8</span>. slice<span class="token punctuation">(</span>start, end<span class="token punctuation">)</span>：截取起始位置到结束位置的部分数据<span class="token punctuation">(</span>返回新数组<span class="token punctuation">)</span>

<span class="token number">9</span>. splice<span class="token punctuation">(</span><span class="token punctuation">)</span>：会直接改变原来的数组
    - 在指定位置添加元素：结果变量 <span class="token operator">=</span> 数组变量.splice<span class="token punctuation">(</span>制定位置,0,新增元素<span class="token punctuation">..</span><span class="token punctuation">)</span><span class="token variable"><span class="token variable">\`</span>var b <span class="token operator">=</span> a.splice<span class="token punctuation">(</span><span class="token number">1,0</span>,<span class="token string">&quot;ABC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">\`</span></span>
    - 在指定位置删除元素：结果变量 <span class="token operator">=</span> 数组变量.splice<span class="token punctuation">(</span>指定位置,删除个数<span class="token punctuation">)</span><span class="token variable"><span class="token variable">\`</span>var b <span class="token operator">=</span> a.splice<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>
    - 在指定位置替换元素：结果变量 <span class="token operator">=</span> 数组变量.splice<span class="token punctuation">(</span>指定位置,删除个数,新增元素<span class="token punctuation">)</span><span class="token variable"><span class="token variable">\`</span>var b <span class="token operator">=</span> a.splice<span class="token punctuation">(</span><span class="token number">1,2</span>,<span class="token string">&#39;A&#39;</span>,&#39;D<span class="token punctuation">)</span><span class="token variable">\`</span></span>
    
    
<span class="token comment">### 数组内置方法的区别</span>
- 不改变原数组的方法：<span class="token variable"><span class="token variable">\`</span>concat、join、slice、map、forEach、filter、every、reduce、entries、find、JSON.parse<span class="token punctuation">(</span>JSON.stringify<span class="token punctuation">(</span>arr<span class="token punctuation">))</span><span class="token variable">\`</span></span>
- 改变原数组的方法：<span class="token variable"><span class="token variable">\`</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>、push<span class="token punctuation">(</span><span class="token punctuation">)</span>、reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>、unshift<span class="token punctuation">(</span><span class="token punctuation">)</span>、shift<span class="token punctuation">(</span><span class="token punctuation">)</span>、sort<span class="token punctuation">(</span><span class="token punctuation">)</span>、splice<span class="token punctuation">(</span><span class="token punctuation">)</span>、fill<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="类数组对象" tabindex="-1"><a class="header-anchor" href="#类数组对象"><span>类数组对象</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 类数组对象</span>
类数组特点
	<span class="token number">1</span>. 拥有 length 属性，其它属性<span class="token punctuation">(</span>索引<span class="token punctuation">)</span>为非负整数（对象中的索引会被当做字符串来处理）
	<span class="token number">2</span>. 类数组对象可以通过索引访问对象，但没有数组的内置方法，如 <span class="token variable"><span class="token variable">\`</span>push、forEach、indexOf<span class="token variable">\`</span></span> 等。

类数组是一个普通对象，而真实的数组是 Array 类型。
常见的类数组有：函数的参数 arguments、DOM 对象列表<span class="token punctuation">(</span>比如通过 document.querySelectorAll 得到的列表<span class="token punctuation">)</span>


类数组转换为数组的方法：
    <span class="token number">1</span>. <span class="token variable"><span class="token variable">\`</span>Array.prototype.slice.call<span class="token punctuation">(</span>arrayLike, start<span class="token punctuation">)</span><span class="token variable">\`</span></span>
    <span class="token number">2</span>. <span class="token variable"><span class="token variable">\`</span><span class="token punctuation">[</span><span class="token punctuation">..</span>.arrayLike<span class="token punctuation">]</span><span class="token variable">\`</span></span>
    <span class="token number">3</span>. <span class="token variable"><span class="token variable">\`</span>Array.from<span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span><span class="token variable">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 类数组</span>
<span class="token keyword">let</span> arrLike <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;0&quot;</span><span class="token operator">:</span> <span class="token string">&#39;willy&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;1&quot;</span><span class="token operator">:</span> <span class="token string">&#39;cilly&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;2&quot;</span><span class="token operator">:</span> <span class="token string">&#39;jance&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;length&quot;</span><span class="token operator">:</span> <span class="token number">3</span>
<span class="token punctuation">}</span>

<span class="token comment">// 同款数组</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;willy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cilly&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;jance&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="类数组转为数组array-from" tabindex="-1"><a class="header-anchor" href="#类数组转为数组array-from"><span>类数组转为数组Array.from()</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 类数组转换为数组 Array.from()</span>
Array.from 方法用于将两类对象转为真正的数组<span class="token punctuation">(</span>生成浅拷贝的数组实例<span class="token punctuation">)</span>：
	<span class="token number">1</span>. 类似数组的对象（array-like object）
	<span class="token number">2</span>. 可遍历（iterable）的对象。


- <span class="token variable"><span class="token variable">\`</span>Array.from<span class="token punctuation">(</span>arrayLike<span class="token punctuation">[</span>, mapFn<span class="token punctuation">[</span>, thisArg<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>
    - <span class="token variable"><span class="token variable">\`</span>arrayLike<span class="token variable">\`</span></span>：想要转换成数组的伪数组对象或可迭代对象。
    - <span class="token variable"><span class="token variable">\`</span>mapFn<span class="token variable">\`</span></span><span class="token punctuation">(</span>可选<span class="token punctuation">)</span>：如果指定了该参数，新数组中的每个元素会执行该回调函数。
    - <span class="token variable"><span class="token variable">\`</span>thisArg<span class="token variable">\`</span></span><span class="token punctuation">(</span>可选<span class="token punctuation">)</span>：可选参数，执行回调函数 <span class="token variable"><span class="token variable">\`</span>mapFn<span class="token variable">\`</span></span> 时 <span class="token variable"><span class="token variable">\`</span>this<span class="token variable">\`</span></span> 对象。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;0&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;2&quot;</span><span class="token operator">:</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;length&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> array11 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>array1<span class="token punctuation">)</span> <span class="token comment">// [ &#39;1&#39;, &#39;2&#39;, &#39;4&#39; ]</span>

<span class="token comment">// 方法还可以接收第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组</span>
<span class="token keyword">let</span> array12 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>array1<span class="token punctuation">,</span> <span class="token parameter">item</span> <span class="token operator">=&gt;</span> item <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>	<span class="token comment">// [ 2, 4, 8 ]</span>

<span class="token comment">// 类数组对象转换为数组</span>
Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2, 3, 4]</span>

<span class="token comment">// 对数组的修改</span>
Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 4, 6]</span>

<span class="token comment">// 字符串转换为数组</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// [&quot;f&quot;, &quot;o&quot;, &quot;o&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="查找数据-find-findindex-includes-indexof" tabindex="-1"><a class="header-anchor" href="#查找数据-find-findindex-includes-indexof"><span>查找数据 find / findIndex / includes / indexOf</span></a></h3><blockquote><ul><li><strong><code>find(val, index, arr)</code></strong>：用于找出第一个符合条件的数组成员，如果没有找到返回undefined</li><li><strong><code>findIndex()</code></strong>：用于找出第一个符合条件的数组成员的位置，如果没什么找到返回-1</li><li><ul><li>(fromIndex：可选，从定义的索引位置开始查找目标值，如果为负值，则按array.length+fromIndex位置开始查找，默认为0)</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/** find */</span>
<span class="token keyword">const</span> aryString1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;李四&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> target <span class="token operator">=</span> aryString1<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>   <span class="token comment">//{id: 1,name: &#39;张三&#39;}</span>

<span class="token doc-comment comment">/** findIndex */</span>
<span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>inedx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item <span class="token operator">&gt;</span> <span class="token number">15</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>	<span class="token comment">// 1</span>

<span class="token doc-comment comment">/** includes */</span>
<span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>	<span class="token comment">// true</span>
<span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>	<span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span>  <span class="token comment">// true true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="includes-扩展" tabindex="-1"><a class="header-anchor" href="#includes-扩展"><span>includes 扩展</span></a></h3><p><code>includes</code> 类似于 <code>indexOf</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>主要区别在于 <code>includes()</code> 查找 <code>NaN</code>，而 <code>indexOf()</code> 没有：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token punctuation">[</span><span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// -1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>includes</code> 不区分 <code>+0</code> 和 <code>-0</code>，几乎所有 JavaScript 都是这样工作的（除了 <code>Object.is</code>）：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//true</span>
Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>类型化数组也将有一个方法 <code>includes()</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> tarr <span class="token operator">=</span> Uint8Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tarr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="字符串与数组转换-split-join" tabindex="-1"><a class="header-anchor" href="#字符串与数组转换-split-join"><span>字符串与数组转换 split / join</span></a></h3><blockquote><ul><li><code>split()</code>方法是将一个字符串按照某一分隔符进行拆分为数组，而<code>join()</code>则正好相反。</li><li><code>join()</code>方法用于把数组中的所有元素放入一个字符串，元素是通过指定的分隔符进行分隔的。</li><li>使用<code>concat</code>函数,在字符串后面追加一个或多个字符</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 数组转换为字符串</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>	
<span class="token keyword">let</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 1,2,3</span>

<span class="token comment">// 字符串转换为数组</span>
<span class="token keyword">let</span> strs <span class="token operator">=</span> <span class="token string">&quot;1,2,3&quot;</span>
<span class="token keyword">let</span> resultArr <span class="token operator">=</span> strs<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &#39;1&#39;, &#39;2&#39;, &#39;3&#39; ]</span>

<span class="token comment">// 字符串拼接</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;13&quot;</span>
<span class="token keyword">let</span> strAdd <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-6&quot;</span><span class="token punctuation">)</span>	<span class="token comment">// 134-6</span>

<span class="token comment">// 数组拼接</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 3, 4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="迭代遍历的方法" tabindex="-1"><a class="header-anchor" href="#迭代遍历的方法"><span>迭代遍历的方法</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 遍历数组的方法</span>
<span class="token comment">### 1. forEach()</span>
	- 说明：迭代数组，对数组的每个元素执行一次提供的函数
	- 语法：<span class="token variable"><span class="token variable">\`</span>array.forEach<span class="token punctuation">(</span>function<span class="token punctuation">(</span>数组当前项的内容currentValue, 索引index, 数组本身arr<span class="token punctuation">))</span><span class="token variable">\`</span></span>
			- currentValue：遍历的数据
			- index: 遍历数据的序号/索引<span class="token punctuation">(</span>可选<span class="token punctuation">)</span>
			- arr: 当前遍历的数组本身<span class="token punctuation">(</span>可选<span class="token punctuation">)</span>

	- forEach 允许callback 更改原数组的元素，但不会返回数据。
	- forEach 可使用 <span class="token builtin class-name">return</span> 语句跳出本次循环，执行下一次循环。
	- 通过 <span class="token builtin class-name">break</span> 语句不能终止循环，但可通过抛出异常的方式来替代实现终止循环。
	- 使用 <span class="token builtin class-name">return</span> 语句不能返回到外层函数。
	


<span class="token comment">### 2. map()</span>
	- 说明：数组映射，分配内存空间存储新数组并返回。
  - 语法：<span class="token variable"><span class="token variable">\`</span>array.map<span class="token punctuation">((</span>currentValue,index,arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> 语句<span class="token punctuation">;</span>有return返回 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>
  
  - map<span class="token punctuation">(</span><span class="token punctuation">)</span> 方法按照原始数组元素顺序依次处理元素；返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。
	- 注意：map<span class="token punctuation">(</span><span class="token punctuation">)</span> 是原数组的映射；所以不会对空数组进行检测，不会改变原始数组
	- 不能中断遍历。
	- 注意：当数组项是复杂数据类型时，修改数组项的某个值，会让原数组改变


<span class="token comment">### 3. filter()</span>
	- 说明：数组过滤，筛选符合条件的所有元素并返回。
  - <span class="token variable"><span class="token variable">\`</span>array.filter<span class="token punctuation">(</span>function<span class="token punctuation">(</span>currentValue, index, arr<span class="token punctuation">))</span><span class="token variable">\`</span></span>
  - <span class="token variable"><span class="token variable">\`</span>filter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>会创建一个新的数组，新数组中的元素时通过检查指定符合条件的所有元素<span class="token punctuation">(</span>返回一个新数组<span class="token punctuation">)</span>
  - <span class="token variable"><span class="token variable">\`</span>filter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>方法<span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">return</span><span class="token variable">\`</span></span>值只有<span class="token variable"><span class="token variable">\`</span>true、false<span class="token variable">\`</span></span>；如果返回<span class="token variable"><span class="token variable">\`</span><span class="token boolean">true</span><span class="token variable">\`</span></span>，则保留这个数据；如果返回<span class="token variable"><span class="token variable">\`</span><span class="token boolean">false</span><span class="token variable">\`</span></span>则删除这个数据。



<span class="token comment">### 4. some()、every()</span>
	- 说明：检测数组，查找数组中是否有满足条件的元素，返回的都是一个布尔值
  - <span class="token variable"><span class="token variable">\`</span>array.some<span class="token punctuation">(</span>function<span class="token punctuation">(</span>currentValue, index, arr<span class="token punctuation">))</span><span class="token variable">\`</span></span>
  - some<span class="token punctuation">(</span><span class="token punctuation">)</span>方法，遍历数组的每一项，若其中一项为 true，则返回true；
  - every<span class="token punctuation">(</span><span class="token punctuation">)</span>方法，遍历数组每一项，若全部为true，则返回true.


<span class="token comment">### 5. entries(), keys(), values()：遍历数组</span>
  - <span class="token variable"><span class="token variable">\`</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>是键名的遍历
  - <span class="token variable"><span class="token variable">\`</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>是键值的遍历
  - <span class="token variable"><span class="token variable">\`</span>entries<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>是键值对的遍历


<span class="token comment">### 6. find</span>
	- <span class="token variable"><span class="token variable">\`</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span> 查找数组中符合条件的第一个元素，如果没有符合条件的元素，则返回undefined
	- <span class="token variable"><span class="token variable">\`</span>findIndex<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span> 方法返回传入一个测试条件（函数）符合条件的数组第一个元素位置
			- find<span class="token punctuation">(</span><span class="token punctuation">)</span>、findIndex<span class="token punctuation">(</span><span class="token punctuation">)</span> 对于空数组，函数是不会执行的。
 			- find<span class="token punctuation">(</span><span class="token punctuation">)</span>、findIndex<span class="token punctuation">(</span><span class="token punctuation">)</span> 并没有改变数组的原始值。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;for:&quot;</span><span class="token operator">+</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* arr.forEach() */</span>
<span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">;</span>	<span class="token comment">//true</span>
    sum <span class="token operator">+=</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">/* arr.map() */</span>
<span class="token keyword">let</span> newNum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ele<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> ele <span class="token operator">+</span> <span class="token number">3</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newNum<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 15, 4, 33, 25</span>

<span class="token comment">/* arr.filter() */</span>
<span class="token keyword">let</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> value <span class="token operator">&gt;=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* some */</span>
<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> flag <span class="token operator">=</span> arr2<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> value <span class="token operator">==</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* entries(), keys(), values() */</span>
<span class="token keyword">var</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Orange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Mango&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> fruits<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> fruits<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> fruits<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token comment">// 等价于 array.next()</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token comment">// 0, Orange  { value: [ 2, &#39;Apple&#39; ], done: false } [3, &#39;Mango&#39;]</span>


<span class="token doc-comment comment">/** find()、findIndex() */</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="for-of-与-for-in" tabindex="-1"><a class="header-anchor" href="#for-of-与-for-in"><span>for..of 与 for…in</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## for…in（ES3）和 for…of（ES6）</span>
- <span class="token variable"><span class="token variable">\`</span>for<span class="token punctuation">..</span>.in<span class="token variable">\`</span></span>遍历获取的是对象的键名<span class="token punctuation">(</span>索引<span class="token punctuation">)</span>，<span class="token variable"><span class="token variable">\`</span>for<span class="token punctuation">..</span>.of<span class="token variable">\`</span></span>遍历获取的是迭代器对象的成员<span class="token punctuation">(</span>属性值<span class="token punctuation">)</span>
	- <span class="token variable"><span class="token variable">\`</span>for<span class="token punctuation">..</span>.in<span class="token variable">\`</span></span> 遍历数组时获取的是索引值且有可能不按照实际数组内部顺序遍历，还会遍历数组所有的可枚举属性（包括原型链上可枚举的属性，如原型方法method和name属性）
  		即是 for<span class="token punctuation">..</span>.in 会遍历对象的整个原型链，性能非常差不推荐使用
  - <span class="token variable"><span class="token variable">\`</span>for<span class="token punctuation">..</span>.of<span class="token variable">\`</span></span> 只遍历数组内的元素，而不包括数组的原型属性method和索引name

<span class="token comment">### for...in</span>
- 遍历对象键名通常使用 <span class="token variable"><span class="token variable">\`</span>for<span class="token punctuation">..</span>.in<span class="token variable">\`</span></span>，可在循环内部使用 <span class="token variable"><span class="token variable">\`</span>hasOwnProperty<span class="token variable">\`</span></span> 判断某属性是否是该对象的实例属性来控制是否遍历原型。
- 还可通过ES5的 <span class="token variable"><span class="token variable">\`</span>Object.keys<span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token variable">\`</span></span> 获取对象的实例属性组成的数组<span class="token punctuation">(</span>不包括原型方法和属性<span class="token punctuation">)</span>


<span class="token comment">### fro...of</span>
- <span class="token variable"><span class="token variable">\`</span>for<span class="token punctuation">..</span>.of<span class="token variable">\`</span></span> 可遍历 <span class="token string">&#39;数组、类数组对象，字符串、Set 和 Map 结构 以及 Generator 对象&#39;</span> 等拥有迭代器接口的集合。
- 因对象不存在迭代器对象所以无法遍历，若想迭代一个对象的属性，可用 <span class="token variable"><span class="token variable">\`</span>for<span class="token punctuation">..</span>in<span class="token variable">\`</span></span> 或内建 <span class="token variable"><span class="token variable">\`</span>Object.keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span> 方法转化为数组再进行遍历，或添加一个迭代器<span class="token punctuation">(</span>Symbol.iterator<span class="token punctuation">)</span>接口到对象中。


<span class="token comment">### 其他遍历对象的方法</span>
- <span class="token variable"><span class="token variable">\`</span>Reflect.ownKeys<span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token variable">\`</span></span>遍历对象：返回一个数组,包含对象自身的所有属性,不管属性名是Symbol或字符串,也不管是否可枚举。

- <span class="token variable"><span class="token variable">\`</span>Object.getOwnPropertyNames<span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token variable">\`</span></span>遍历对象：返回一个数组,包含对象自身的所有属性<span class="token punctuation">(</span>不含Symbol属性,但是包括不可枚举属性<span class="token punctuation">)</span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* ---------for...of 与 for...in 遍历数组的区别---------- */</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">method</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arrInMethdod <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arrOfMethod <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;数组&quot;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  arrInMethdod<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrInMethdod<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, &quot;数组&quot;, [Function] ]</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> val <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  arrOfMethod<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrOfMethod<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span>


<span class="token comment">/* --------------for...of遍历对象----------------- */</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">method</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> objHasPro <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;遍历原型&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> objUnPro <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;不遍历原型&quot;</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  objHasPro<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
  obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">?</span> objUnPro<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objHasPro<span class="token punctuation">,</span> objUnPro<span class="token punctuation">)</span>  
<span class="token comment">// [ &#39;遍历原型&#39;, &#39;a&#39;, &#39;b&#39;, &#39;method&#39; ] [ &#39;不遍历原型&#39;, &#39;a&#39;, &#39;b&#39; ]</span>


<span class="token comment">/* ------- Object.keys()+for-in 遍历对象---------- */</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// a:1, b:2</span>
<span class="token punctuation">}</span>


<span class="token comment">/* ---- Object.getOwnPropertyNames(obj) 遍历对象--- */</span>
Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">// a:1, b:2</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">/* ---- Reflect.ownKeys(obj) 遍历对象------- */</span>
Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">// a:1, b:2</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="迭代方法对比" tabindex="-1"><a class="header-anchor" href="#迭代方法对比"><span>迭代方法对比</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">### for...of、for...in、forEach、map 区别</span>
for<span class="token punctuation">..</span>.of循环：具有 iterator 接口，就可以用for<span class="token punctuation">..</span>.of循环遍历它的成员<span class="token punctuation">(</span>属性值<span class="token punctuation">)</span>。for<span class="token punctuation">..</span>.of循环可以使用的范围包括数组、Set 和 Map 结构、某些类似数组的对象、Generator 对象，以及字符串。for<span class="token punctuation">..</span>.of循环调用遍历器接口，数组的遍历器接口只返回具有数字索引的属性。对于普通的对象，for<span class="token punctuation">..</span>.of结构不能直接使用，会报错，必须部署了 Iterator 接口后才能使用。可以中断循环。

for<span class="token punctuation">..</span>.in循环：遍历对象自身的和继承的可枚举的属性, 不能直接获取属性值。可以中断循环。

forEach: 只能遍历数组，不能中断，没有返回值<span class="token punctuation">(</span>或认为返回值是undefined<span class="token punctuation">)</span>。

map: 只能遍历数组，不能中断，返回值是修改后的数组。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="reduce方法同时实现map和filter" tabindex="-1"><a class="header-anchor" href="#reduce方法同时实现map和filter"><span><code>reduce</code>方法同时实现map和filter</span></a></h3><ul><li>假设有一个数列，希望更新它的每一项(map的功能)，然后筛选出一部分(filter的功能)。 如果先使用map然后使用filter的话，则需遍历这个数组两遍。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 1. 对原数组加倍，并选出大于50的数</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  next <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>next <span class="token operator">&gt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    item<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> item
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [ 220, 260, 120, 80, 140, 180 ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组类型转换-map-number" tabindex="-1"><a class="header-anchor" href="#数组类型转换-map-number"><span>数组类型转换 map(Number)</span></a></h3><ul><li>将string数组转换为number数组：<code>strArr.map(Number);</code></li><li>将number数组转换为string数组：<code>numArr.map(String);</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> numArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span>
<span class="token keyword">let</span> strArr <span class="token operator">=</span> numArr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> numArr<span class="token punctuation">,</span> strArr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &#39;1&#39;, &#39;2&#39;, 3 ] [ 1, 2, 3 ] [ &#39;1&#39;, &#39;2&#39;, &#39;3&#39; ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建数组并赋值-fill-map" tabindex="-1"><a class="header-anchor" href="#创建数组并赋值-fill-map"><span>创建数组并赋值 fill / map</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 创建数组并赋值 fill() 或 map()</span>

<span class="token comment">### 1. new Array.fill()</span>
- fill<span class="token punctuation">(</span><span class="token punctuation">)</span> 默认填充的是 undefined
    <span class="token builtin class-name">let</span> a <span class="token operator">=</span> new Array<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>.fill<span class="token punctuation">(</span><span class="token punctuation">)</span>	// <span class="token punctuation">[</span>undefined, undefined, undefined<span class="token punctuation">]</span>
    <span class="token builtin class-name">let</span> b <span class="token operator">=</span> new Array<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>.fill<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>	// <span class="token punctuation">[</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">]</span>
    


<span class="token comment">### 2. Array.from({ length: num }).map()</span>
		<span class="token builtin class-name">let</span> c <span class="token operator">=</span> Array.from<span class="token punctuation">(</span><span class="token punctuation">{</span> length: <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>	// <span class="token punctuation">[</span>undefined, undefined, undefined<span class="token punctuation">]</span>
		<span class="token builtin class-name">let</span> d <span class="token operator">=</span> Array.from<span class="token punctuation">(</span><span class="token punctuation">{</span> length: <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>.map<span class="token punctuation">(</span>_ <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>	// <span class="token punctuation">[</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="拷贝数组元素到指定位置-copywith" tabindex="-1"><a class="header-anchor" href="#拷贝数组元素到指定位置-copywith"><span>拷贝数组元素到指定位置 copyWith()</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## copyWithin()</span>
- <span class="token variable"><span class="token variable">\`</span>copyWithin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>方法在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组（会修改当前数组）

注意：使用这个方法，会修改当前的数组

- <span class="token variable"><span class="token variable">\`</span>array.copyWithIn<span class="token punctuation">(</span>复制到的位置下标, 开始复制的下标, 结束复制的下标<span class="token punctuation">)</span><span class="token variable">\`</span></span>
- <span class="token variable"><span class="token variable">\`</span>Array.prototype.copyWithin<span class="token punctuation">(</span>target, start <span class="token operator">=</span> <span class="token number">0</span>, end <span class="token operator">=</span> this.length<span class="token punctuation">)</span><span class="token variable">\`</span></span>
      target	必需。复制到指定目标索引位置。
      start	可选。元素复制的起始位置。
      end	可选。停止复制的索引位置 <span class="token punctuation">(</span>默认为 array.length<span class="token punctuation">)</span>。如果为负值，表示倒数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token comment">// [ 3, 4, 5, 6, 7, 8, 9, 7, 8, 9 ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="排序sort" tabindex="-1"><a class="header-anchor" href="#排序sort"><span>排序sort()</span></a></h3><ul><li><p>比较函数的参数 a 和 b 代表数组里的两个元素<code>arr.sort((a,b) =&gt; a&lt;b?-1:(a==b?0:1))</code>， 如果 a 小于 b，排序后的数组 a 在 b 前面，此时返回一个负数 （即上面的 return -1） 如果 a 等于 b，排序后两者位置不变，此时返回 0 （ return 0） 如果 a 大于 b，排序后 a 在 b 后面， 返回一个正数 （即上面的 return 1）</p><blockquote><p>此为升序，如果降序则把1和-1位置调换</p></blockquote></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 1. 数组排序</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 从小到大排序</span>
arr1<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>	<span class="token comment">// 得到的结果：[1, 2, 3, 5]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">// 2. 数组对象的排序</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">a</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span> <span class="token operator">:</span> <span class="token number">3.2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token punctuation">{</span> <span class="token literal-property property">a</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span> <span class="token operator">:</span> <span class="token number">1.2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token punctuation">{</span> <span class="token literal-property property">a</span> <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span> <span class="token operator">:</span> <span class="token number">2.2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token punctuation">{</span> <span class="token literal-property property">a</span> <span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span> <span class="token operator">:</span> <span class="token number">1.2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
<span class="token punctuation">]</span>
arr2<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 从小到大按属性b排序</span>
    <span class="token keyword">return</span> x<span class="token punctuation">.</span>b <span class="token operator">&gt;</span> y<span class="token punctuation">.</span>b <span class="token operator">?</span> <span class="token number">1</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3. 数组对象根据多个属性排序</span>
<span class="token comment">// 需求是：先按b属性从小到大排序，如果最小中有重复则再按a属性排序</span>
<span class="token comment">// 解决理念：在排序时先按b属性排序，如果x.b的大于y.b则将x移到y的右边，如果x.b等于y.b则再通过x.a和y.a进行比较（return 1则调换位置，return -1或0则不变）</span>
arr2<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>b <span class="token operator">&gt;</span> y<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>b <span class="token operator">===</span> y<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x<span class="token punctuation">.</span>a <span class="token operator">&gt;</span> y<span class="token punctuation">.</span>a <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>b <span class="token operator">&lt;</span> y<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="平铺数组-flat" tabindex="-1"><a class="header-anchor" href="#平铺数组-flat"><span>平铺数组 flat</span></a></h3><blockquote><ul><li><p><code>Array.prototype.flat()</code>用于将嵌套的数组“拉平”，变成一维数组。该方法返回一个新数组，对原数据没有影响</p></li><li><p>可以传参数，平铺几维数组；如果不知道是多少层 可以传<code>Infinity</code></p></li><li><p>如果原数组有空位，flat()方法会跳过空位,但是不过滤<code>undefined</code>、<code>null</code>、以及空字符串</p></li><li><p><code>flatMap()</code>方法对原数组的每个成员执行一个函数，相当于执行<code>Array.prototype.map()</code>,然后对返回值组成的数组执行<code>flat()</code>方法。该方法返回一个新数组，不改变原数组</p><p><strong>flatMap()只能展开一层数组</strong></p></li></ul><blockquote><p>注意：<strong>flat和flatMap方法为ES2019(ES10)方法，目前还未在所有浏览器完全兼容；需要升级浏览器到V71后才可使用</strong></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/** flat */</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[1, 2, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, 2,[&#39;e&#39;,&#39;r&#39;], undefined, null, &quot;&quot;] </span>

<span class="token keyword">const</span> c <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, 2, &quot;e&quot;, &quot;r&quot;, undefined, null, &quot;&quot;]</span>

<span class="token keyword">const</span> d <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, 2, &quot;e&quot;, &quot;r&quot;, undefined, null, &quot;&quot;]</span>

<span class="token doc-comment comment">/** flatMap */</span>
<span class="token keyword">const</span> e <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 
<span class="token comment">// [1, 2, 3, 2, 4, 4, Array(3), NaN, &quot;a,b,c2&quot;, Array(2), NaN, &quot;2,e,r2&quot;, Array(3), NaN, &quot;,,2&quot;]</span>

<span class="token keyword">const</span> f <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// [[1, 2, 3],[2, 4, 4],[Array(3), NaN, &#39;a,b,c2&#39;],[Array(2), NaN, &#39;2,e,r2&#39;],[Array(3), NaN, &#39;,,2&#39;]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="数组转换为键值对列表entries" tabindex="-1"><a class="header-anchor" href="#数组转换为键值对列表entries"><span>数组转换为键值对列表<code>entries()</code></span></a></h3><ul><li><code>array.entries()</code>方法返回一个数组的迭代对象(<code>Iterator</code>)，该对象包含数组的键值对(key/value)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Orange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Mango&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> iteraotrs <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> iteraotrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 等价于 array.next()</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 0, Orange</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token comment">// [ 2, &#39;Apple&#39; ] [3, &#39;Mango&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多数值转数组array-of" tabindex="-1"><a class="header-anchor" href="#多数值转数组array-of"><span>多数值转数组Array.of()</span></a></h3><blockquote><ul><li><code>Array.of()</code>用于将一组数值转换为数组，该方法主要目的是弥补数组构造函数<code>Array()</code>的不足，因为参数个数不同，会导致<code>Array()</code>的行为有差异。</li><li><code>Array.of()</code>可用替代<code>Array() 或 new Array()</code>，并且不存在由于参数不同而导致的重载，它的行为非常统一。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// []</span>
Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// [undefined]</span>
Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// [1]</span>
Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="数组去重" tabindex="-1"><a class="header-anchor" href="#数组去重"><span>数组去重</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">### 数组去重</span>
<span class="token number">1</span>. Set（只能对基础数据类型的数据去重）
可以给数组创建一个 Set 以丢弃重复的值，然后使用扩展运算符 <span class="token variable"><span class="token variable">\`</span><span class="token punctuation">..</span>.<span class="token variable">\`</span></span> 将其转化回数组。
注意：如果数组的数值中存储的是对象，即使是属性值与数值都相同，但因为它们引用的是不同的内存地址，Set 会认为每个对象都是唯一的，从而无法实现去重效果。


<span class="token number">2</span>. Map
- 方案1：把数组中每个 item 存储在 Map 中，再通过 filter 来过滤出 Map 中已经存储的值。
- 方案2：把数组中每个 item 存储在 Map 中，再取出 Map 中存储的所有值（取出的值已经去重）。

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/** --------- 简单数据类型去重 ---------- */</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span>

<span class="token doc-comment comment">/**
 * 使用 Set 去重
 */</span>
<span class="token keyword">const</span> unique1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Set: &#39;</span><span class="token punctuation">,</span> unique1<span class="token punctuation">)</span> <span class="token comment">// [1, 2, &quot;1&quot;, null, &quot;&quot;, undefined, NaN, true, false]</span>

<span class="token comment">// Set 无法给 复杂数据类型 去重</span>
<span class="token keyword">const</span> unique2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">// [{a: 1}, {a: 1}]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Set给复杂数据类型去重的缺陷: &#39;</span><span class="token punctuation">,</span> unique2<span class="token punctuation">)</span>

<span class="token comment">// Set 和 Array.from() 组合使用</span>
<span class="token keyword">const</span> unique22 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Set + Array.from(): &#39;</span><span class="token punctuation">,</span> unique22<span class="token punctuation">)</span>

<span class="token doc-comment comment">/**
 * 使用 filter
 * 注意：该方法直接把 \`NaN\` 全局过滤掉
 */</span>
<span class="token keyword">const</span> unique3 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> index<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;filter: &#39;</span><span class="token punctuation">,</span> unique3<span class="token punctuation">)</span>

<span class="token doc-comment comment">/**
 * 使用 includes
 */</span>
<span class="token keyword">const</span> unique4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>unique4<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> unique4<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;includes: &#39;</span><span class="token punctuation">,</span> unique4<span class="token punctuation">)</span>

<span class="token doc-comment comment">/**
 * 使用 indexOf
 * 注意：该方法无法判断数组中是否含有 \`NaN\`
 */</span>
<span class="token keyword">const</span> unique5 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>unique5<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> unique5<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;indexOf: &#39;</span><span class="token punctuation">,</span> unique5<span class="token punctuation">)</span>

<span class="token doc-comment comment">/**
 * 使用 reduce
 */</span>
<span class="token keyword">const</span> unique6 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter">unique<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>unique<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">?</span> unique <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>unique<span class="token punctuation">,</span> item<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>unique6<span class="token punctuation">)</span>

<span class="token doc-comment comment">/**
 * Object.hasOwnProperty()
 * 注意：必须要加上 typeof item，这是为了防止如同 字符串1 与 数字1
 */</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> unique7 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> curItem <span class="token operator">=</span> <span class="token keyword">typeof</span> item <span class="token operator">+</span> item
  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>curItem<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>curItem<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>unique7<span class="token punctuation">)</span>

<span class="token doc-comment comment">/** --------- 复杂数据类型去重 ---------- */</span>
<span class="token doc-comment comment">/**
 * 使用 Map 存储值来判断
 */</span>
<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> unique33 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>unique33<span class="token punctuation">)</span> <span class="token comment">// [1, 2, &quot;1&quot;, null, &quot;&quot;, undefined, NaN, true, false]</span>

<span class="token keyword">const</span> map2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token operator">!</span>map2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> map2<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> unique44 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>map2<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>unique44<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象-object" tabindex="-1"><a class="header-anchor" href="#对象-object"><span>对象 Object</span></a></h2><blockquote><h4 id="对象操作" tabindex="-1"><a class="header-anchor" href="#对象操作"><span>对象操作</span></a></h4><ul><li><p>对象由属性和方法组成；可通过对象直接法、关键字 new 和 Object.create() 函数来创建对象。</p></li><li><p>删除对象中的某个属性</p><ul><li><p>方法1：<code>delete obj.name</code>，但比<code>object[key] = undefined</code>效率慢（使用<code>delete</code>关键字是删除对象属性可真正实现删除）</p></li><li><p>方法2：<code>obj.name=undfined;</code>但其属性还在，只是内容为空</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;willy&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// { name: undefined, age: &#39;age&#39; }</span>
<span class="token keyword">delete</span> obj<span class="token punctuation">.</span>age<span class="token punctuation">;</span> <span class="token comment">// { name: undefined }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在数组中使用<code>delete</code>，null会在数组中留下空缺，而且长度不变。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">delete</span> array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="广义对象" tabindex="-1"><a class="header-anchor" href="#广义对象"><span>广义对象</span></a></h4><ul><li>狭义对象：<code>{}</code>这种字面量形式定义的对象，它是一组属性的无序集合(只包含属性和值)</li><li>广义对象：广义对象也是对象，但是它除了一组属性还有别的东西(如函数包含函数体，数组包含一组值) 即只要<strong>能够添加属性</strong>，即是广义对象（万物皆对象）</li><li>对象和json的区别： <ul><li>json一定是对象 但对象不一定是json</li><li>json的属性名必须要加双引号<code>&quot;&quot;</code></li><li>普通对象可以不用加双引号</li></ul></li></ul><p><strong>规律</strong></p><ol><li>函数直接圆括号调用，函数上下文就是window对象</li><li>函数当做对象的方法被对象打点语法调用时，函数上下文就是该对象</li><li>函数是事件处理函数，函数上下文就是触发这个事件的对象</li><li>定时器调用函数，上下文是window对象</li><li>数组中存放的函数，被数组索引之后加圆括号调用，函数上下文this代表这个数组</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token number">2021</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;true&#39;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;willy&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我是&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;,今年&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">&quot;岁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">2020</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>age<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2  js能够把变量进行隐式转换成字符串</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;····-------分割线--------····&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// willy</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// willy</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3 js能够把变量进行隐式转换成字符串</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;····-------分割线--------····&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 函数的上下文(this) 指向 obj 对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="对象三大特征" tabindex="-1"><a class="header-anchor" href="#对象三大特征"><span>对象三大特征</span></a></h3><blockquote><ul><li>每一个对象（实例）都有与之相关联的三个特性：原型、类和可扩展性。</li></ul><h5 id="原型属性" tabindex="-1"><a class="header-anchor" href="#原型属性"><span>原型属性</span></a></h5><ul><li>每个对象都有一个原型属性<code>prototype</code>，它是一个内部属性，在浏览器实现中表现为<code>_proto_</code>属性。它是一个指针，指向原型对象。</li><li>所有字面量创建的对象有一个相同的原型对象<code>Object.prototype</code></li><li>使用new关键字创建的对象，原型为构造函数prototype属性的值（比如，数组的原型对象为Array.prototype）同时也继承Object.prototype。</li></ul><h5 id="类属性" tabindex="-1"><a class="header-anchor" href="#类属性"><span>类属性</span></a></h5><ul><li>对象的类属性(class)是一个字符串，用以表明该对象为何种类型（该属性为只读属性）</li><li>默认的toString方法（继承自Object.prototype），将返回[object class]，即[object 类属性]</li><li>如果想获得对象的类，可以调用对象的toString()，然后提取已返回字符串的第8个到倒数第二个位置之间的字符串（[object class]）。不过，由于很多对象的toString()方法重写了，为了调用正确的toString()版本，必须间接调用Function.call()方法。</li><li><code>Object.prototype.toString.call(obj).slice(8, -1)</code></li></ul><h4 id="可扩展属性" tabindex="-1"><a class="header-anchor" href="#可扩展属性"><span>可扩展属性</span></a></h4><ul><li>对象的可扩展性，用以表示该对象是否可以新添属性。</li><li>所有内置对象和自定义对象都是显式可扩展的，宿主对象的可扩展性是由JavaScript引擎定义的。</li><li>通过方法object.isExtensible(),来判断对象是否可扩展。（查询）</li><li>通过方法object.preventExtensions(),将对象转换为不可扩展的。注意：一旦将对象转换为不可扩展，就无法将转换为可扩展的。（设置）</li><li>object.seal()和object.preventExtensions()，除了能将对象设置为不可扩展外，还可以将对象的自身属性设置为不可配置的。（设置）</li></ul></blockquote><h3 id="可枚举性" tabindex="-1"><a class="header-anchor" href="#可枚举性"><span>可枚举性</span></a></h3><blockquote><ul><li>对象每个属性都有一个描述对象（Descriptor）用来控制该属性的行为，<code>Object.getOwnPropertyDescriptor(obj, 属性名)</code>方法可获取该属性的描述对象。</li><li>描述对象的<code>enumerable</code>属性称为“可枚举性”，若该属性为false则表示某些操作会忽略当前属性。目前有四个操作会忽略<code>enumerable</code>为false的属性 <ol><li><code>for...in循环</code>：只遍历对象自身和继承的可枚举属性</li><li><code>Object.keys()</code>：返回对象自身所有可枚举属性的键值</li><li><code>JSON.stringify()</code>：只串行化对象自身的可枚举属性</li><li><code>Object.assign</code>：忽略enumerable为false的属性，只拷贝对象自身的可枚举属性</li></ol></li><li>注意：因为操作中引入集成属性会让问题复杂化，大多数时候我们只关心对象自身的属性。所以尽量不要用<code>for...in</code>循环，而用<code>Object.keys()</code>代替。</li></ul></blockquote><h3 id="属性的遍历" tabindex="-1"><a class="header-anchor" href="#属性的遍历"><span>属性的遍历</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 对象的遍历</span>
<span class="token number">1</span>. <span class="token variable"><span class="token variable">\`</span>for<span class="token punctuation">..</span>.in<span class="token variable">\`</span></span>：循环遍历对象自身和继承的可枚举属性（不含Symbol属性）
<span class="token number">2</span>. <span class="token variable"><span class="token variable">\`</span>Object.getOwnPropertyNames<span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token variable">\`</span></span>：返回一个数组，包含对象自身的所有Symbol属性的键名
<span class="token number">3</span>. <span class="token variable"><span class="token variable">\`</span>Object.getOwnPropertySymbols<span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token variable">\`</span></span>：返回一个数组，包含对象自身所有的Symbol属性的键名
<span class="token number">4</span>. <span class="token variable"><span class="token variable">\`</span>Reflect.ownKeys<span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token variable">\`</span></span>：返回一个数组，包含对象自身的（不含继承的）所有键名，不管键名是Symbol或字符串，也不管是否可枚举
<span class="token number">5</span>. <span class="token variable"><span class="token variable">\`</span>Object.keys<span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token variable">\`</span></span>：返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含Symbol属性）的键名
<span class="token number">6</span>. <span class="token variable"><span class="token variable">\`</span>Object.values<span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token variable">\`</span></span>：返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值

注意：通过<span class="token variable"><span class="token variable">\`</span>Object.create<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>添加的对象，如果不显示声明，默认是不可遍历的，因为其属性描述对象的enumerable默认是false
   


<span class="token comment">### 对象的遍历顺序</span>
以下方法遍历对象键名都遵守属性遍历次序规则：
<span class="token variable"><span class="token variable">\`</span>key<span class="token punctuation">(</span><span class="token punctuation">)</span>、ownKeys<span class="token punctuation">(</span><span class="token punctuation">)</span>、getOwnPropertyNames<span class="token punctuation">(</span><span class="token punctuation">)</span>、getOwnPropertySymbols<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>
		<span class="token number">1</span>. 首先遍历所有数值键，按照数值升序排列
		<span class="token number">2</span>. 其次遍历所有字符串键，按照加入时间升序排列
		<span class="token number">3</span>. 最后遍历所有 Symbol 键，按照加入时间顺序排列
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// [&#39;2&#39;, &#39;10&#39;, &#39;b&#39;, &#39;a&#39;, Symbol()]</span>


<span class="token comment">/* Object.values() */</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;symbol&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span> <span class="token comment">// [ &#39;a&#39; ]</span>
<span class="token keyword">const</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">123</span>
<span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj3<span class="token punctuation">)</span> <span class="token comment">// [1, 2]</span>


<span class="token comment">/* keys、values、entries 与 for...of 配套使用 */</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>	<span class="token comment">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;a&#39;, &#39;b&#39;, &#39;c&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1, 2, 3</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;a&#39;, 1], [&#39;b&#39;, 2], [&#39;c&#39;, 3]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="对象转换为数组-entires" tabindex="-1"><a class="header-anchor" href="#对象转换为数组-entires"><span>对象转换为数组 entires</span></a></h3><blockquote><p><code>Object.entries(obj)</code></p><ul><li>接收一个对象(可枚举)作为参数</li><li>返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* Object.entires() */</span>
Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;abc&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// [ [ &#39;foo&#39;, &#39;abc&#39; ] ]</span>

<span class="token comment">// 1. 遍历对象属性</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">one</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">two</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>k<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>v<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// &quot;one&quot;: 1</span>
<span class="token comment">// &quot;two&quot;: 2</span>


<span class="token comment">// 2. 将对象转为真正的Map结构</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">baz</span><span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span> <span class="token comment">// Map { foo: &quot;bar&quot;, baz: 42 }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>map<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [[&quot;foo&quot;,&quot;bar&quot;],[&quot;baz&quot;,42]]</span>


<span class="token comment">//  Object.entries 的实现</span>
  <span class="token comment">// Generator函数的版本</span>
  <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">entries</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">yield</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 非Generator函数的版本</span>
  <span class="token keyword">function</span> <span class="token function">entries</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="【典例】午餐订单商品的数量排序" tabindex="-1"><a class="header-anchor" href="#【典例】午餐订单商品的数量排序"><span>【典例】午餐订单商品的数量排序</span></a></h4><p>假如您有一个午餐订单对象，以及订购的每件商品的数量。您想从订购最多到订购最少的顺序订购这些。</p><p>此时可以使用 <code>entries</code> 方法将对象转为数组，保留 <code>key/value</code> 关系，再使用 <code>sort</code> 排序</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/** 一份午餐订单的商品以及记录的数量 */</span>
<span class="token keyword">const</span> lunch <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">soup</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token literal-property property">bread</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">sandwich</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token literal-property property">lemonade</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>
  <span class="token literal-property property">tea</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pastaSalad</span><span class="token operator">:</span> <span class="token number">4</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/** 对午餐订单商品排序 */</span>
<span class="token keyword">const</span> sorted <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">entires</span><span class="token punctuation">(</span>lunch<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
  <span class="token keyword">return</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sorted<span class="token punctuation">)</span>
<span class="token comment">/* 
    // 输出
    [
      [&#39;lemonade&#39;, 7],
      [&#39;pastaSalad&#39;, 4]
      [&#39;sandwich&#39;, 3],
      [&#39;soup&#39;, 2],
      [&#39;tea&#39;, 2],
      [&#39;bread&#39;, 1]
    ]	
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="键值对列表转换为对象-fromentries" tabindex="-1"><a class="header-anchor" href="#键值对列表转换为对象-fromentries"><span>键值对列表转换为对象 fromEntries</span></a></h3><blockquote><p><code>Object.fromEntries(iterable)</code></p><ul><li>是<code>Object.entries</code>的逆操作，用于将一个键值对列表转换为一个对象</li><li>接受迭代对象参数(如Array/Map)，返回一个新对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* 将键值对的数据结构还原为对象，适用于将Map结构转为对象 */</span>
<span class="token keyword">const</span> entries <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;baz&#39;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
entries<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;bab&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> obj1 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span> <span class="token comment">// Object { foo: &quot;bar&quot;, baz: 42, bab: false }</span>


<span class="token comment">/* 将数组转换为对象 */</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
  <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
  <span class="token punctuation">[</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span> <span class="token comment">// { 0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot; }</span>


<span class="token comment">/* 对象转换 */</span>
<span class="token keyword">const</span> object1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> object2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>
  Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>object1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span> key<span class="token punctuation">,</span> val <span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span> key<span class="token punctuation">,</span> val <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object2<span class="token punctuation">)</span> <span class="token comment">// { a: 2, b: 4, c: 6 }</span>


<span class="token comment">/* 配合 URLSearchParams 对象，将查询字符串转为对象 */</span>
<span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token string">&#39;type=Get_the Value&amp;geekno=34&amp;paid=10&#39;</span>
<span class="token keyword">const</span> searchParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>searchParams<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// {type: &quot;Get_the Value&quot;, geekno: &quot;34&quot;, paid: &quot;10&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="对象属性的访问方式" tabindex="-1"><a class="header-anchor" href="#对象属性的访问方式"><span>对象属性的访问方式</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">### 对象属性的访问方式</span>
- 有两种方法访问对象属性：点符号（<span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">.</span><span class="token variable">\`</span></span>）和括号符号（<span class="token variable"><span class="token variable">\`</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token variable">\`</span></span>）。
- 一般情况下使用点符号，当想使用变量访问属性时使用括号符号。
- 当您尝试访问不存在的属性时，它将返回 <span class="token variable"><span class="token variable">\`</span>undefined<span class="token variable">\`</span></span>，而不会抛出错误。


<span class="token comment">#### object.property 和 object[&#39;property&#39;] 的区别</span>
使用点符号的一个主要限制是它只适用于有效的标识符。
标识符是代码中表示变量、函数或属性的字符序列。标识符具有以下规则：
	- 首字母必须是字母、下划线（<span class="token variable"><span class="token variable">\`</span>_<span class="token variable">\`</span></span>）或美元符号（<span class="token variable"><span class="token variable">\`</span>$<span class="token variable">\`</span></span>），不能是数字。
	- 除首字母外，其他字符可以是字母、数字、下划线或美元符号（<span class="token variable"><span class="token variable">\`</span>$<span class="token variable">\`</span></span>）
	- 普通标识符（用作变量名、函数名和循环语句中用于跳转的标记）不能是保留字符
	- 在严格模式下，<span class="token variable"><span class="token variable">\`</span>arguments<span class="token variable">\`</span></span> 和 <span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">eval</span><span class="token variable">\`</span></span> 不能用作变量名，函数名或者参数名
  - 注意：上面所说的字母，不只是 ASCII 字母，还包括 Unicode 中的一些字符。但便于移植，字母通常是使用 ASCII 中的字母。

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token number">123</span><span class="token operator">:</span> <span class="token string">&#39;digit&#39;</span><span class="token punctuation">,</span>
  123name<span class="token operator">:</span> <span class="token string">&#39;start with digit&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name123</span><span class="token operator">:</span> <span class="token string">&#39;does not start with digit&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">$name</span><span class="token operator">:</span> <span class="token string">&#39;$ sign&#39;</span><span class="token punctuation">,</span>
  name<span class="token operator">-</span><span class="token number">123</span><span class="token operator">:</span> <span class="token string">&#39;hyphen&#39;</span><span class="token punctuation">,</span>
  <span class="token constant">NAME</span><span class="token operator">:</span> <span class="token string">&#39;upper case&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;lower case&#39;</span>
<span class="token punctuation">}</span>


<span class="token doc-comment comment">/** 点符号 */</span>
obj<span class="token punctuation">.</span><span class="token number">123</span>      <span class="token comment">// ❌ SyntaxError</span>
obj<span class="token punctuation">.</span>123name  <span class="token comment">// ❌ SyntaxError</span>
obj<span class="token punctuation">.</span>name123  <span class="token comment">// ✅ &#39;does not start with digit&#39;</span>
obj<span class="token punctuation">.</span>$name    <span class="token comment">// ✅  &#39;$ sign&#39;</span>
obj<span class="token punctuation">.</span>name<span class="token operator">-</span><span class="token number">123</span>  <span class="token comment">// ❌ SyntaxError</span>
obj<span class="token punctuation">.</span><span class="token string">&#39;name-123&#39;</span><span class="token comment">// ❌ SyntaxError</span>
obj<span class="token punctuation">.</span><span class="token constant">NAME</span> <span class="token comment">// ✅ &#39;upper case&#39;</span>
obj<span class="token punctuation">.</span>name <span class="token comment">// ✅ &#39;lower case&#39;</span>


<span class="token doc-comment comment">/** 括号符号 */</span>
obj<span class="token punctuation">[</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">]</span> <span class="token comment">// ✅ &#39;digit&#39;</span>
obj<span class="token punctuation">[</span><span class="token string">&#39;123name&#39;</span><span class="token punctuation">]</span> <span class="token comment">// ✅ &#39;start with digit&#39;</span>
obj<span class="token punctuation">[</span><span class="token string">&#39;name123&#39;</span><span class="token punctuation">]</span> <span class="token comment">// ✅ &#39;does not start with digit&#39;</span>
obj<span class="token punctuation">[</span><span class="token string">&#39;$name&#39;</span><span class="token punctuation">]</span> <span class="token comment">// ✅ &#39;$ sign&#39;</span>
obj<span class="token punctuation">[</span><span class="token string">&#39;name-123&#39;</span><span class="token punctuation">]</span> <span class="token comment">// ✅ &#39;does not start with digit&#39;</span>
obj<span class="token punctuation">[</span><span class="token string">&#39;NAME&#39;</span><span class="token punctuation">]</span> <span class="token comment">// ✅ &#39;upper case&#39;</span>
obj<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span> <span class="token comment">// ✅ &#39;lower case&#39;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特殊的访问</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/** 如果属性名是数字文字，则可能需要使用不同的键来访问属性值 */</span>
<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">12e34</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span> <span class="token punctuation">}</span>
obj1<span class="token punctuation">[</span><span class="token string">&#39;1.2e34&#39;</span><span class="token punctuation">]</span> <span class="token comment">// undefined</span>
obj1<span class="token punctuation">[</span><span class="token string">&#39;1.2e+35&#39;</span><span class="token punctuation">]</span> <span class="token comment">// &#39;hello&#39;</span>


<span class="token doc-comment comment">/** 用引号括住属性将有助于我们避免问题 */</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;12e34&#39;</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span> <span class="token punctuation">}</span>
obj2<span class="token punctuation">[</span><span class="token string">&#39;12e34&#39;</span><span class="token punctuation">]</span> <span class="token comment">// &#39;hello&#39;</span>


<span class="token comment">/* 如果属性是保留关键字之一，则必须使用引号来访问属性值 */</span>
<span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">}</span>
styles<span class="token punctuation">[</span><span class="token keyword">class</span><span class="token punctuation">]</span> <span class="token comment">// 将引发异常，因为类是保留关键字</span>
styles<span class="token punctuation">[</span><span class="token string">&#39;class&#39;</span><span class="token punctuation">]</span> <span class="token comment">// 返回 &#39;foo&#39;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="super关键字" tabindex="-1"><a class="header-anchor" href="#super关键字"><span>super关键字</span></a></h3><blockquote><ul><li><code>this</code>关键字总是指向函数所在的当前对象，<code>super</code>关键字指向当前对象的原型对象</li><li><code>JavaScript</code>引擎内部，<code>super.foo</code>等同于<code>Object.getPrototypeOf(this).foo</code>（属性）或<code>Object.getPrototypeOf(this).call(this)</code>（方法）</li><li>注意：<code>super</code>关键字表示原型对象时，只能用在对象方法中，用在其他地方都会报错</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> proto <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span>
  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">,</span>
  <span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>foo<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> proto<span class="token punctuation">)</span>
obj<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>	<span class="token comment">// &quot;hello&quot;</span>
obj<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>		<span class="token comment">// &quot;world&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="object-assign" tabindex="-1"><a class="header-anchor" href="#object-assign"><span>Object.assign()</span></a></h3><blockquote><ul><li><code>Object.assign()</code>方法用于对象的合并，将源对象<code>source</code>的所有可枚举属性复制到目标对象<code>target</code><ul><li>如果对象有同名属性，则后面的属性会覆盖前面的属性</li><li>如果该参数不是对象，则会先转成对象再返回</li><li><code>undefined 和 null</code>无法转成对象，所以会报错</li><li>Object.assign()会把数组当成对象</li><li>Object.assign() 只能对值进行复制，如果复制的是一个取值函数，则将求值后再复制</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> source1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> source2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source1<span class="token punctuation">,</span> source2<span class="token punctuation">)</span>
<span class="token comment">// target： {a: 1, b: 2, c: 3}</span>


<span class="token comment">/* Object.assign()会把数组当成对象 */</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>	<span class="token comment">// [4, 5, 3]</span>


<span class="token comment">/* Object.assign() 只能对值进行复制，如果复制的是一个取值函数，则将求值后再复制 */</span>
<span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">get</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> source<span class="token punctuation">)</span>	<span class="token comment">// { foo: 1 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* 1. 为对象添加属性 */</span>
<span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>x<span class="token punctuation">,</span> y<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">/* 2. 为对象添加方法 */</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token class-name">SomeClass</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">anotherMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token class-name">SomeClass</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">someMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
<span class="token class-name">SomeClass</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">anotherMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>


<span class="token comment">/* 3. 克隆对象 */</span>
<span class="token keyword">const</span> clone <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token comment">/* 4. 合并多个对象 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">merge</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> <span class="token operator">...</span>sources</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token operator">...</span>sources<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">/* 为属性指定默认值 */</span>
<span class="token keyword">const</span> <span class="token constant">DEFAULT</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">level</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
  <span class="token literal-property property">star</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token function">processContent</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  options <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT</span><span class="token punctuation">,</span> otions<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="创建新对象-create" tabindex="-1"><a class="header-anchor" href="#创建新对象-create"><span>创建新对象 create()</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 创建新对象 Object.create()</span>
- Object.create<span class="token punctuation">(</span>proto, <span class="token punctuation">[</span>propertiesObject<span class="token punctuation">]</span><span class="token punctuation">)</span>：以指定对象为原型，创建新对象。
		- proto: 新创建对象的原型对象
		- propertiesObject：可选参数。要添加新对象的可枚举属性（新添加的属性是自身的属性，而不是其原型链上的属性）
		

<span class="token comment">### Object.create(null)</span>
新创建的对象除了自身属性外，原型链上没有任何属性，即不继承 Object 上的任何对象，如果此时 调用如 Object.toString<span class="token punctuation">(</span><span class="token punctuation">)</span> 则会报错。
当需要一个非常干净且高度可定制的对象当做数据字典时，可使用 Object.create<span class="token punctuation">(</span>null<span class="token punctuation">)</span> 来创建空对象。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;a&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;b&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;c&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>b<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token comment">// 1, 2, 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="增改原有属性-defineproperty" tabindex="-1"><a class="header-anchor" href="#增改原有属性-defineproperty"><span>增改原有属性 defineProperty</span></a></h3><blockquote><ul><li><code>Object.defineProperty()</code>定义对象中新属性或修改原有的属性(为指定对象定义扩展多个属性)。</li><li><code>Object.defineProperty(obj目标对象, prop需定义或修改的属性名字, descriptor目标属性所拥有的特性)</code></li></ul><p><img src="`+b+`" alt="image-20210425193715820"></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;mi&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">22</span>
<span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;num&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">&#39;price&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">222</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">delete</span> obj<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment">// [&#39;name&#39;, &#39;price&#39;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>	<span class="token comment">// {name: &#39;mi&#39;, price: 222, num: 1000}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：当重复定义一个属性时，会出现报错</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* Reflect.defineProperty 相对于 Object.defineProperty 更具优势，因为不会出现报错信息，只是把相同的覆盖，返回false */</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// Object.defineProperty</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">3</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">4</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Object DefineProperty error&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Reflect.defineProperty</span>
<span class="token keyword">const</span> x1 <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">3</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> x2 <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">4</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>x2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;x2操作成功了&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;x2操作失败了&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="属性判断" tabindex="-1"><a class="header-anchor" href="#属性判断"><span>属性判断</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 属性判断</span>
<span class="token number">1</span>. <span class="token string">&#39;isPrototypeOf()&#39;</span>：判断某个 prototype 对象和某个实例对象之间的关系。

<span class="token number">2</span>. <span class="token string">&#39;Object.hasOwnProperty()&#39;</span>：每个实例对象都有一个<span class="token variable"><span class="token variable">\`</span>hasOwnProperty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>方法，用来判断某一个属性是本地属性还是集成自<span class="token variable"><span class="token variable">\`</span>prototype<span class="token variable">\`</span></span>对象的属性。

<span class="token number">3</span>. <span class="token string">&#39;in&#39;</span> 运算符：判断某个实例是否包含某个属性（还可用来遍历某个对象的所有属性）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token punctuation">}</span>
<span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&quot;猫科动物&quot;</span>

<span class="token keyword">let</span> cat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">&#39;小黄&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>cat1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cat1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;type&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span> <span class="token keyword">in</span> cat1<span class="token punctuation">,</span> <span class="token string">&quot;type&quot;</span> <span class="token keyword">in</span> cat1<span class="token punctuation">)</span>  <span class="token comment">// true true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="防止对象被修改-freeze-seal" tabindex="-1"><a class="header-anchor" href="#防止对象被修改-freeze-seal"><span>防止对象被修改 freeze /seal</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 防止对象属性被修改</span>
    <span class="token number">1</span>. <span class="token variable"><span class="token variable">\`</span>Object.freeze<span class="token punctuation">(</span><span class="token string">&#39;被冻结的对象&#39;</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>：可进行读取，不可增删改。
    <span class="token number">2</span>. <span class="token variable"><span class="token variable">\`</span>Object.seal<span class="token punctuation">(</span><span class="token string">&#39;被密封的对象&#39;</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>：可进行读取和更改，不可添加和删除。
注意：这两种方法都对对象执行<span class="token string">&#39;浅&#39;</span>冻结/密封。这意味着<span class="token string">&#39;嵌套对象和数组不会被冻结或密封&#39;</span>，可以进行修改。为了防止这种情况发生，您可以像本文所述的那样对对象进行深度冻结。


<span class="token comment">### 1. Object.freeze(&#39;被冻结的对象&#39;)</span>
Object.freeze<span class="token punctuation">(</span><span class="token punctuation">)</span> 方法可以冻结一个对象，即该对象不可修改或添加属性，且对象的原型也不能被修改。该方法返回被冻结的对象。
			const obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> name: <span class="token string">&#39;willy&#39;</span> <span class="token punctuation">}</span>
      const freeze <span class="token operator">=</span> Object.freeze<span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>	// 使用了Object.freeze<span class="token punctuation">(</span><span class="token punctuation">)</span> 方法，不可以操作原来的obj
      obj1.name <span class="token operator">=</span> <span class="token string">&#39;cilly&#39;</span>
      freeze.name <span class="token operator">=</span> <span class="token string">&#39;cilly&#39;</span> // 属性只读
      delete freeze.name  // 不可操作属性
      freeze.age <span class="token operator">=</span> <span class="token number">22</span>
      console.log<span class="token punctuation">(</span>obj1, freeze<span class="token punctuation">)</span> // <span class="token punctuation">{</span> name: <span class="token string">&#39;willy&#39;</span> <span class="token punctuation">}</span>
      
      
<span class="token comment">### 2. Object.seal()</span>
Object.seal<span class="token punctuation">(</span><span class="token punctuation">)</span> 只将现有的 configurable 属性标记为不可配置，这意味着只要它们是可写的，就可更改它们的值。
      const obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> name: <span class="token string">&#39;willy&#39;</span> <span class="token punctuation">}</span>
      const seal <span class="token operator">=</span> Object.seal<span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>
      seal.name <span class="token operator">=</span> <span class="token string">&#39;cilly&#39;</span>
      delete seal.name  // 不可删除
      seal.age <span class="token operator">=</span> <span class="token number">44</span>
      console.log<span class="token punctuation">(</span>obj2, seal<span class="token punctuation">)</span> // <span class="token punctuation">{</span> name: <span class="token string">&#39;cilly&#39;</span> <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="aggregateerror错误对象" tabindex="-1"><a class="header-anchor" href="#aggregateerror错误对象"><span>AggregateError错误对象</span></a></h3><blockquote><ul><li>为了配置<code>Promise.any()</code>方法，引入一个错误对象<code>AggergateError</code>，在一个错误对象内可封装多个错误。如果某个单一操作同时引发多个错误，需要同时抛出这些错误，则可以抛出一个AggregateError错误对象，把各种错误都放在这个对象里。</li><li>AggregateError本身是一个构造函数，用来生成AggregateError实例对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">AggregateError</span><span class="token punctuation">(</span>errors<span class="token punctuation">[</span><span class="token punctuation">,</span> message<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token operator">-</span> errors：数组，它的每个成员都是一个错误对象，必输项
	<span class="token operator">-</span> message：字符串，表示AggregateError抛出时的提示信息，可选

<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AggregateError</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;ERROR_11112&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;First name must be a string&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">RangeError</span><span class="token punctuation">(</span><span class="token string">&#39;Transaction value must be at least 1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">URIError</span><span class="token punctuation">(</span><span class="token string">&#39;User profile link must be https&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;Transaction cannot be processed&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err <span class="token keyword">instanceof</span> <span class="token class-name">AggregateError</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Transaction cannot be processed</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// AggregateError</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>errors<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出的错误信息</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="获取自身属性-object-getownpropertydescriptors" tabindex="-1"><a class="header-anchor" href="#获取自身属性-object-getownpropertydescriptors"><span>获取自身属性 Object.getOwnPropertyDescriptors()</span></a></h3><blockquote><ul><li><code>Object.getOwnPropertyDescriptor(obj, proName)</code>方法返回某个对象属性的描述对象</li><li><code>Object.getOwnPropertyDescriptors(obj)</code>方法返回指定对象所有自身属性（非集成属性）的描述对象；如果没有，则返回空对象。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;UI&#39;</span><span class="token punctuation">,</span>
<span class="token keyword">get</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">18</span> <span class="token punctuation">}</span>
<span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">123</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">/* {
    &quot;name&quot;: {
     &quot;value&quot;: &quot;UI&quot;,
     &quot;writable&quot;: true,
     &quot;enumerable&quot;: true,
     &quot;configurable&quot;: true
    },
    &quot;age&quot;: {
     &quot;enumerable&quot;: true,
     &quot;configurable&quot;: true
    }
  } */</span>


<span class="token comment">/* defineProperties + getOwnPropertyDescriptors 实现正确拷贝 */</span>
<span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">set</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">shallowMerge</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> source</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>
  target<span class="token punctuation">,</span>
  Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">shallowMerge</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> source<span class="token punctuation">)</span>  <span class="token comment">// { foo: [Setter] }</span>


<span class="token comment">/* create + getOwnPropertyDescriptors 实现浅拷贝 */</span>
<span class="token keyword">const</span> cloneObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>
  prot<span class="token punctuation">,</span>
  Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">/* Object.getOwnPropertyDescriptors()也可以用来实现 Mixin（混入）模式 */</span>
<span class="token keyword">let</span> <span class="token function-variable function">mix</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">object</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">with</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>mixins</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> mixins<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token parameter">c<span class="token punctuation">,</span> mixin</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>
      c<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>mixin<span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span> object<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// multiple mixins example</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">&#39;b&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token string">&#39;c&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token function">mix</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 代表了对象a和b被混入了对象c的操作，然后返回新对象d</span>
d<span class="token punctuation">.</span>c <span class="token comment">// &quot;c&quot;</span>
d<span class="token punctuation">.</span>b <span class="token comment">// &quot;b&quot;</span>
d<span class="token punctuation">.</span>a <span class="token comment">// &quot;a&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="proto-属性" tabindex="-1"><a class="header-anchor" href="#proto-属性"><span><code>__proto__</code>属性</span></a></h3><blockquote><ul><li><code>__proto__</code>属性用来读取或设置当前对象的原型对象<code>prototype</code>，但不推荐使用该属性</li><li>可使用如下来替代<code>__proto__</code>属性：<code>Object.setPrototypeOf()</code>写操作，<code>Object.getPrototypeOF()</code>读操作，<code>Object.create()</code>生成操作</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/** 
	* __proto__ 调用Object.prototype.__proto__ 具体实现
	* 若一个对象本身部署__proto__属性，该属性的值就是对象的原型	
	*/</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">&#39;__proto__&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> _thisObj <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>_thisObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">set</span><span class="token punctuation">(</span>proto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> <span class="token keyword">this</span> <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>proto<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> status <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> proto<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">Object</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Object.setPrototypeOf()</strong></p><ul><li><code>Object.setPrototypeOf(object, prototype)</code>：用来设置一个对象原型对象，返回参数对象本身。</li><li>如果第一个参数不是对象，会自动转为对象，但是由于返回的还是第一个参数，所以这个操作不会产生任何效果</li><li>注意：由于undefined 或 null无法转为对象，所以如果其为第一个参数就会报错</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* setPrototypeOf 实现原理 */</span>
<span class="token keyword">function</span> <span class="token function">setPrototypeOf</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> proto</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> proto<span class="token punctuation">;</span>
  <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Object.getPrototypeOf()</strong></p><ul><li><code>Object.getPrototypeOf(obj)</code>：与<code>Object.setPrototypeOf()</code>配套，用于读取一个对象的原型对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> rec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>rec<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token class-name">Rectangle</span><span class="token punctuation">.</span>prototype	<span class="token comment">// true</span>
Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>rec<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>rec<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token class-name">Rectangle</span><span class="token punctuation">.</span>prototype	<span class="token comment">// false</span>

<span class="token comment">/* 如果参数不是对象，会自动转为对象 */</span>
<span class="token comment">// 等同于 Object.getPrototypeOf(Number(1))</span>
Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>	<span class="token comment">// Number {[[PrimitiveValue]]: 0}</span>
Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span>	<span class="token comment">// String {length: 0, [[PrimitiveValue]]: &quot;&quot;}</span>
Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>	<span class="token comment">// Boolean {[[PrimitiveValue]]: true}</span>
Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token class-name">Number</span><span class="token punctuation">.</span>prototype <span class="token comment">// true</span>
Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token class-name">String</span><span class="token punctuation">.</span>prototype <span class="token comment">// true</span>
Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span>prototype <span class="token comment">// true</span>

<span class="token comment">/* undefined 或 null 无法转为对象，则会报错 */</span>
Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>	<span class="token comment">// TypeError: Cannot convert undefined or null to object</span>
Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>	<span class="token comment">// TypeError: Cannot convert undefined or null to object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="json-对象" tabindex="-1"><a class="header-anchor" href="#json-对象"><span>JSON 对象</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## JSON 对象</span>
- JSON 是指 JavaScript 对象表示法（JavaScript Object Notation）
- JSON 是轻量级的文本数据交互格式，并不是编程语言，独立于语言存在；具有自我描述性。
- JSON 可以将 JavaScript 对象中表示的一组数据转换为字符串，然后就可以在函数之间轻松地传递这个字符串，或者在异步应用中将字符串从 Web 客户端传递给服务端。


<span class="token comment">### 对象结构和数组结构</span>
JSON 简单来说就是 JavaScript 中的对象和数组。
  - 对象表示为键值对，数据由 <span class="token string">&#39;,&#39;</span> 分割，属性值的类型可以是 <span class="token string">&#39;数字、字符串、数组、对象&#39;</span>。
  - 花括号保存对象：<span class="token variable"><span class="token variable">\`</span><span class="token punctuation">{</span> key: value, key: value, <span class="token punctuation">..</span>. <span class="token punctuation">}</span><span class="token variable">\`</span></span>。
  - 方括号保存数组：<span class="token variable"><span class="token variable">\`</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span>, <span class="token string">&#39;b&#39;</span>, <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token variable">\`</span></span>。


<span class="token comment">### JSON 与对象的区别</span>
JSON 使用文本表示一个 JS 对象的信息，本质是一个字符串；但 JSON 的 key 值必须用引号<span class="token variable"><span class="token variable">\`</span>&quot;&quot;<span class="token variable">\`</span></span>，对象的 key 值可以不用引号。
    <span class="token variable"><span class="token variable">\`</span>const obj <span class="token operator">=</span> <span class="token punctuation">{</span> a: <span class="token string">&#39;Hello&#39;</span>, b: <span class="token string">&#39;World&#39;</span> <span class="token punctuation">}</span><span class="token variable">\`</span></span>，表示一个对象，注意键名也可以用引号包裹。
    <span class="token variable"><span class="token variable">\`</span>const json <span class="token operator">=</span> <span class="token string">&#39;{&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;}&#39;</span><span class="token variable">\`</span></span>，表示是一个 JSON 字符串，本质是一个字符串。



<span class="token comment">### JSON 和 JavaScript 对象的互转</span>
- 从 JSON 字符串转换为 JS 对象，使用 <span class="token variable"><span class="token variable">\`</span>JSON.parse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span> 方法。
- 从 JS 对象转换为 JSON 字符串，使用 <span class="token variable"><span class="token variable">\`</span>JSON.stringify<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span> 方法。
		const obj <span class="token operator">=</span> JSON.parse<span class="token punctuation">(</span><span class="token string">&#39;{&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;}&#39;</span><span class="token punctuation">)</span>
			// 结果是 <span class="token punctuation">{</span>a: <span class="token string">&#39;Hello&#39;</span>, b: <span class="token string">&#39;World&#39;</span><span class="token punctuation">}</span>
		const json <span class="token operator">=</span> JSON.stringify<span class="token punctuation">(</span><span class="token punctuation">{</span>a: <span class="token string">&#39;Hello&#39;</span>, b: <span class="token string">&#39;World&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
			// 结果是 <span class="token string">&#39;{&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;}&#39;</span>



<span class="token comment">### JSON.parse(JSON.string(obj)) 深拷贝的缺陷</span>
<span class="token number">1</span>. 无法获得值为 undefined 的 key
<span class="token number">2</span>. NaN、无穷大、无穷小 都会转变为 null
<span class="token number">3</span>. 无法获取原型上的方法、属性（如定义了函数的属性），只能获取 Object 原型上的内容
<span class="token number">4</span>. Date 对象转变为 Date 字符串
<span class="token number">5</span>.<span class="token variable"><span class="token variable">\`</span> Symbol<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span> （循环引用）会丢失

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用-json-stringify-会产生异常的情况" tabindex="-1"><a class="header-anchor" href="#使用-json-stringify-会产生异常的情况"><span>使用 JSON.stringify 会产生异常的情况</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">### 使用 JSON.stringify 会产生异常的情况</span>
<span class="token number">1</span>. 循环引用
当对象存在循环引用时，JSON.stringify<span class="token punctuation">(</span><span class="token punctuation">)</span> 无法将其转换为 JSON 字符串，并报错异常。
    const obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    obj.prop <span class="token operator">=</span> obj
    JSON.stringify<span class="token punctuation">(</span>obj<span class="token punctuation">)</span> // 报错：Converting circular structure to JSON


<span class="token number">2</span>. 不支持的数据类型
JSON.stringify<span class="token punctuation">(</span><span class="token punctuation">)</span> 只能处理 JavaScript 支持的数据类型，如字符串、数字、布尔值、数组、对象和 null。
如果对象包含函数、RegExp、Date、undefined 或 Symbol 等不支持的数据类型，则会丢失该部分数据。


<span class="token number">3</span>. 大型对象的嵌套深度过大
如果要序列化的对象存在很大的嵌套深度，超出 JSON.stringify<span class="token punctuation">(</span><span class="token punctuation">)</span> 的默认堆栈大小限制，可能会导致堆栈溢出错误。
    const obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token builtin class-name">let</span> currentObj <span class="token operator">=</span> obj
    <span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      currentObj.prop <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
      currentObj <span class="token operator">=</span> currentObj.prop
    <span class="token punctuation">}</span>
    JSON.stringify<span class="token punctuation">(</span>obj<span class="token punctuation">)</span> // RangeError: Maximum call stack size exceeded
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="对象的测试" tabindex="-1"><a class="header-anchor" href="#对象的测试"><span>对象的测试</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;willy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>	<span class="token comment">// Symbol() 丢失</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token literal-property property">hobbit</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;dance&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sing&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;sports&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;run&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">schoolData</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">grades</span><span class="token operator">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 转化为 Date 字符串</span>
  <span class="token function-variable function">run</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>	<span class="token comment">// 函数丢失</span>
  <span class="token literal-property property">walk</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>	<span class="token comment">// 值为 undefined 导致丢失</span>
  <span class="token literal-property property">fly</span><span class="token operator">:</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token comment">// 转化为 null</span>
  <span class="token literal-property property">cy</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> jsonStr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token keyword">const</span> cloneObj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cloneObj<span class="token punctuation">)</span>

<span class="token doc-comment comment">/**
<span class="token punctuation">{</span>
  age: 18,
  cy: null,
  date: &quot;2023-03-22T12:10:31.020Z&quot;,
  fly: null,
  hobbit: (3) [&#39;dance&#39;, &#39;sing&#39;, <span class="token punctuation">{</span>…<span class="token punctuation">}</span>],
  schoolData: <span class="token punctuation">{</span>grades: &#39;A&#39;<span class="token punctuation">}</span>, 
<span class="token punctuation">}</span> */</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自定义对象测试" tabindex="-1"><a class="header-anchor" href="#自定义对象测试"><span>自定义对象测试</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">Ken</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Ken&#39;</span> <span class="token punctuation">}</span>
<span class="token class-name">Ken</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">walk</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;walk&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">KenNaNa</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Ken</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;KenNaNa&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">tempFunc</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
tempFunc<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">Ken</span><span class="token punctuation">.</span>prototype
<span class="token class-name">KenNaNa</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">tempFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token class-name">KenNaNa</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">&#39;18&#39;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token class-name">KenNaNa</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">&#39;constructor&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> KenNaNa<span class="token punctuation">,</span>
  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> kenNaNa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KenNaNa</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> copyKenNaNa <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>kenNaNa<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token doc-comment comment">/**
	Ken <span class="token punctuation">{</span>age: &quot;18&quot;, run: ƒ, contructor: ƒ<span class="token punctuation">}</span>
 * */</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copyKenNaNa<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ƒ Object() { [native code]}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copyKenNaNa<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copyKenNaNa<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// is not function</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copyKenNaNa<span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// is not function </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copyKenNaNa<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;[object Object]&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="深拷贝与浅拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝与浅拷贝"><span>深拷贝与浅拷贝</span></a></h2><h3 id="变量赋值与原始对象可变性" tabindex="-1"><a class="header-anchor" href="#变量赋值与原始对象可变性"><span>变量赋值与原始对象可变性</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 变量赋值与原始对象可变性</span>

<span class="token comment">## JavaScript 数据类型</span>
    JavaScript 数据类型分为基本数据类型（值/原始类型），引用（对象）数据类型
        - JavaScript 存在七种基本数据类型：String、Number、Boolean、Null、Undefined、BigInt、Symbol
        - JavaScript 存在一种对象数据类型：Object。（Object 包括了 Array、Math、Function 等）
	

以下面定义变量为例说明：
	

<span class="token comment">## 变量赋值</span>
		- 赋值可看作是创建变量名并使该变量引用数据（无论是原始还是引用数据类型）的过程
		- 例子：let name <span class="token operator">=</span> <span class="token string">&quot;willy&quot;</span>
				- 说明：
						<span class="token number">0</span>. 解析器会从右到左分析该表达式
						<span class="token number">1</span>. 先创建字符串 <span class="token string">&quot;willy&quot;</span>
						<span class="token number">2</span>. 再创建变量 name
						<span class="token number">3</span>. 为变量 name 指定一个对先前创建的字符串的引用
						
						
						
<span class="token comment">## 重新赋值</span>
		- 例子：let name <span class="token operator">=</span> <span class="token string">&quot;willy&quot;</span><span class="token punctuation">;</span> name <span class="token operator">=</span> <span class="token string">&quot;william&quot;</span><span class="token punctuation">;</span>
				- 说明：
						<span class="token number">0</span>. 解析器会从右到左分析该表达式
						<span class="token number">1</span>. 先创建字符串 <span class="token string">&quot;willy&quot;</span>
						<span class="token number">2</span>. 再创建变量 name
						<span class="token number">3</span>. 为变量 name 指定一个对先前创建的字符串的引用
             <span class="token number">4</span>. 创建字符串 <span class="token string">&quot;william&quot;</span>
             <span class="token number">5</span>. 重新赋值 变量 name 对字符串 <span class="token string">&quot;willy&quot;</span> 的引用
             
             
<span class="token comment">## 突变（Mutation）</span>
		- 突变是改变数据的行为
		<span class="token number">1</span>. 原始值突变（无法改变基本数据类型）
				- 原始值不能突变（它们是不可改变的），无法改变任何数据
				- 例子：let name <span class="token operator">=</span> <span class="token string">&quot;willy&quot;</span><span class="token punctuation">;</span>  name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;wl&quot;</span><span class="token punctuation">;</span> // Error，name仍为<span class="token string">&quot;willy&quot;</span>
		
		<span class="token number">2</span>. 对象突变
				- 对于对象来说，可以简单的改变值
				- 例子：let user <span class="token operator">=</span> <span class="token punctuation">{</span>name: <span class="token string">&quot;willy&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> user.name <span class="token operator">=</span> <span class="token string">&quot;wl&quot;</span><span class="token punctuation">;</span>	// <span class="token punctuation">{</span> name: <span class="token string">&quot;wl&quot;</span> <span class="token punctuation">}</span>
						- 在此，我们从未重新赋值过 <span class="token string">&quot;user&quot;</span> 变量，但是确实改变了它所指向的对象
						
				- 示例一：原始值
        		<span class="token builtin class-name">let</span> name <span class="token operator">=</span> <span class="token string">&quot;willy&quot;</span>
        		<span class="token builtin class-name">let</span> name2 <span class="token operator">=</span> name
        		name2 <span class="token operator">=</span> <span class="token string">&quot;wl&quot;</span>
        		console.log<span class="token punctuation">(</span>name, name2<span class="token punctuation">)</span>	// <span class="token string">&quot;willy&quot;</span> <span class="token string">&quot;wl&quot;</span>
							-解析说明：
								<span class="token number">1</span>. 先创建了字符串 <span class="token string">&quot;willy&quot;</span>
								<span class="token number">2</span>. 再创建变量 name 并给它赋一个引用字符串 <span class="token string">&quot;willy&quot;</span>
								<span class="token number">3</span>. 创建了变量 name2 并给字符串 <span class="token string">&quot;willy&quot;</span> 赋了一个引用
								<span class="token number">4</span>. 创建了字符串 <span class="token string">&quot;wl&quot;</span>，并重新赋值 name2 来引用该字符串
								<span class="token number">5</span>. 当进行 console.logg 打印 name 和 name2时，name 仍为 <span class="token string">&quot;willy&quot;</span>，name2 为 <span class="token string">&quot;wl&quot;</span>
								
				- 示例二：对象 / 数组
        		<span class="token builtin class-name">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> name: <span class="token string">&quot;willy&quot;</span> <span class="token punctuation">}</span>
        		<span class="token builtin class-name">let</span> user2 <span class="token operator">=</span> user
        		user2 <span class="token operator">=</span> <span class="token punctuation">{</span> name: <span class="token string">&quot;wl&quot;</span> <span class="token punctuation">}</span>
        		console.log<span class="token punctuation">(</span>user, user2<span class="token punctuation">)</span>	// <span class="token punctuation">{</span> name: <span class="token string">&quot;wl&quot;</span> <span class="token punctuation">}</span>  <span class="token punctuation">{</span> name: <span class="token string">&quot;wl&quot;</span> <span class="token punctuation">}</span>
							-解析说明：
								<span class="token number">1</span>. 先创建了对象 <span class="token punctuation">{</span> name: <span class="token string">&quot;willy&quot;</span> <span class="token punctuation">}</span>
								<span class="token number">2</span>. 再创建变量 user ，并将其引用赋给已创建的对象
								<span class="token number">3</span>. 创建了变量 user2，并将它设置为 user，它引用之前创建的对象。
										<span class="token punctuation">(</span>**注意**：user2 现在引用的是 user 所引用的同一个对象！<span class="token punctuation">)</span>
								<span class="token number">4</span>. 创建了字符串 <span class="token string">&quot;wl&quot;</span>，并通过重新分配 <span class="token variable"><span class="token variable">\`</span>name<span class="token variable">\`</span></span> 属性来引用 <span class="token string">&quot;wl&quot;</span> 来改变对象。
								<span class="token number">5</span>. 当进行 console.logg 打印 user 和 user2 时，内存中两个变量所引用的对象已经发生了变化
								
								
<span class="token comment">##  \`原始值突变\`和\`对象突变\`的区别：可变性</span>
  <span class="token number">1</span>. 基本数据类型是不可变的。
      这意味着我们不必担心两个变量是否指向内存中的同一个原始值：哪个原始值不会改变。
      充其量，我们可以**重新分配**一个变量来指向其他数据，但这不会影响其他变量。

  <span class="token number">2</span>. 对象是可变的。
      因此，我们必须记住，多个变量可能指向内存中的同一个对象。
      **突变**这些变量中的一个是错误的行为，你正在突变它所引用的对象，这将反映在引用同一对象的任何其他变量中。

  - 防止对象的可变性
    	- 在许多情况下，您不希望两个变量引用同一个对象。防止这种情况的最好方法是在赋值时**创建对象的一个副本**。
    	- 创建对象副本的方法：Object.assign<span class="token punctuation">(</span><span class="token punctuation">)</span> 方法和扩展运算符<span class="token variable"><span class="token variable">\`</span><span class="token punctuation">..</span>.<span class="token variable">\`</span></span>。（注意：只会对对象第一层的数据进行拷贝，深层仍然是引用）


<span class="token comment">## 深拷贝与浅拷贝</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="浅拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝"><span>浅拷贝</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>- 深拷贝和浅拷贝是 只针对 <span class="token variable"><span class="token variable">\`</span>Object<span class="token variable">\`</span></span> 和 <span class="token variable"><span class="token variable">\`</span>Array<span class="token variable">\`</span></span> 这样的引用数据类型

<span class="token comment"># 浅拷贝</span>
- 拷贝出来的目标对象有着与原对象相同的属性值。如果我们的对象/数组中嵌套了对象，那么像 <span class="token variable"><span class="token variable">\`</span>object.assign<span class="token variable">\`</span></span> 和扩展运算符（<span class="token variable"><span class="token variable">\`</span><span class="token punctuation">..</span>.<span class="token variable">\`</span></span>）这样的浅层复制机制将只创建根级对象的副本，但深层次对象级别的只拷贝引用，仍将被共享
- （只复制指向某个对象的指针，而不是复制本身，新旧对象共享同一块内存）
	- es6新增方法浅拷贝：<span class="token variable"><span class="token variable">\`</span>Object.assign<span class="token punctuation">(</span>目标对象, 源对象1, 源对象2<span class="token punctuation">..</span>.<span class="token punctuation">)</span><span class="token variable">\`</span></span>
	- **注意**：当拷贝对象只有一层时为深拷贝，当拷贝对象为多层时是浅拷贝。

<span class="token comment"># 深拷贝</span>
- 深拷贝拷贝多层，每一级别的数据都会拷贝
	（会另外创造一个相同的对象，新对象跟原对象不共享内存，修改新对象不会改变原来对象的值）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;willy&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">&#39;广州&#39;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">/* console.log(&#39;-----浅拷贝------------------&#39;);
for(let key in obj) {
    o[key] = obj[key];
}
o.msg.age = 20;
console.log(o, &#39;\\n&#39;, obj); */</span>

<span class="token comment">/* console.log(&#39;-----es6 浅拷贝 语法糖---------&#39;);
Object.assign(o, obj);
o.msg.age = 12;
console.log(o, &#39;\\n&#39;, obj); */</span>

<span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-property property">&#39;a&#39;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-property property">&#39;a&#39;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-property property">&#39;b&#39;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> copy1 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// { a: 1, b: 2 } { a: 1, b: 2 }  obj1会改变</span>
<span class="token keyword">let</span> copy2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj2<span class="token punctuation">,</span> obj3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { a: 1 } { a: 1, b: 2 } obj2不会改变</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="object-assign-1" tabindex="-1"><a class="header-anchor" href="#object-assign-1"><span>Object.assign()</span></a></h4><blockquote><ul><li>Object.assign()方法可以把任意多个的原对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。</li><li>但Object.assign()进行的是浅拷贝，拷贝的是对象的属性的引用，而不是对象本身（浅拷贝只对深层数据其作用）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;willy&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> initalObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
initalObj<span class="token punctuation">.</span>a<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">&#39;aice&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// aice</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="array-prototype-conxcat" tabindex="-1"><a class="header-anchor" href="#array-prototype-conxcat"><span>Array.prototype.conxcat()</span></a></h4><blockquote><ul><li><code>concat</code> 方法用于连接两个或多个数组。该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;willy&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//修改新对象会修改到原对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="array-prototype-slice" tabindex="-1"><a class="header-anchor" href="#array-prototype-slice"><span>Array.prototype.slice()</span></a></h4><blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;willy&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr2<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>Array</code>的<code>slice</code>和<code>concat</code>方法不修改原数组，只会返回一个浅复制了原数组中的元素的一个新数组。</p></blockquote></blockquote><h4 id="es6的-扩展运算符" tabindex="-1"><a class="header-anchor" href="#es6的-扩展运算符"><span>es6的<code>...</code>扩展运算符</span></a></h4><blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">a1</span><span class="token operator">:</span> <span class="token string">&#39;a1s&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">a2</span><span class="token operator">:</span> <span class="token string">&#39;a2s&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">&#39;bs&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> copyObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>obj<span class="token punctuation">}</span>
copyObj<span class="token punctuation">.</span>a<span class="token punctuation">.</span>a1 <span class="token operator">=</span> <span class="token string">&#39;霜林醉&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">.</span>a1<span class="token punctuation">,</span> copyObj<span class="token punctuation">.</span>a<span class="token punctuation">.</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 霜林醉 霜林醉</span>
copyObj<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token string">&#39;willy&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>b<span class="token punctuation">,</span> copyObj<span class="token punctuation">.</span>b<span class="token punctuation">)</span>   <span class="token comment">// bs, willy</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝"><span>深拷贝</span></a></h3><blockquote><div class="language-BASH line-numbers-mode" data-ext="BASH" data-title="BASH"><pre class="language-BASH"><code>## 深拷贝
- 拷贝出来的目标对象有着与原始对象相同的属性值，且嵌套的对象更改也不会影响到原始对象的改变，也就是它们之间有着相同的数据，但数据存储在不同的内存地址中
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="json-parse-json-stringjfy" tabindex="-1"><a class="header-anchor" href="#json-parse-json-stringjfy"><span>JSON.parse(JSON.stringjfy())</span></a></h4><blockquote><ul><li>原理：用JSON.stringify将对象转成JSON字符串，再用JSON.parse()把字符串解析成对象，由此新的对象产生了，而且对象会开辟新的栈，实现深拷贝。</li><li>只能实现数组或对象深拷贝，如果对象有任何不能用 JSON 字符串表示的数据（例如函数会使得数据丢失）</li><li>会忽略 <code>undefined</code> 和 <code>symbol</code> 类型</li><li>不能解决循环引用的对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;willy&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr4 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr4<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span> arr4<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="递归调用浅拷贝" tabindex="-1"><a class="header-anchor" href="#递归调用浅拷贝"><span>递归调用浅拷贝</span></a></h4><blockquote><ul><li>递归方法实现深度克隆原理：遍历对象、数组直到里面都是基本数据类型，然后再赋值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;willy&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">&#39;广州&#39;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token parameter">newobj<span class="token punctuation">,</span> oldobj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//封装函数</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> oldobj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> item <span class="token operator">=</span> oldobj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// 获取属性值</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 判断此值是否为数组</span>
      newobj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token function">deepCopy</span><span class="token punctuation">(</span>newobj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 判断此值是否为对象</span>
      newobj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token function">deepCopy</span><span class="token punctuation">(</span>newobj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">//属于简单数据类型</span>
      newobj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">deepCopy</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
o<span class="token punctuation">.</span>msg<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">&#39;\\n&#39;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>封装拷贝函数</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 目前没发现bug的深拷贝函数</span>
<span class="token keyword">let</span> <span class="token function-variable function">deepClone</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Date<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>constructor <span class="token operator">===</span> RegExp<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> newObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">obj<span class="token punctuation">.</span>constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//保持继承链</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//不遍历其原型链上的属性</span>
      newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">?</span> arguments<span class="token punctuation">.</span><span class="token function">callee</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">:</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 使用arguments.callee解除与函数名的耦合</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> newObj<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="函数库lodash" tabindex="-1"><a class="header-anchor" href="#函数库lodash"><span>函数库lodash</span></a></h4><blockquote><p>函数库lodash有提供<code>.cloneDeep</code>用来作DeepCopy（需要<code>npm i lodash</code>安装lodash库）</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;lodash&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">f</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">g</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj2 <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f <span class="token operator">===</span> obj2<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>`,311);function A(E,F){const t=o("ExternalLinkIcon");return c(),l("div",null,[f,n("blockquote",null,[y,n("p",null,[n("a",h,[w,p(t)]),s(" 为所有 JavaScript 环境中的全局对象提供了单一语法。")]),j,n("blockquote",null,[n("p",null,[x,s("："),q,s(" 并不总是直接指向全局对象。详细可查阅 "),n("a",N,[s("In browsers, globalThis does not point directly to the global object"),p(t)]),s("。")])]),S,O]),_])}const I=e(g,[["render",A],["__file","ES6_语法.html.vue"]]),M=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/ES6_%E8%AF%AD%E6%B3%95.html","title":"","lang":"zh-CN","frontmatter":{"Author":"willysliang","CreateTime":"2022-08-21T16:17:17.000Z","Modifier":"willysliang","ModifiedTime":"2022-12-28T11:49:54.000Z","Description":"ES6+ 语法"},"headers":[{"level":2,"title":"ES6","slug":"es6","link":"#es6","children":[]},{"level":2,"title":"基础","slug":"基础","link":"#基础","children":[{"level":3,"title":"Babel转码器","slug":"babel转码器","link":"#babel转码器","children":[]},{"level":3,"title":"严格模式","slug":"严格模式","link":"#严格模式","children":[]},{"level":3,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[]},{"level":3,"title":"数值运算","slug":"数值运算","link":"#数值运算","children":[]}]},{"level":2,"title":"作用域 SCope","slug":"作用域-scope","link":"#作用域-scope","children":[{"level":3,"title":"var","slug":"var","link":"#var","children":[]},{"level":3,"title":"var、let、const的区别","slug":"var、let、const的区别","link":"#var、let、const的区别","children":[]},{"level":3,"title":"块级作用域","slug":"块级作用域","link":"#块级作用域","children":[]},{"level":3,"title":"作用域链","slug":"作用域链","link":"#作用域链","children":[]},{"level":3,"title":"预解释","slug":"预解释","link":"#预解释","children":[]},{"level":3,"title":"gloabalThis对象","slug":"gloabalthis对象","link":"#gloabalthis对象","children":[]},{"level":3,"title":"执行上下文","slug":"执行上下文","link":"#执行上下文","children":[]},{"level":3,"title":"作用域与执行上下文","slug":"作用域与执行上下文","link":"#作用域与执行上下文","children":[]},{"level":3,"title":"this 的指向","slug":"this-的指向","link":"#this-的指向","children":[]},{"level":3,"title":"改变函数内部this指向","slug":"改变函数内部this指向","link":"#改变函数内部this指向","children":[]},{"level":3,"title":"call、bind、apply 改变 this 指向","slug":"call、bind、apply-改变-this-指向","link":"#call、bind、apply-改变-this-指向","children":[]},{"level":3,"title":"【call】实现","slug":"【call】实现","link":"#【call】实现","children":[]},{"level":3,"title":"【apply】实现","slug":"【apply】实现","link":"#【apply】实现","children":[]},{"level":3,"title":"【bind】实现","slug":"【bind】实现","link":"#【bind】实现","children":[]}]},{"level":2,"title":"垃圾回收(GC)机制","slug":"垃圾回收-gc-机制","link":"#垃圾回收-gc-机制","children":[{"level":3,"title":"内存泄露","slug":"内存泄露","link":"#内存泄露","children":[]},{"level":3,"title":"垃圾回收的方法","slug":"垃圾回收的方法","link":"#垃圾回收的方法","children":[]},{"level":3,"title":"闭包","slug":"闭包","link":"#闭包","children":[]}]},{"level":2,"title":"面向对象 Class","slug":"面向对象-class","link":"#面向对象-class","children":[{"level":3,"title":"constructor构造函数","slug":"constructor构造函数","link":"#constructor构造函数","children":[]},{"level":3,"title":"创建、调用类","slug":"创建、调用类","link":"#创建、调用类","children":[]},{"level":3,"title":"类的继承与super","slug":"类的继承与super","link":"#类的继承与super","children":[]},{"level":3,"title":"Extends","slug":"extends","link":"#extends","children":[]},{"level":3,"title":"static","slug":"static","link":"#static","children":[]},{"level":3,"title":"封装","slug":"封装","link":"#封装","children":[]}]},{"level":2,"title":"函数式编程 Function","slug":"函数式编程-function","link":"#函数式编程-function","children":[{"level":3,"title":"函数的定义","slug":"函数的定义","link":"#函数的定义","children":[]},{"level":3,"title":"name 属性","slug":"name-属性","link":"#name-属性","children":[]},{"level":3,"title":"纯函数","slug":"纯函数","link":"#纯函数","children":[]},{"level":3,"title":"回调函数","slug":"回调函数","link":"#回调函数","children":[]},{"level":3,"title":"组合函数","slug":"组合函数","link":"#组合函数","children":[]},{"level":3,"title":"缓存函数","slug":"缓存函数","link":"#缓存函数","children":[]},{"level":3,"title":"惰性函数","slug":"惰性函数","link":"#惰性函数","children":[]},{"level":3,"title":"立即执行函数IIFE","slug":"立即执行函数iife","link":"#立即执行函数iife","children":[]},{"level":3,"title":"函数防抖与节流","slug":"函数防抖与节流","link":"#函数防抖与节流","children":[]},{"level":3,"title":"箭头函数","slug":"箭头函数","link":"#箭头函数","children":[]},{"level":3,"title":"尾调用","slug":"尾调用","link":"#尾调用","children":[]},{"level":3,"title":"递归","slug":"递归","link":"#递归","children":[]},{"level":3,"title":"尾递归","slug":"尾递归","link":"#尾递归","children":[]},{"level":3,"title":"函数柯里化","slug":"函数柯里化","link":"#函数柯里化","children":[]},{"level":3,"title":"偏函数","slug":"偏函数","link":"#偏函数","children":[]},{"level":3,"title":"链式调用","slug":"链式调用","link":"#链式调用","children":[]}]},{"level":2,"title":"原型链 prototype","slug":"原型链-prototype","link":"#原型链-prototype","children":[{"level":3,"title":"proto、prototype、constructor","slug":"proto、prototype、constructor","link":"#proto、prototype、constructor","children":[]},{"level":3,"title":"原型链解决的是什么问题","slug":"原型链解决的是什么问题","link":"#原型链解决的是什么问题","children":[]},{"level":3,"title":"扩展内置对象","slug":"扩展内置对象","link":"#扩展内置对象","children":[]},{"level":3,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[]},{"level":3,"title":"new生成一个对象的过程","slug":"new生成一个对象的过程","link":"#new生成一个对象的过程","children":[]},{"level":3,"title":"原型继承（继承模式）","slug":"原型继承-继承模式","link":"#原型继承-继承模式","children":[]}]},{"level":2,"title":"运算符扩展","slug":"运算符扩展","link":"#运算符扩展","children":[{"level":3,"title":"解构赋值","slug":"解构赋值","link":"#解构赋值","children":[]},{"level":3,"title":"可变参数 arguments","slug":"可变参数-arguments","link":"#可变参数-arguments","children":[]},{"level":3,"title":"剩余(rest)参数","slug":"剩余-rest-参数","link":"#剩余-rest-参数","children":[]},{"level":3,"title":"扩展运算符...","slug":"扩展运算符","link":"#扩展运算符","children":[]},{"level":3,"title":"模板字符串","slug":"模板字符串","link":"#模板字符串","children":[]},{"level":3,"title":"空值合并运算符??","slug":"空值合并运算符","link":"#空值合并运算符","children":[]},{"level":3,"title":"可选链判断运算符?.","slug":"可选链判断运算符","link":"#可选链判断运算符","children":[]},{"level":3,"title":"逻辑赋值运算符","slug":"逻辑赋值运算符","link":"#逻辑赋值运算符","children":[]},{"level":3,"title":"代码复用Object[key]","slug":"代码复用object-key","link":"#代码复用object-key","children":[]},{"level":3,"title":"幂运算符（** 和 **=）","slug":"幂运算符-和","link":"#幂运算符-和","children":[]}]},{"level":2,"title":"数值 Number","slug":"数值-number","link":"#数值-number","children":[{"level":3,"title":"特殊的数字类型","slug":"特殊的数字类型","link":"#特殊的数字类型","children":[]},{"level":3,"title":"安全数","slug":"安全数","link":"#安全数","children":[]},{"level":3,"title":"BigInt 大整数","slug":"bigint-大整数","link":"#bigint-大整数","children":[]},{"level":3,"title":"数字分隔符","slug":"数字分隔符","link":"#数字分隔符","children":[]},{"level":3,"title":"位运算符/计算","slug":"位运算符-计算","link":"#位运算符-计算","children":[]},{"level":3,"title":"Math 对象","slug":"math-对象","link":"#math-对象","children":[]},{"level":3,"title":"Date 对象","slug":"date-对象","link":"#date-对象","children":[]},{"level":3,"title":"数值判定：isFinite() & isNaN()","slug":"数值判定-isfinite-isnan","link":"#数值判定-isfinite-isnan","children":[]}]},{"level":2,"title":"字符串 String","slug":"字符串-string","link":"#字符串-string","children":[{"level":3,"title":"查找字符串","slug":"查找字符串","link":"#查找字符串","children":[]},{"level":3,"title":"字符串补全长度 pad","slug":"字符串补全长度-pad","link":"#字符串补全长度-pad","children":[]},{"level":3,"title":"重复复制字符串：repeat","slug":"重复复制字符串-repeat","link":"#重复复制字符串-repeat","children":[]},{"level":3,"title":"消除字符串空格：trim","slug":"消除字符串空格-trim","link":"#消除字符串空格-trim","children":[]},{"level":3,"title":"字符串替换：replace","slug":"字符串替换-replace","link":"#字符串替换-replace","children":[]},{"level":3,"title":"截取字符串 substring","slug":"截取字符串-substring","link":"#截取字符串-substring","children":[]},{"level":3,"title":"子串字符访问 chatAt(index)  或 string[index]","slug":"子串字符访问-chatat-index-或-string-index","link":"#子串字符访问-chatat-index-或-string-index","children":[]},{"level":3,"title":"转编码：encodeURIComponent()","slug":"转编码-encodeuricomponent","link":"#转编码-encodeuricomponent","children":[]},{"level":3,"title":"斜杠转义：String.raw()","slug":"斜杠转义-string-raw","link":"#斜杠转义-string-raw","children":[]}]},{"level":2,"title":"数组 Array","slug":"数组-array","link":"#数组-array","children":[{"level":3,"title":"数组调用方法","slug":"数组调用方法","link":"#数组调用方法","children":[]},{"level":3,"title":"类数组对象","slug":"类数组对象","link":"#类数组对象","children":[]},{"level":3,"title":"类数组转为数组Array.from()","slug":"类数组转为数组array-from","link":"#类数组转为数组array-from","children":[]},{"level":3,"title":"查找数据 find / findIndex / includes / indexOf","slug":"查找数据-find-findindex-includes-indexof","link":"#查找数据-find-findindex-includes-indexof","children":[]},{"level":3,"title":"字符串与数组转换 split / join","slug":"字符串与数组转换-split-join","link":"#字符串与数组转换-split-join","children":[]},{"level":3,"title":"迭代遍历的方法","slug":"迭代遍历的方法","link":"#迭代遍历的方法","children":[]},{"level":3,"title":"for..of  与 for…in","slug":"for-of-与-for-in","link":"#for-of-与-for-in","children":[]},{"level":3,"title":"迭代方法对比","slug":"迭代方法对比","link":"#迭代方法对比","children":[]},{"level":3,"title":"reduce方法同时实现map和filter","slug":"reduce方法同时实现map和filter","link":"#reduce方法同时实现map和filter","children":[]},{"level":3,"title":"数组类型转换 map(Number)","slug":"数组类型转换-map-number","link":"#数组类型转换-map-number","children":[]},{"level":3,"title":"创建数组并赋值 fill / map","slug":"创建数组并赋值-fill-map","link":"#创建数组并赋值-fill-map","children":[]},{"level":3,"title":"拷贝数组元素到指定位置 copyWith()","slug":"拷贝数组元素到指定位置-copywith","link":"#拷贝数组元素到指定位置-copywith","children":[]},{"level":3,"title":"排序sort()","slug":"排序sort","link":"#排序sort","children":[]},{"level":3,"title":"平铺数组 flat","slug":"平铺数组-flat","link":"#平铺数组-flat","children":[]},{"level":3,"title":"数组转换为键值对列表entries()","slug":"数组转换为键值对列表entries","link":"#数组转换为键值对列表entries","children":[]},{"level":3,"title":"多数值转数组Array.of()","slug":"多数值转数组array-of","link":"#多数值转数组array-of","children":[]},{"level":3,"title":"数组去重","slug":"数组去重","link":"#数组去重","children":[]}]},{"level":2,"title":"对象 Object","slug":"对象-object","link":"#对象-object","children":[{"level":3,"title":"对象三大特征","slug":"对象三大特征","link":"#对象三大特征","children":[]},{"level":3,"title":"可枚举性","slug":"可枚举性","link":"#可枚举性","children":[]},{"level":3,"title":"属性的遍历","slug":"属性的遍历","link":"#属性的遍历","children":[]},{"level":3,"title":"对象转换为数组 entires","slug":"对象转换为数组-entires","link":"#对象转换为数组-entires","children":[]},{"level":3,"title":"键值对列表转换为对象  fromEntries","slug":"键值对列表转换为对象-fromentries","link":"#键值对列表转换为对象-fromentries","children":[]},{"level":3,"title":"对象属性的访问方式","slug":"对象属性的访问方式","link":"#对象属性的访问方式","children":[]},{"level":3,"title":"super关键字","slug":"super关键字","link":"#super关键字","children":[]},{"level":3,"title":"Object.assign()","slug":"object-assign","link":"#object-assign","children":[]},{"level":3,"title":"创建新对象 create()","slug":"创建新对象-create","link":"#创建新对象-create","children":[]},{"level":3,"title":"增改原有属性 defineProperty","slug":"增改原有属性-defineproperty","link":"#增改原有属性-defineproperty","children":[]},{"level":3,"title":"属性判断","slug":"属性判断","link":"#属性判断","children":[]},{"level":3,"title":"防止对象被修改 freeze /seal","slug":"防止对象被修改-freeze-seal","link":"#防止对象被修改-freeze-seal","children":[]},{"level":3,"title":"AggregateError错误对象","slug":"aggregateerror错误对象","link":"#aggregateerror错误对象","children":[]},{"level":3,"title":"获取自身属性 Object.getOwnPropertyDescriptors()","slug":"获取自身属性-object-getownpropertydescriptors","link":"#获取自身属性-object-getownpropertydescriptors","children":[]},{"level":3,"title":"__proto__属性","slug":"proto-属性","link":"#proto-属性","children":[]}]},{"level":2,"title":"JSON 对象","slug":"json-对象","link":"#json-对象","children":[]},{"level":2,"title":"深拷贝与浅拷贝","slug":"深拷贝与浅拷贝","link":"#深拷贝与浅拷贝","children":[{"level":3,"title":"变量赋值与原始对象可变性","slug":"变量赋值与原始对象可变性","link":"#变量赋值与原始对象可变性","children":[]},{"level":3,"title":"浅拷贝","slug":"浅拷贝","link":"#浅拷贝","children":[]},{"level":3,"title":"深拷贝","slug":"深拷贝","link":"#深拷贝","children":[]}]}],"git":{"updatedTime":1708562968000,"contributors":[{"name":"willy","email":"willysliang","commits":4},{"name":"willy","email":"willysliang@qq.com","commits":4}]},"filePathRelative":"前端基础/ES6+语法.md"}');export{I as comp,M as data};
