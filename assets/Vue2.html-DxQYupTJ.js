import{_ as n,o as s,c as a,b as t}from"./app-Bvx-HY_0.js";const e="/static_blog/assets/image-20201117235906290-8UsFVjuB.png",p="/static_blog/assets/vue_Architecture-HOmmmssL.png",l="/static_blog/assets/image-20230308184732048-gNZlKpzh.png",o="/static_blog/assets/image-20211102161402565-DuDY4z4d.png",c="/static_blog/assets/image-20210910105541211-BELJ1vFU.png",i="/static_blog/assets/998023-20180519213134497-676744027-DlD1Xxs8.png",u="/static_blog/assets/image-20210917102119532-FzJUQjeT.png",r="/static_blog/assets/image-20210719171619593-DIshIte2.png",d="/static_blog/assets/image-20201218124600637-CGLpA09C.png",k="/static_blog/assets/image-20201218132217602-DrnuaZJj.png",v="/static_blog/assets/image-20201229000721595-DQJi5Pq1.png",m="/static_blog/assets/image-20210105104406137-OHB4HLZg.png",b="/static_blog/assets/image-20210105104341788-DjqHKmUa.png",g="/static_blog/assets/image-20210105111814071-DJ2qfRGk.png",h="/static_blog/assets/image-20220825194922734-D6HymVmk.png",y="/static_blog/assets/image-20210416003100883-iTKhYyz2.png",q="/static_blog/assets/image-20210731230204839-Ca6y_0aS.png",f="/static_blog/assets/image-20210505164210975-Cbm3-moQ.png",x="/static_blog/assets/image-20210923111020342-BUDWRlyp.png",w={},j=t(`<h2 id="vue2-0" tabindex="-1"><a class="header-anchor" href="#vue2-0"><span>Vue2.0</span></a></h2><h2 id="vue的认知" tabindex="-1"><a class="header-anchor" href="#vue的认知"><span>VUE的认知</span></a></h2><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## Vue 的认知</span>
<span class="token number">1</span>. 提高开发效率的发展历程
  - 原生JS -<span class="token operator">&gt;</span> Jquery之类的类库 -<span class="token operator">&gt;</span> 前端模板引擎 -<span class="token operator">&gt;</span> Angular.js / vue.js
  - 能够帮助我们减少不必要的DOM操作；提高渲染能力；双向数据绑定的概念

<span class="token number">2</span>. 框架和库的区别
  - 框架：是一套完整的解决方案，对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。
  - 库<span class="token punctuation">(</span>插件<span class="token punctuation">)</span>：提供某一个功能，读项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其他库实现需求

<span class="token number">3</span>. Vue的两个核心
  - 数据驱动和组件系统

<span class="token number">4</span>. 方法和函数的区别
  - 方法：methods；函数：function
  - java中只有方法，没有函数（方法面对对象的）
  - 方法在类中定义的，函数是在外边定义
  

Vue 是一个构建数据驱动的渐进式框架，它的目标是通过 API 实现响应数据绑定和视图更新。
优点：
    <span class="token number">1</span>. 数据驱动视图：对真实 DOM 进行抽象出 Virtual DOM（本质是一个 JS 对象），并配合 <span class="token function">diff</span> 算法、响应式和观察者、异步队列等手段以最小代价更新 DOM，渲染页面。
    <span class="token number">2</span>. 组件化：组件采用单文件的形式进行代码的组织编写，使得我们可以在一个文件里编写 html/js/css（scoped 属性配置 css 隔离），并且配合 vue-loader 之后，支持更强大的预处理等功能。
    由于采用虚拟 DOM，让 Vue 开发 SSR 更加便捷。
缺点：
		由于底层基于 Object.defineProperty（vue3采用 Proxy）实现响应式，但这个 API 本身不支持 IE8 及以下浏览器。
		CSR 的先天不足，首屏性能问题（白屏）
		由于搜索引擎爬虫无法爬取 JS 中的内容，故 SPA 应用先天对 SEO 优化存在短板。



<span class="token comment">### vue 的特点</span>
<span class="token number">1</span>. 数据双向绑定，数据响应式改变
<span class="token number">2</span>. 组件化开发，代码量减少，维护代码成本降低
<span class="token number">3</span>. vue内置指令：可以达到对页面效果处理的行为
<span class="token number">4</span>. 前端路由：相对于传统的页面通过超链接实现页面的切换和跳转，vue路由不会刷新页面
<span class="token number">5</span>. vuex状态管理：减少数据的重复性定义和处理
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="mvc-与mvvm-间的区别" tabindex="-1"><a class="header-anchor" href="#mvc-与mvvm-间的区别"><span>MVC 与MVVM 间的区别</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## MVC 与 MVVM 间的区别</span>
- MVC是后端的分层开发概念；MVVM是前端视图层的概念，主要关注于视图层分离（即MVVM把前端视图层分为Model，ViewModel，View三部分）

<span class="token comment">### MVVM作用：把逻辑层跟视图层区通过VM调度来分开</span>
  - M（数据层Model）：指保存的是每个页面中的单独数据，js中data的数据
  - V（视图层View）：UI组件<span class="token punctuation">(</span>html+css<span class="token punctuation">)</span>，负责将数据模型转化成UI展现到页面上
  - VM（视图模型层ViewModel）：分割了M和每当V层想要获取后保存数据时，都要由VM做中间处理，把data中的数据<span class="token punctuation">(</span>model层<span class="token punctuation">)</span>通过v-model双向数据绑定把数据渲染到页面<span class="token punctuation">(</span>view层<span class="token punctuation">)</span>（即VM层实现了数据双向绑定）
    
	<span class="token number">1</span>. View和ViewModel通信是双向的，ViewModel和Model也是双向通信的
  <span class="token number">2</span>. View和Model不会直接通信
  
  
<span class="token comment">### MVC</span>
  <span class="token number">1</span>. View 传送指令到 Controller
  <span class="token number">2</span>. Controller 完成业务逻辑后，要求 Model 改变状态
  <span class="token number">3</span>. Model 将新的数据发送到 View，用户得到反馈
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+e+'" alt="image-20201117235906290"></p><p><img src="'+p+'" alt="vue处理过程"></p><p><img src="'+l+`" alt="image-20230308184732048"></p></blockquote><h3 id="vue实现数据双向绑定原理" tabindex="-1"><a class="header-anchor" href="#vue实现数据双向绑定原理"><span>vue实现数据双向绑定原理</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## vue2 实现数据双向绑定的原理</span>
<span class="token number">1</span>. 监听器Observer：劫持并监听所有属性，对数据对象遍历<span class="token punctuation">(</span>包括子属性对象的属性<span class="token punctuation">)</span>，利用 <span class="token variable"><span class="token variable">\`</span>Object.definedProperty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span> 对属性加上 setter 和 getter 方法，当对象值增加或获取，就会触发。
<span class="token number">2</span>. 解析器Compile：解析 Vue 指令模板，将模板的变量替换为数据，然后初始渲染页面视图，并对每个指令节点绑定更新函数，添加监听数据的订阅者，当数据有变动，就会调动更新函数进行数据更新。
<span class="token number">3</span>. 订阅者Watcher：是监听器和解析器之间通信的桥梁，主要是订阅监听器中的属性值变化，当发生变化，就会触发解析器中对应的更新函数。
<span class="token number">4</span>. 订阅器Dep：订阅器采用 发布-订阅 模式，用来收集订阅者，对监听器进行统一管理。


<span class="token comment">### Vue2 的 Object.definedProperty 为什么不支持数组的响应式变化？</span>
Object.definedProperty 虽然可以实现这样的效果，但是 vue2 为了优化性能而不实现这样的功能。
因为如果不断地监听数组变化（可能数组存在深层次数据），就会消耗很多不必要的性能，所以在 vue2 中不做这样的实现。
而 vue3 可以监听到是因为 vue3 是通过 proxy 代理数据（当数据变动都会触发该proxy对象），而 vue2 是劫持数据。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+o+`" alt="image-20211102161402565"></p></blockquote><h3 id="vue的生命周期" tabindex="-1"><a class="header-anchor" href="#vue的生命周期"><span>Vue的生命周期</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## Vue2 的生命周期</span>
<span class="token comment">### 名词说明</span>
- 生命周期：从 vue 实例创建、运行到销毁期间，总是伴随各种事件，这些事件统称为生命周期。
					开始创建vue实例、初始化数据、编译模板、挂载DOM -<span class="token operator">&gt;</span> 渲染、更新 -<span class="token operator">&gt;</span> 渲染、销毁等一系列过程。
- 生命周期钩子 <span class="token operator">=</span> 生命周期函数 <span class="token operator">=</span> 生命周期事件 <span class="token operator">=</span> callbackHook<span class="token punctuation">(</span>回调钩子<span class="token punctuation">)</span>


<span class="token comment">### 创建期间的生命周期函数</span>
  <span class="token number">1</span>. beforeCreate：
      在实例初始化后，数据观测<span class="token punctuation">(</span>data observer<span class="token punctuation">)</span> 和 event/watcher 事件配置之前被调用。
      在当前阶段，data、methods、computed、watch 上的数据和方法都不能被访问。
  <span class="token number">2</span>. create：
      实例已经创建完成后被调用。
      此时实例已经完成数据观测<span class="token punctuation">(</span>data observer<span class="token punctuation">)</span>、属性和方法的运算、event/watcher 事件回调。
      此时没有 <span class="token variable"><span class="token variable">\`</span>$el<span class="token variable">\`</span></span><span class="token punctuation">(</span>还未进入浏览器 render 阶段<span class="token punctuation">)</span>，但可通过 vm.<span class="token variable">$nextTick</span> 来访问 DOM。
  <span class="token number">3</span>. beforeMount：
      在挂载开始之前被调用。
      此时已经完成模板的编译<span class="token punctuation">(</span>相关的 render 函数首次被调用<span class="token punctuation">)</span>，但是还没挂载到页面中。
  <span class="token number">4</span>. mounted：
      在挂载完成后被触发。
      此时真实 DOM 挂载完毕，数据完成双向绑定，可以访问到 DOM 节点。

<span class="token comment">### 运行期间的生命周期函数</span>
  <span class="token number">1</span>. beforeUpdate：
      数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁<span class="token punctuation">(</span>patch<span class="token punctuation">)</span> 之前。
      可以在这个钩子中进一步地更改状态，这不会触发附加的重新渲染过程。
  <span class="token number">2</span>. updated：
      发生在更新完成之后，当前阶段组件 DOM 已完成更新。
      注意1：要避免在此期间更改数据，因为这可能会导致无限循环的更新。
      注意2：该钩子在服务端渲染期间不被调用。

<span class="token comment">### 销毁期间的生命周期函数（vue实例一般不会销毁，一般组件会销毁）</span>
  <span class="token number">1</span>. beforeDestroy：
      实例销毁之前被调用。此时实例仍然可用。
      此时常用作善后收尾工作，如清除定时器。
  <span class="token number">2</span>. destroyed：
      Vue实例<span class="token punctuation">(</span>组件<span class="token punctuation">)</span>销毁之后调用。
      调用后，vue实例<span class="token punctuation">(</span>组件<span class="token punctuation">)</span>的所有东西都会解除绑定，所有的事件监听器都会被移除，所有的子实例也会被销毁。
      该钩子在服务端渲染期间不被调用。

  前者适合移除事件、定时器等，避免可能引起的内存泄露问题。
  然后进行销毁操作，如果有子组件，也会递归销毁子组件，所有子组件都销毁完毕后才会执行根组件的 destroyed 钩子函数。
  
  注意：关于销毁 vue 实例
    - 销毁后借助 vue 开发工具看不到任何消息。
    - 销毁后自定义会失效，但原生DOM事件依然有效（只是消除其绑定的模板、methods方法与钩子函数等）
    - 一般不会在 beforeDestroy 操作数据，因为即便可操作数据，也不会再触发数据更新流程。


<span class="token comment">### keep-alive 独有的生命周期函数</span>
<span class="token number">1</span>. activated：路由设置keep-alive时，该路由组件被激活时调用。
<span class="token number">2</span>. deactivated：路由设置keep-alive时，该路由组件被销毁时调用。
用 keep-alive 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 deactivated 钩子函数，命中缓存渲染后会执行 activated 钩子函数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="虚拟dom" tabindex="-1"><a class="header-anchor" href="#虚拟dom"><span>虚拟DOM</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 虚拟 DOM</span>
DOM（Document Object Model）渲染是很慢的，其元素非常庞大，页面的性能问题鲜有由 JS 引起的，大部分都是由 DOM 操作引起的。如果对前端工作进行抽象的话，主要是维护状态和更新视图，而更新视图和维护状态都需要 DOM 操作。
在 JQ 之前直接操作 DOM 结构，这种方法复杂度高，兼容性差；
JQ 强大的选择器以及高度封装的API 可以让我们更方便的操作 DOM，还能帮我们解决兼容性问题，同时也使得 DOM 操作变得简单；
MVVM使用数据双向绑定，使得我们完全不需要操作DOM，更新了状态视图会自动更新，更新了视图数据状态也会自动更新，可以说MMVM使得前端的开发效率大幅提升，但是其大量的事件绑定使得其在复杂场景下的执行性能堪忧。
Vue底层引入的 Virtual DOM<span class="token punctuation">(</span>虚拟DOM<span class="token punctuation">)</span> 在用 JS 对象表示 DOM 结构后，当页面状态发生变化而需要操作 DOM 时，可以先通过虚拟 DOM 计算出对真实 DOM 的最小修改量，然后再修改真实 DOM 结构<span class="token punctuation">(</span>因为真实DOM的操作代价太大<span class="token punctuation">)</span>。通过虚拟DOM计算出两颗真实DOM树之间的差异后，就可以修改真实的DOM结构。上文深度优先遍历过程产生了用于记录两棵树之间差异的数据结构patches, 通过使用patches我们可以方便对真实DOM做最小化的修改。


<span class="token comment">### 渲染一个列表时，设置 key 的目的是什么？</span>
使用 key 有助于虚拟 dom 识别哪些 items 进行修改<span class="token punctuation">(</span>增删改操作<span class="token punctuation">)</span>。
key 应该被赋予数组内的元素一个稳定的唯一字符串，该字符串能唯一地标识一个列表项。


<span class="token comment">## VNode实例对象的属性</span>
    tag: 当前节点的标签名
    data: 当前节点的数据对象，
    children: 数组类型，包含了当前节点的子节点
    text: 当前节点的文本，一般文本节点或注释节点会有该属性
    elm: 当前虚拟节点对应的真实的dom节点
    ns: 节点的namespace
    context: 编译作用域
    functionalContext: 函数化组件的作用域
    key: 节点的key属性，用于作为节点的标识，有利于patch的优化
    componentOptions: 创建组件实例时会用到的选项信息
    child: 当前节点对应的组件实例
    parent: 组件的占位节点
    raw: raw html
    isStatic: 静态节点的标识
    isRootInsert: 是否作为根节点插入，被<span class="token operator">&lt;</span>transition<span class="token operator">&gt;</span>包裹的节点，该属性的值为false
    isComment: 当前节点是否是注释节点
    isCloned: 当前节点是否为克隆节点
    isOnce: 当前节点是否有v-once指令

    VNode可以理解为vue框架的虚拟dom的基类，通过new实例化的VNode大致可以分为几类
    EmptyVNode: 没有内容的注释节点
    TextVNode: 文本节点
    ElementVNode: 普通元素节点
    ComponentVNode: 组件节点
    CloneVNode: 克隆节点，可以是以上任意类型的节点，唯一的区别在于isCloned属性为true


<span class="token comment">## patch原理</span>
    patch函数的定义在src/core/vdom/patch.js中，我们先来看下这个函数的逻辑
    patch函数接收6个参数：
    oldVnode: 旧的虚拟节点或旧的真实dom节点
    vnode: 新的虚拟节点
    hydrating: 是否要跟真实dom混合
    removeOnly: 特殊flag，用于<span class="token operator">&lt;</span>transition-group<span class="token operator">&gt;</span>组件
    parentElm: 父节点
    refElm: 新节点将插入到refElm之前


<span class="token comment">## patch的策略是：</span>
如果vnode不存在但是oldVnode存在，说明意图是要销毁老节点，那么就调用invokeDestroyHook<span class="token punctuation">(</span>oldVnode<span class="token punctuation">)</span>来进行销毁
如果oldVnode不存在但是vnode存在，说明意图是要创建新节点，那么就调用createElm来创建新节点
当vnode和oldVnode都存在时
如果oldVnode和vnode是同一个节点，就调用patchVnode来进行patch
当vnode和oldVnode不是同一个节点时，如果oldVnode是真实dom节点或hydrating设置为true，需要用hydrate函数将虚拟dom和真是dom进行映射，然后将oldVnode设置为对应的虚拟dom，找到oldVnode.elm的父节点，根据vnode创建一个真实dom节点并插入到该父节点中oldVnode.elm的位置
这里面值得一提的是patchVnode函数，因为真正的patch算法是由它来实现的（patchVnode中更新子节点的算法其实是在updateChildren函数中实现的，为了便于理解，我统一放到patchVnode中来解释）。


<span class="token comment">## patchVnode算法是：</span>
<span class="token number">1</span>. 如果oldVnode跟vnode完全一致，那么不需要做任何事情
<span class="token number">2</span>. 如果oldVnode跟vnode都是静态节点，且具有相同的key，当vnode是克隆节点或是v-once指令控制的节点时，只需要把oldVnode.elm和oldVnode.child都复制到vnode上，也不用再有其他操作
<span class="token number">3</span>. 否则，如果vnode不是文本节点或注释节点
<span class="token number">4</span>. - 如果oldVnode和vnode都有子节点，且两方的子节点不完全一致，就执行更新子节点的操作（这一部分其实是在updateChildren函数中实现），算法如下
   - - 分别获取oldVnode和vnode的firstChild、lastChild，赋值给oldStartVnode、oldEndVnode、newStartVnode、newEndVnode
     - 如果oldStartVnode和newStartVnode是同一节点，调用patchVnode进行patch，然后将oldStartVnode和newStartVnode都设置为下一个子节点，重复上述流程
     - 如果oldEndVnode和newEndVnode是同一节点，调用patchVnode进行patch，然后将oldEndVnode和newEndVnode都设置为上一个子节点，重复上述流程
     - 如果oldStartVnode和newEndVnode是同一节点，调用patchVnode进行patch，如果removeOnly是false，那么可以把oldStartVnode.elm移动到oldEndVnode.elm之后，然后把oldStartVnode设置为下一个节点，newEndVnode设置为上一个节点，重复上述流程
     - 如果newStartVnode和oldEndVnode是同一节点，调用patchVnode进行patch，如果removeOnly是false，那么可以把oldEndVnode.elm移动到oldStartVnode.elm之前，然后把newStartVnode设置为下一个节点，oldEndVnode设置为上一个节点，重复上述流程

- 如果以上都不匹配，就尝试在oldChildren中寻找跟newStartVnode具有相同key的节点，如果找不到相同key的节点，说明newStartVnode是一个新节点，就创建一个，然后把newStartVnode设置为下一个节点
- 如果上一步找到了跟newStartVnode相同key的节点，那么通过其他属性的比较来判断这2个节点是否是同一个节点，如果是，就调用patchVnode进行patch，如果removeOnly是false，就把newStartVnode.elm插入到oldStartVnode.elm之前，把newStartVnode设置为下一个节点，重复上述流程

<span class="token number">1</span>. - - 如果在oldChildren中没有寻找到newStartVnode的同一节点，那就创建一个新节点，把newStartVnode设置为下一个节点，重复上述流程
     - 如果oldStartVnode跟oldEndVnode重合了，并且newStartVnode跟newEndVnode也重合了，这个循环就结束了
   - 如果只有oldVnode有子节点，那就把这些节点都删除
   - 如果只有vnode有子节点，那就创建这些子节点
   - 如果oldVnode和vnode都没有子节点，但是oldVnode是文本节点或注释节点，就把vnode.elm的文本设置为空字符串
<span class="token number">2</span>. 如果vnode是文本节点或注释节点，但是vnode.text <span class="token operator">!=</span> oldVnode.text时，只需要更新vnode.elm的文本内容就可以


<span class="token comment">## 生命周期</span>
patch提供了5个生命周期钩子，分别是
- create: 创建patch时
- activate: 激活组件时
- update: 更新节点时
- remove: 移除节点时
- destroy: 销毁节点时


<span class="token comment">## vnode也提供了生命周期钩子，分别是</span>
- init: vdom初始化时
- create: vdom创建时
- prepatch: patch之前
- insert: vdom插入后
- update: vdom更新前
- postpatch: patch之后
- remove: vdom移除时
- destroy: vdom销毁时


<span class="token comment">## vue 组件的生命周期</span>
vue组件的生命周期底层其实就依赖于vnode的生命周期，在src/core/vdom/create-component.js中我们可以看到
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="diff算法" tabindex="-1"><a class="header-anchor" href="#diff算法"><span>Diff算法</span></a></h3><blockquote><ul><li><code>snabbdom</code> 是著名的<code>虚拟DOM</code>库，是 <code>diff</code> 算法的奠基者</li><li>虚拟DOM渲染：会比较跟之前元素是否有相同项，只重新渲染与之前元素的不同项</li></ul><p><img src="`+c+'" alt="image-20210910105541211"></p><ul><li><code>diff</code>算法是发生在 新旧<code>虚拟DOM</code>之上的，算出如何最小更新，最后反映到<code>真实DOM</code><ul><li>遍历旧虚拟DOM，遍历新虚拟DOM，比较不同，重新排序</li><li>只比较同一层级，不跨级比较虚拟DOM</li><li>先判断key值再判断标签名是否相同，都相同则认为是相同节点，不再继续深度比较</li></ul></li></ul><p><img src="'+i+`" alt="img"></p></blockquote><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h2><h3 id="插值" tabindex="-1"><a class="header-anchor" href="#插值"><span>插值</span></a></h3><blockquote><ul><li><p><strong>文本</strong></p><ul><li>数据绑定最常见的形式就是使用“Mustache”语法（双大括号）的文本插值</li><li>Mustache 标签将会被替代为对应数据对象上 <code>msg</code> property 的值。当绑定的数据对象上 <code>msg</code> property 发生改变，插值处的内容都会更新。</li><li>例：<code>&lt;span&gt;Message:{{ msg }}&lt;/span&gt;</code></li></ul></li><li><p><strong>v-once</strong></p><ul><li>通过使用<code>v-once</code>指令也能执行一次性地插值，当数据改变时，插值处的内容不会更新。但会影响到该节点上的其它数据绑定</li><li>例：<code>&lt;span v-once&gt;这个将不会改变: {{ msg }}&lt;/span&gt;</code></li></ul></li><li><p><strong>原始HTML <code>v-html</code></strong></p><ul><li>双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用 <code>v-html</code>指令</li><li><code>&lt;p&gt;{{ rawHtml }}&lt;/p&gt; &lt;span v-html=&quot;rawHtml&quot;&gt;&lt;/span&gt;</code></li></ul></li><li><p><strong>文本形式<code>v-text</code></strong></p><ul><li><code>&lt;p v-text=&quot;message&quot;&gt;v-text的内容，包括把标签一起输出来&lt;/p&gt;</code></li></ul></li><li><p>**不解析直接输出内容<code>v-pre</code> **</p><ul><li>（ pre 是 prevent的缩写，阻止解析）</li><li><code>&lt;p v-pre&gt;把{{ message }}直接输出&lt;/p&gt;</code></li></ul></li><li><p><strong>先解析再渲染<code>v-cloak</code></strong></p><ul><li><p>包含 v-cloak 属性的 html 标签在页面初始化时会被隐藏，</p></li><li><p>主要作用是防止当页面加载时，存在vue模板数据没加载到页面时触发(即防止页面中出现vue的变量名)，出现页面闪烁问题</p></li><li><p>注意：v-cloak要在样式中设置属性；若把<code>[v-cloak]</code>样式写在<code>@import style.css</code>的方式中，会出现页面闪烁问题，则我们可以改成link或内联样式的方式写入<code>[v-cloak]</code></p></li><li><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>// css
[v-cloak] { display:none }

<span class="token comment">&lt;!-- html --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">v-cloak</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in obj<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ obj.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-cloak</span><span class="token punctuation">&gt;</span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>msg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> 11 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>msg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> 11 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>v-cloak(斗篷)、v-text、v-html的区别</strong></p><ul><li><p>相同：都是等到页面解析完后，才会改变相应的数据，此三种指令都可以防止插值表达式的页面闪烁。</p></li><li><p>①：v-cloak：需要设置相应的样式才能防闪烁， 而v-text和v-html默认就没有闪烁问题；</p></li><li><p>②：在使用v-cloak的元素标签中添加其他的内容，渲染完页面后会被保留，而v-text和v-html如果在元素标签中填写其他，页面加载完成后，会被覆盖掉</p></li><li><p>③：v-html会识别数据中的标签元素，而v-cloak和v-text则不会识别元素标签</p></li></ul></li></ul></blockquote><h3 id="v-bind-缩写" tabindex="-1"><a class="header-anchor" href="#v-bind-缩写"><span>v-bind:（缩写<code>：</code>）</span></a></h3><ul><li>是Vue中绑定属性的指令，绑定data中的数据，因为普通的mustache语法无法达成绑定。</li></ul><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>按钮<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mytitle + &#39;123&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>按钮<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mytitle + &#39;123&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 上面两个式子等价  --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用v-bind绑定class样式" tabindex="-1"><a class="header-anchor" href="#使用v-bind绑定class样式"><span>使用v-bind绑定class样式</span></a></h4><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>//1、数组
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[&#39;red&#39;, &#39;thin&#39;]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>这是一个H1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>

//2、数组中使用三元表达式
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[&#39;red&#39;, &#39;thin&#39;, isactive?&#39;active&#39;:&#39;&#39;]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>这是一个H1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>

//3、数组中嵌套对象
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[&#39;red&#39;, &#39;thin&#39;, {&#39;active&#39;: isactive}]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>这是一个H1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>

//4、直接使用对象
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{red:true, italic:true, active:true, thin:true}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>这是一个H1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用v-bind绑定内联样式" tabindex="-1"><a class="header-anchor" href="#使用v-bind绑定内联样式"><span>使用v-bind绑定内联样式</span></a></h4><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>//1、直接在元素上通过 :style 的形式，书写样式对象
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>这是一个善良的H1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>

//2、将样式对象，定义到 data 中，并直接引用到 :style 中
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>h1StyleObj<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>这是一个H1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
data: {
        h1StyleObj: { color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;}
}

//3、在 :style 中通过数组，引用多个 data 上的样式对象
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[h1StyleObj, h1StyleObj2]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>这是一个H1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
data: {
        h1StyleObj: { color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;},
        h1StyleObj2: { fontStyle: &#39;italic&#39; }
}

//4、调用函数的样式
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>getStyles()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>这是一个H1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
data: {
       finalColor: &#39;red&#39;, 
       finalSize: 100
},
methods: {
	getStyles(){
		return {color: this.finalColor,fontSize: this.finalSize+&#39;px&#39;}
	}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="v-on-缩写" tabindex="-1"><a class="header-anchor" href="#v-on-缩写"><span>v-on:（缩写<code>@</code>）</span></a></h3><blockquote><ul><li>是Vue中绑定事件的指令，调用需在methods里设置触发事件（即绑定的是一个函数/方法）</li></ul><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>按钮<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stop<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>按钮<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stop<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="v-on的参数传递" tabindex="-1"><a class="header-anchor" href="#v-on的参数传递"><span>v-on的参数传递</span></a></h4><blockquote><ul><li>当v-on中不带参数时，可以省略小括号，但方法本身是需要一个参数的，此时vue会默认将浏览器生成的event事件对象作为参数传入到方法</li><li>手动获取到浏览器参数的event对象：<strong>$event</strong></li></ul><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>//html
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 事件调用方法不带参数 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>按钮1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn1()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>按钮2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 带一个参数 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn2(123)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>按钮3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn2()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>按钮4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>按钮5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 带两个参数 --&gt;</span>
    <span class="token comment">&lt;!-- 手动获取到浏览器参数的event对象：$event --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn3(123,$event)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>按钮6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>按钮7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 按钮1、2为空值；按钮3：123；按钮4：undefined；按钮5：event对象；按钮6、7:123，evnet对象 --&gt;</span>
//JS
const app = new Vue({ 
	el: &#39;#app&#39;,
	methods: {
		btn1(){ console.log(&quot;btn1&quot;); },
		btn2(event){ console.log(&quot;btn2———&quot;,event); },
		btn3(abc,event){ console.log(&quot;btn3——&quot;,abc,&quot;——&quot;,event); }
	}
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="v-on-绑定多个方法" tabindex="-1"><a class="header-anchor" href="#v-on-绑定多个方法"><span>v-on 绑定多个方法</span></a></h4><blockquote><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ click:dbClick, mousemove:MouseClick }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>绑定多个触发事件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>

	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>one(), two()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>绑定多个方法·<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="v-on事件修饰符" tabindex="-1"><a class="header-anchor" href="#v-on事件修饰符"><span><code>v-on</code>事件修饰符</span></a></h3><blockquote><ul><li>.stop：阻止事件冒泡（不再循环触发，也不在子代触发）</li><li>.prevent：阻止默认事件行为（如a标签的跳转，表单的跳转）</li><li>.capture：实现捕获事件的触发机制（从最外层标签到内层标签逐层触发）</li><li>.self：只当事件在该元素本身（如不是子元素）触发时触发回调</li><li>.once：事件只触发一次</li><li>.<code>{keyCode|keyAias} </code>：只当事件是从特定键触发时才触发回调</li><li>native：监听组件根元素的原生事件**（组件是不能点击的，必须加上<code>.native</code>，否则会认为监听的是来自Item组件自定义的事件）**</li></ul><blockquote><p>.stop与.once的区别：.self只会阻止自身的冒泡行为触发，并不会真正组织冒泡</p></blockquote><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doThis<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 提交事件不再重载页面 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">@submit.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onSubmit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 修饰符可以串联 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">@click.stop.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doThat<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 只有修饰符 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">@submit.prevent</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span>
<span class="token comment">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click.capture</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doThis<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span>
<span class="token comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click.self</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doThat<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 点击事件将只会触发一次 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">@click.once</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doThis<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 点击事件监听键帽（点击enter键触发事件） --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>keyup<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

//1、 给vue组件绑定事件时，必须加上native ，否则会认为监听的是来自Item组件自定义的事件
//2、 等同在子组件中：子组件内部处理click事件然后向外发送click事件：$emit(&quot;click&quot;.fn)
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Item</span> <span class="token attr-name">@click.native</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">&quot;</span>shijian()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Item</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="数据双向绑定v-model" tabindex="-1"><a class="header-anchor" href="#数据双向绑定v-model"><span>数据双向绑定<code>v-model</code></span></a></h3><ul><li><p>v-bind只能实现数据的单向绑定，只能从M自动绑定到V，无法实现数据双向绑定</p></li><li><p>表单元素：<code>input（text、radio、address、email….）、select、checkbox、textarea</code></p></li><li><p><code>v-model</code> 在内部为不同的输入元素使用不同的 property 并抛出不同的事件</p><ul><li>text 和 textarea 元素使用 <code>value</code> property 和 <code>input</code> 事件；</li><li>checkbox 和 radio 使用 <code>checked</code> property 和 <code>change</code> 事件；</li><li>select 字段将 <code>value</code> 作为 prop 并将 <code>change</code> 作为事件。</li></ul></li></ul><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- &lt;input :value=&quot;test&quot; @input=&quot;test = $event.target.value&quot;&gt; --&gt;</span><span class="token comment">&lt;!--语法糖，等价于v-modl=&#39;test&#39;--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    	<span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>
    	<span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        	<span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token string">&#39;这是一个测试&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>//select选择多个(需要按住ctrl键选择)
//html
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>abc<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fruit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>苹果<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>苹果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>香蕉<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>香蕉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{fruit}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

//vue
const app = new Vue({ 
    el: &#39;#app&#39;,
    data: {
    	fruit: []
    }
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html+vue line-numbers-mode" data-ext="html+vue" data-title="html+vue"><pre class="language-html+vue"><code>//HTML
&lt;div id=&quot;app&quot;&gt;
&lt;!-- checkbox多选框 --&gt;
    &lt;input type=&quot;checkbox&quot; value=&quot;篮球&quot; v-model=&quot;hobbies&quot;&gt;篮球
    &lt;input type=&quot;checkbox&quot; value=&quot;足球&quot; v-model=&quot;hobbies&quot;&gt;足球
    &lt;input type=&quot;checkbox&quot; value=&quot;乒乓球&quot; v-model=&quot;hobbies&quot;&gt;乒乓球
    &lt;p&gt;您的爱好是：{{hobbies}}&lt;/p&gt;

    &lt;label v-for=&quot;item in originHobbies&quot; :for=&quot;item&quot;&gt;
        &lt;input type=&quot;checkbox&quot; :value=&quot;item&quot; :id=&quot;item&quot; v-model=&quot;hobbies&quot;&gt;{{item}}
    &lt;/label&gt;
&lt;/div&gt;

//VUE
const app = new Vue({ 
    el: &#39;#app&#39;,
    data: {
    	hobbies: [&#39;篮球&#39;],	//多选框，默认为篮球
    	originHobbies: [&#39;篮球&#39;,&#39;足球&#39;,&#39;乒乓球&#39;,&#39;羽毛球&#39;,&#39;台球&#39;,&#39;高尔夫球&#39;]
    }
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>修饰符</strong></p><p>v-model默认是在input事件中同步输入框的数据，即一旦数据发生改变对应的data中数据自动改变。</p><ul><li>lazy修饰符：使数据失去焦点或回车才会更新</li><li>number修饰符：将输入的数字转换为Number 类型 输入框中无论输入的是字母还是数字，都会被当做字符串string 处理(数字输入框比较有用)</li><li>trim修饰符：自动过滤输入的首尾空格 如果输入内容首尾很多空格，通常我们希望将其去除(内容中间的空格无法去掉)</li></ul><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model.lazy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>number<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model.trim</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>.sync修饰符</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 父组件给子组件传入一个函数</span>
<span class="token operator">&lt;</span>MyFooter <span class="token operator">:</span>age<span class="token operator">=</span><span class="token string">&quot;age&quot;</span> @setAge<span class="token operator">=</span><span class="token string">&quot;(res)=&gt; age = res&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>MyFooter<span class="token operator">&gt;</span>

<span class="token comment">// 子组件通过调用这个函数来实现修改父组件的状态</span>
<span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;setAge&#39;</span><span class="token punctuation">,</span> <span class="token number">1234567</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 父组件将age传给子组件并使用.sync修饰符</span>
<span class="token operator">&lt;</span>MyFooter <span class="token operator">:</span>age<span class="token punctuation">.</span>sync<span class="token operator">=</span><span class="token string">&quot;age&quot;</span><span class="token operator">&gt;</span>

<span class="token comment">// 子组件触发事件</span>
<span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;update:age&#39;</span><span class="token punctuation">,</span> <span class="token number">1234567</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>需要注意，事件名称被换为<code>update:age</code><ul><li>update：是被固定的，即vue为我们约定好的名称部分</li><li>age是我们要修改的状态名称，是我们手动配置的，与传入的状态名字对应起来</li><li>我们必须在事件执行名称前加上<code>update:</code>的前缀才能正确触发事件</li></ul></li></ul></blockquote><h3 id="循环v-for和key属性" tabindex="-1"><a class="header-anchor" href="#循环v-for和key属性"><span>循环<code>v-for和key属性</code></span></a></h3><blockquote><h4 id="迭代-数组、对象属性、数字" tabindex="-1"><a class="header-anchor" href="#迭代-数组、对象属性、数字"><span>迭代（数组、对象属性、数字）</span></a></h4><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>//1、迭代数组
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(item,i) in list<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>索引：{{i}}---值：{{item.name}}{{item.age}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>

//2、迭代对象中的属性 //循环遍历对象身上的属性
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(val,key,i) in info<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{val}}---{{key}}---{{i}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    
//3、迭代数字
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>i in 10<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>这是第 {{i}} 个P标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当 vue用<code>v-for</code>正在更新已渲染过的元素列表时默认用<strong>就地复用</strong>策略。如果数据项的顺序被改变，Vue<strong>不是移动 DOM 元素来匹配数据项的顺序</strong>， 而是<strong>简单复用此处每个元素</strong>，并且确保它在特定索引下显示已被渲染过的每个元素。</li><li>为了给 Vue 一个提示，<strong>以便它能跟踪每个节点的身份，从而重用和重新排序现有元素</strong>，需要为每项提供一个唯一 <strong>key</strong> 属性。</li><li>key的作用主要是为了高效地的更新虚拟DOM。</li></ul><h4 id="key值绑定的问题描述" tabindex="-1"><a class="header-anchor" href="#key值绑定的问题描述"><span>key值绑定的问题描述</span></a></h4><ul><li>注意：如果循环的的是一个如<code>[1, 2, 3]</code>，并且绑定的key值为value值，且给其内置绑定的是输入框可改变值，则每次输入内容都会失去焦点。</li><li>这是因为每次输入值，其都会使得重新渲染标签，即之前所绑定的标签，虚拟DOM认为已经被删除，且添加了一个新的标签内容进来</li></ul><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 错误的绑定方法，每次在输入框中输入值，都会使得输入框失去焦点 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(val, index) in arr<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>val<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>val<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(val, index) in arr<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>index<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>val<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="vue循环赋值" tabindex="-1"><a class="header-anchor" href="#vue循环赋值"><span>vue循环赋值</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>purdetailData<span class="token punctuation">.</span>itemList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>IIType <span class="token operator">==</span> <span class="token string">&quot;尺寸类&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>dataResource <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> i<span class="token punctuation">.</span>detailList<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//浅拷贝</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>dataResource <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>i<span class="token punctuation">.</span>detailList<span class="token punctuation">]</span><span class="token punctuation">;</span>	<span class="token comment">// 三点运算符，算是深拷贝</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> newArr <span class="token operator">=</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>purdetailData<span class="token punctuation">.</span>itemList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>	<span class="token comment">// 过滤</span>
    <span class="token keyword">return</span> item<span class="token punctuation">.</span>IIType <span class="token operator">==</span> <span class="token string">&quot;尺寸类&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h3><ul><li><strong>splice()</strong>：从数组中添加/删除u项目，然后返回被删除的项目（返回数组，且会改变原数组）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>arrayObject<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>howmany<span class="token punctuation">,</span>item1<span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>itemX<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//index	必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</span>
<span class="token comment">//howmany	要删除的项目数量。如果设置为 0，则不会删除</span>
<span class="token comment">//item1, ..., itemX	可选。向数组添加的新项目。</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除第一个参数后面的所有参数</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除第一个参数的三个参数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>push()</strong>：添加元素到最后面 //this.array1.push(&#39;abc&#39;);</p></li><li><p><strong>pop()</strong>：删除最前面的元素 //this.array1.pop();</p></li><li><p><strong>shift()</strong>：删除数组第一个元素 //this.array1.shirt();</p></li><li><p><strong>unshift</strong>：在数组最前面添加元素 //this.array1.unshirt(&#39;aaa&#39;,&#39;bbb&#39;,&#39;ccc&#39;);</p></li><li><p>**sort()：**排序。</p></li><li><p>**reverse()：**对字符串进行反转操作。</p></li><li><p><strong>Number.toFixed(num)</strong>：定义num位小数位数（需要是数字型）</p></li><li><p><strong>padStart(maxLength,fillString=&#39; &#39;)</strong>：用于头部补全，补充字符串</p></li><li><p><strong>padEnd(maxLength,fillString=&#39;)</strong>：用来尾部补全，填充字符串</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//超出会自动补全，差一点则截取到最大长度</span>
<span class="token string">&#39;AA&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span>  <span class="token comment">//输出：BBBAA</span>
<span class="token string">&#39;AA&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;BC&#39;</span><span class="token punctuation">)</span>  <span class="token comment">//输出：BCBAA</span>

<span class="token string">&#39;AA&#39;</span><span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span> <span class="token comment">//输出：AABBB</span>
<span class="token string">&#39;AA&#39;</span><span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;BC&#39;</span><span class="token punctuation">)</span> <span class="token comment">//输出：AABCB</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="v-if" tabindex="-1"><a class="header-anchor" href="#v-if"><span>v-if</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>//当isName=true时显示
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>score&gt;=90<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>优秀<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>score&gt;=80<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>良好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>score&gt;=60<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>及格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>score&lt;60<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>不及格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>v-if 和 v-show</strong></p><ul><li><p>v-if（不存在DOM中--&gt;有较高的切换性能消耗）和v-show（通过CSS样式隐藏--&gt;有较高的初始渲染消耗）</p></li><li><p>两者区别：</p><p>v-if按照条件是否渲染（v-if每次都会重新删除或创建元素）</p><p>v-show是dispkay的bloak或none（v-show每次都不会重新进行DOM的删除和创建操作，只会切换了元素的display:none;样式）</p></li><li><p>推荐使用场景</p><p>如果涉及到频繁的切换，使用v-show</p><p>如果元素可能永远也不会被显示出来被用户看到，则推荐使用v-if</p></li></ul><h3 id="vue中this的必要性" tabindex="-1"><a class="header-anchor" href="#vue中this的必要性"><span>vue中this的必要性</span></a></h3><ul><li><strong>在VM实例中，如果要访问data上的数据，或者访问methods中的方法，必须带this</strong></li></ul><h3 id="计算属性computed" tabindex="-1"><a class="header-anchor" href="#计算属性computed"><span>计算属性<code>computed</code></span></a></h3><ul><li><p><strong>computed 适合多个数据变化影响一个数据（得到的是一个返回的新值）</strong></p></li><li><p>计算属性是由data中的已知值，得到的一个新值。 这个新值只会根据已知值的变化而变化，其他不相关的数据的变化不会影响该新值。 计算属性不在data中，计算属性新值的相关已知值在data中。</p></li><li><p>支持缓存，只有依赖数据发生改变，才会重新进行计算</p></li><li><p>不支持异步，当computed内有异步操作时无效，无法监听数据的变化</p></li><li><p>若computed属性值是函数，默认会用get方法；函数的返回值就是属性的属性值；在computed中的属性都有一个get和set方法，当数据变化时，调用set方法。（计算属性一般没有set方法，只读属性）</p></li><li><p><code>computed</code>计算时只执行调用一次，而methods每次运行都需要执行调用（因为<code>computed</code>拥有自己的缓存机制）</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//在html里要当作属性来使用，所以调用计算属性不需要加括号</span>
<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;demo&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> fullName <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>

<span class="token comment">//js</span>
<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#demo&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;Foo&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&#39;Bar&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
	<span class="token comment">/* fullName:{
      // get和set方法
      set:function(newValue){
        const names = newValue.split(&#39; &#39;);
        this.firstName=names[0];
        this.lastName=names[1];
      },
      get:function(){
        return this.firstName+&#39; &#39;+this.lastName
      }
    } */</span>
    <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="侦听属性watch" tabindex="-1"><a class="header-anchor" href="#侦听属性watch"><span>侦听属性<code>watch</code></span></a></h3><ul><li><strong>watch 适合一个数据的变动影响多个数据或者复杂的运算（当data中所监听的数据发生变动时，才会执行）</strong></li><li><strong>watch的作用可以监控一个值（必须存在<code>data</code>中）的变换，并调用因为变化需要执行的方法。可以通过watch动态改变关联的状态。</strong></li><li>不支持缓存，监听的数据改变，直接会触发相应的操作；</li><li>watch支持异步；</li><li>监听的函数接收两个参数，第一个参数是最新值，第二个参数是输入之前的值； 当一个属性发生变化时，需要执行对应的操作；一对多；</li><li>监听数据必须是data中声明过或者父组件传递过来的props中的数据，当数据变化时，触发其他操作，函数有两个参数， <ul><li>immediate：立即监听，</li><li>deep: 深度监听，为了发现<strong>对象内部值</strong>的变化，复杂类型的数据时使用，如数组中的对象内容的改变(监听数组的变动不需要) 注意：deep无法监听到数组的变动和对象的新增，参考vue数组变异,只有以响应式的方式触发才会被监听到。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token punctuation">{</span>
      <span class="token literal-property property">c</span><span class="token operator">:</span><span class="token number">1</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">watch</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token function">a</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//普通的watch监听</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;a: &quot;</span><span class="token operator">+</span>val<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token comment">//深度监听，可监听到对象、数组的变化</span>
        <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;b.c: &quot;</span><span class="token operator">+</span>val<span class="token punctuation">.</span>c<span class="token punctuation">,</span> oldVal<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token literal-property property">deep</span><span class="token operator">:</span><span class="token boolean">true</span> <span class="token comment">//true 深度监听</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="template标签" tabindex="-1"><a class="header-anchor" href="#template标签"><span>template标签</span></a></h3><ul><li><p>H5中的template <strong>html中的template标签中的内容在页面中不会显示</strong>，但是在后台查看页面DOM结构存在template标签。（因为template标签设置了<code>display:none;</code>属性）</p></li><li><p>vue实例中的template属性 将实例中template属性值进行编译，并将编译后的dom替换掉vue实例绑定的元素，如果该vue实例绑定的元素中存在内容，这些内容会直接被覆盖。</p></li><li><p>循环遍历 template的作用是占位符，可帮助我们包裹元素，但在循环的过程中，template不会被渲染到页面上。</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(item, index) in list<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{item.text}}--{{index}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{item.text}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="scoped属性" tabindex="-1"><a class="header-anchor" href="#scoped属性"><span>scoped属性</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## scoped 属性</span>
- scoped 代表作用域。
- 在 <span class="token variable"><span class="token variable">\`</span><span class="token operator">&lt;</span>style scoped<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/stype<span class="token operator">&gt;</span><span class="token variable">\`</span></span> 中添加scope属性，该style中的css样式只会针对当前组件起效果；若不添加，其他组件中的css样式相同样式，会在该组件中其效果。


<span class="token comment">### scoped 的原理</span>
vue中的 scoped 通过在DOM结构以及css样式上加唯一不重复的标记:data-v-hash的方式，以保证唯一（而这个工作是由过PostCSS转译实现的），达到样式私有化模块化的目的。
PostCSS会给一个组件中的所有dom添加了一个独一无二的动态属性data-v-xxxx，然后，给CSS选择器额外添加一个对应的属性选择器来选择该组件中dom，这种做法使得样式只作用于含有该属性的dom——组件内部dom, 从而达到了<span class="token string">&#39;样式模块化&#39;</span>的效果。


<span class="token comment">### scoped 渲染规则</span>
<span class="token number">1</span>. 给HTML的DOM节点加一个不重复data属性<span class="token punctuation">(</span>形如：data-v-123<span class="token punctuation">)</span>来表示他的唯一性
<span class="token number">2</span>. 在每句css选择器的末尾（编译后的生成的css语句）加一个当前组件的data属性选择器（如<span class="token punctuation">[</span>data-v-123<span class="token punctuation">]</span>）来私有化样式
<span class="token number">3</span>. 如果组件内部包含有其他组件，只会给其他组件的最外层标签加上当前组件的data属性
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="深度修改样式-deep-或" tabindex="-1"><a class="header-anchor" href="#深度修改样式-deep-或"><span>深度修改样式<code>/deep/</code>或<code>&gt;&gt;&gt;</code></span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 样式穿透：深度修改样式 /deep 或 &gt;&gt;&gt;</span>
- 使用scoped后，父组件的样式将不会渗透到子组件中；但一个子组件的根节点会同时受其父组件scoped CSS和子组件的scoped CSS的影响。
- 如果希望scoped样式中的一个选择器能够作用得更深（如影响子组件），可以使用<span class="token variable"><span class="token variable">\`</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token variable">\`</span></span>操作符。
- 如Sass之类的预处理无法正确解析<span class="token variable"><span class="token variable">\`</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token variable">\`</span></span>，这种情况下可以使用<span class="token variable"><span class="token variable">\`</span>/deep/<span class="token variable">\`</span></span>或<span class="token variable"><span class="token variable">\`</span>:v-deeep<span class="token variable">\`</span></span>操作符取而代之（两者都是<span class="token variable"><span class="token variable">\`</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token variable">\`</span></span>的别名）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">.a &gt;&gt;&gt; .b</span> <span class="token punctuation">{</span> <span class="token comment">/* css样式 */</span> <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>

//会编译成如下:
.a[data-v-f3f3eg9] .b { /* css样式 */ }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="动画" tabindex="-1"><a class="header-anchor" href="#动画"><span>动画</span></a></h3><p>动画进入：</p><ul><li>v-enter：动画进入之前的<strong>初始</strong>状态，动画还没开始（是时间点）</li><li>v-enter-to：动画进入之后的<strong>结束</strong>状态，此时动画已经结束（时间点）</li><li>v-enter-active：动画进入的时间段</li></ul><p>动画离开：</p><ul><li>v-leave：动画离开之前的<strong>初始</strong>状态（时间点）</li><li>v-leave-to：动画离开之后的<strong>结束</strong>状态（时间点）</li><li>v-leave-active：动画离开的时间段</li></ul><p><img src="`+u+`" alt="image-20210917102119532"></p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">&lt;style&gt;
  .v-enter,
  .v-leave-to</span> <span class="token punctuation">{</span>
    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>80px<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* smyhvae提示：v-enter表示，一开始让DOM元素处于靠右80px的位置 */</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.v-enter-active,
  .v-leave-active</span> <span class="token punctuation">{</span>
    <span class="token property">transition</span><span class="token punctuation">:</span> all 1s ease<span class="token punctuation">;</span>
    <span class="token comment">/*期间，设置过渡的属性：all表示所有的属性、时间为1秒、过渡的状态*/</span>
  <span class="token punctuation">}</span>
&lt;/style&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自定义动画" tabindex="-1"><a class="header-anchor" href="#自定义动画"><span>自定义动画</span></a></h4><ul><li>通过修改过渡类名的前缀来把两个DOM元素的动画进行分开定义</li><li>注意：<code>enter-active-class</code>和<code>leave-active-class</code>这两个类名是Vue动画里的关键词</li><li>给出/入场动画设置持续的时间，可以使用<code>:duration</code></li><li>注意：在实现列表过渡的时候，如果需要过渡的元素，是通过 v-for 循环渲染出来的，不能使用 transition 包裹，需要使用 transitionGroup <ul><li>给 transition-group 添加 appear 属性，实现页面刚展示出来时候，入场时候的效果</li><li>通过 为 transition-group 元素，设置 tag 属性，指定 transition-group 渲染为指定的元素，如果不指定 tag 属性，默认，渲染为 span 标签</li></ul></li></ul><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>// html
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my<span class="token punctuation">&quot;</span></span> <span class="token attr-name">enter-active-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>animated bounceIn<span class="token punctuation">&quot;</span></span> <span class="token attr-name">leave-active-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>animated bounceOut<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:duration</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ enter: 1000, leave: 300 }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flag2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>这是一个H6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">&gt;</span></span>

// css
.my-enter,
.my-leave-to {
  opacity: 0;
  transform: translateY(70px);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>动画的生命周期函数</strong></p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span>
  <span class="token attr-name"><span class="token namespace">v-on:</span>before-enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>beforeEnter<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name"><span class="token namespace">v-on:</span>enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>enter<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name"><span class="token namespace">v-on:</span>after-enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>afterEnter<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name"><span class="token namespace">v-on:</span>enter-cancelled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>enterCancelled<span class="token punctuation">&quot;</span></span>

  <span class="token attr-name"><span class="token namespace">v-on:</span>before-leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>beforeLeave<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name"><span class="token namespace">v-on:</span>leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>leave<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name"><span class="token namespace">v-on:</span>after-leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>afterLeave<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name"><span class="token namespace">v-on:</span>leave-cancelled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>leaveCancelled<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- DOM元素 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>transition-grop</strong></p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition-group</span> <span class="token attr-name">appear</span>  <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ul<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(item, i) in list<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>del(i)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    {{item.id}} --- {{item.name}}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition-group</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="过滤器" tabindex="-1"><a class="header-anchor" href="#过滤器"><span>过滤器</span></a></h3><ul><li>过滤器可用两个地方：mustache插值和v-bind表达式，过滤器应添加在JS表达式的尾部，有“管道”符表示。</li><li><code>Vue.filter(&#39;过滤器名称&#39;,function(data){return data;})</code>：过滤器中function的第一个参数data永远都是过滤器管道符前面传递来的数据</li></ul><h4 id="私有过滤器" tabindex="-1"><a class="header-anchor" href="#私有过滤器"><span>私有过滤器</span></a></h4><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>{{item.ctime | dataFormat(&#39;yyyy-mm-dd&#39;)}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>

filters: { // 私有局部过滤器，只能在当前VM对象所控制的 View 区域使用
    dataFormat(input, pattern = &quot;&quot;) { // 在参数列表中通过 pattern=&quot;&quot; 来指定形参默认值，防止报错
      var dt = new Date(input);
      // 获取年月日
      var y = dt.getFullYear();
      var m = (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;);
      var d = dt.getDate().toString().padStart(2, &#39;0&#39;);
      
      // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日
      // 否则，就返回  年-月-日 时：分：秒
      if (pattern.toLowerCase() === &#39;yyyy-mm-dd&#39;) {return \`\${y}-\${m}-\${d}\`;
      } else { // 获取时分秒
        var hh = dt.getHours().toString().padStart(2, &#39;0&#39;);
        var mm = dt.getMinutes().toString().padStart(2, &#39;0&#39;);
        var ss = dt.getSeconds().toString().padStart(2, &#39;0&#39;);
        return \`\${y}-\${m}-\${d} \${hh}:\${mm}:\${ss}\`;
      }
    }
  }

/* 使用ES6中的字符串新方法 
String.prototype.padStart(maxLength, fillString=&#39;&#39;)
String.prototype.padEnd(maxLength, fillString=&#39;&#39;)
来填充字符串； */
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="全局过滤器" tabindex="-1"><a class="header-anchor" href="#全局过滤器"><span>全局过滤器</span></a></h4><blockquote><p>注意：局部过滤器优先于全局过滤器被调用 当有局部和全局两个名称相同的过滤器时，会以就近原则进行调用</p></blockquote><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>// 定义一个全局过滤器
Vue.filter(&#39;dataFormat&#39;, function (input, pattern = &#39;&#39;) {
  var dt = new Date(input);
  // 获取年月日
  var y = dt.getFullYear();
  var m = (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;);
  var d = dt.getDate().toString().padStart(2, &#39;0&#39;);

  // 如果传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日;否则，就返回  年-月-日 时：分：秒
  if (pattern.toLowerCase() === &#39;yyyy-mm-dd&#39;)  {return \`\${y}-\${m}-\${d}\`;
  } else { // 获取时分秒
    var hh = dt.getHours().toString().padStart(2, &#39;0&#39;);
    var mm = dt.getMinutes().toString().padStart(2, &#39;0&#39;);
    var ss = dt.getSeconds().toString().padStart(2, &#39;0&#39;);
    return \`\${y}-\${m}-\${d} \${hh}:\${mm}:\${ss}\`;
  }
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html+vue line-numbers-mode" data-ext="html+vue" data-title="html+vue"><pre class="language-html+vue"><code>&lt;div id=&quot;app&quot;&gt;
    &lt;p&gt;{{ msg | msgFormat(&#39;疯狂&#39;,&#39;123&#39;) }}&lt;/p&gt;
&lt;/div&gt;

//js
Vue.filter(&#39;msgFormat&#39;,function(msg, arg, arg2){
	return msg.replace(/单纯/g,arg + arg2)

})
var vm = new Vue({
	el: &#39;#app&#39;,
	data: {
		msg: &#39;曾经，我也是一个单纯的少年，单纯的我，傻傻的问谁是世界上最单纯的男人&#39;
	}
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="组件" tabindex="-1"><a class="header-anchor" href="#组件"><span>组件</span></a></h2><h3 id="全局组件与局部组件" tabindex="-1"><a class="header-anchor" href="#全局组件与局部组件"><span>全局组件与局部组件</span></a></h3><blockquote><div class="language-html+vue line-numbers-mode" data-ext="html+vue" data-title="html+vue"><pre class="language-html+vue"><code>&lt;div id=&quot;app&quot;&gt;
	&lt;cpn&gt;&lt;/cpn&gt;
&lt;/div&gt;

//全局组件
//创建组件构造器对象
const cpnC = Vue.extend({
	template:\`&lt;div&gt;&lt;h2&gt;标题&lt;/h2&gt;&lt;p&gt;内容&lt;/p&gt;&lt;div&gt;\`
})
//注册组件
Vue.component(&#39;cpn&#39;,cpnC);	//cpn为使用时的标签名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html+vue line-numbers-mode" data-ext="html+vue" data-title="html+vue"><pre class="language-html+vue"><code>//局部组件(可以在创建组件中调用其他组件标签，template里的\`\`是tab键上面那个)
//HTML
&lt;div id=&quot;app&quot;&gt;
	&lt;cpn&gt;&lt;/cpn&gt;
&lt;/div&gt;

//js
const cpnC1 = Vue.extend({	//子组件
	template: \`
		&lt;div&gt;
			&lt;h2&gt;标题1&lt;/h2&gt;
			&lt;p&gt;内容1&lt;/p&gt;
		&lt;div&gt;
	\`
})
const cpnC2 = Vue.extend({	//父组件
	template: \`
		&lt;div&gt;
			&lt;h2&gt;标题2&lt;/h2&gt;
			&lt;p&gt;内容2&lt;/p&gt;
			&lt;cpn1&gt;&lt;/cpn1&gt; &lt;!-- 调用cpnC1组件的内容 --&gt;
		&lt;div&gt;
	\`,
	components: {	//cpnC1的调用只能在cpnC2中使用
		cpn1: cpnC1
	}
})
const VM = new Vue({
	el: &#39;#app&#39;,
	components: {	//root组件
     cpn: cpnC2
 }
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="组件注册的语法糖" tabindex="-1"><a class="header-anchor" href="#组件注册的语法糖"><span>组件注册的语法糖</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//全局组件语法糖</span>
Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;cpn1&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
	<span class="token literal-property property">template</span><span class="token operator">:</span> 
		<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;
			&lt;h2&gt;标题1&lt;/h2&gt;
			&lt;p&gt;内容1&lt;/p&gt;
		&lt;div&gt;</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//局部组件语法糖</span>
<span class="token keyword">const</span> <span class="token constant">VM</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
     <span class="token string-property property">&#39;cpn2&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
     	<span class="token literal-property property">template</span><span class="token operator">:</span> 
         <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;
          &lt;h2&gt;标题2&lt;/h2&gt;
          &lt;p&gt;内容2&lt;/p&gt;
        &lt;div&gt;</span><span class="token template-punctuation string">\`</span></span>
     <span class="token punctuation">}</span>        
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>组件优化</strong></p><div class="language-html+vue line-numbers-mode" data-ext="html+vue" data-title="html+vue"><pre class="language-html+vue"><code>//HTML
&lt;div id=&quot;app&quot;&gt;
 &lt;cpn&gt;&lt;/cpn&gt;
 &lt;cpn1&gt;&lt;/cpn1&gt;
&lt;/div&gt;
&lt;!-- 1.通过template标签 --&gt;
&lt;template id=&quot;cpnC1&quot;&gt;
 &lt;div&gt;
     &lt;h2&gt;标题1&lt;/h2&gt;
     &lt;p&gt;内容1&lt;/p&gt;
 &lt;div&gt;
&lt;/template&gt;

&lt;!-- 2.通过script标签，但是类型必须为text/x-template --&gt;
&lt;script type=&quot;text/x-template&quot; id=&quot;myCpn&quot;&gt;
 &lt;div&gt;
     &lt;h2&gt;标题1&lt;/h2&gt;
     &lt;p&gt;内容1&lt;/p&gt;
 &lt;div&gt;
&lt;/script&gt;

//JS
Vue.component(&#39;cpn1&#39;,{
	template: &#39;#cpnC1&#39;
})
const VM = new Vue({
 el: &#39;#app&#39;,
 components: {
     &#39;cpn&#39;: {
     	template: &#39;#myCpn&#39;
     }
 }
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="组件data" tabindex="-1"><a class="header-anchor" href="#组件data"><span>组件data</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 组件的 data 属性</span>
- 组件的 data 不能是对象的原因：
		vue组件中 data 值不能为对象，因为对象是引用类型，组件可能会被多个实例同时引用。
		如果 data 值为对象，将导致多个实例共享一个对象，其中一个组件改变 data 属性值，其它实例也会受到影响。

- data 为函数的原因：
		data 为函数，通过 <span class="token builtin class-name">return</span> 返回对象的拷贝，致使每个实例都有自己独立的对象，实例之间可以互不影响地改变 data 的属性值。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>//HTML
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cpnC1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{content}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

//js
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;cpn&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;#cpnC1&#39;</span><span class="token punctuation">,</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">{</span>
        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;我是标题&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;我是内容&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="组件name的作用" tabindex="-1"><a class="header-anchor" href="#组件name的作用"><span>组件name的作用</span></a></h3><blockquote><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>组件命名为detail,其中dom加载完毕后,在钩子函数mounted中进行数据加载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Details&#39;</span><span class="token punctuation">,</span>
	<span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 请求加载数据</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 通过接口请求数据。。。</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="作用一-当项目使用keep-alive时-可搭配组件name进行缓存过滤。" tabindex="-1"><a class="header-anchor" href="#作用一-当项目使用keep-alive时-可搭配组件name进行缓存过滤。"><span>作用一：当项目使用<code>keep-alive</code>时，可搭配组件<code>name</code>进行缓存过滤。</span></a></h4><ul><li><p>因为使用<code>keep-alive</code>会导致我们第二次进入时页面不会重新请求，即触发<code>mounted</code>函数。 有两种解决方案，一是增加<code>activated()</code>函数，每次进入新页面时再获取一次数据。 二是在<code>keep-alive</code>中增加一个过滤。</p></li><li><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">exclude</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Details<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">/&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="作用二-dom做递归组件时" tabindex="-1"><a class="header-anchor" href="#作用二-dom做递归组件时"><span>作用二：DOM做递归组件时</span></a></h4><ul><li>比如说detail.vue组件里有个List.vue子组件，递归迭代时需要调用自身name</li></ul><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(item,index) of list<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>index<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item-title-icon<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
      {{item.title}}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.children<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>detail-list</span> <span class="token attr-name">:list</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.children<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>detail-list</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;DetailList&#39;</span><span class="token punctuation">,</span><span class="token comment">//递归组件是指组件自身调用自身</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">{</span>
      <span class="token literal-property property">list</span><span class="token operator">:</span>Array
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="作用三-当你用vue-tools时-vue-devtools调试工具里显示的组见名称是由vue中组件name决定的" tabindex="-1"><a class="header-anchor" href="#作用三-当你用vue-tools时-vue-devtools调试工具里显示的组见名称是由vue中组件name决定的"><span>作用三：当你用vue-tools时，vue-devtools调试工具里显示的组见名称是由vue中组件name决定的</span></a></h4></blockquote><h3 id="组件懒加载" tabindex="-1"><a class="header-anchor" href="#组件懒加载"><span>组件懒加载</span></a></h3><blockquote><h4 id="不用懒加载引入组件" tabindex="-1"><a class="header-anchor" href="#不用懒加载引入组件"><span>不用懒加载引入组件</span></a></h4><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>one-comp</span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> OneComp <span class="token keyword">from</span> <span class="token string">&#39;./OneComp&#39;</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
         <span class="token string-property property">&quot;one-comp&quot;</span><span class="token operator">:</span> OneComp
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">return</span> <span class="token punctuation">{</span>
           <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;Hello World !&#39;</span>
         <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="组件实现懒加载方式" tabindex="-1"><a class="header-anchor" href="#组件实现懒加载方式"><span>组件实现懒加载方式</span></a></h4><ol><li>vue异步组件实现懒加载：<code>组件定义名: resolve =&gt; ([&#39;所加载组件的所在路径&#39;], resolve)</code></li><li>ES6的import方法实现懒加载：<code>组件定义名: () =&gt; import(&#39;所加载组件的所在路径&#39;)</code></li></ol><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>one-comp</span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>two-comp</span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>three-comp</span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> OneComp <span class="token keyword">from</span> <span class="token string">&#39;./OneComp&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;one-comp&quot;</span><span class="token operator">:</span> OneComp<span class="token punctuation">,</span>
    <span class="token string-property property">&quot;two-comp&quot;</span><span class="token operator">:</span> <span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;./TwoComp&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> resolve<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 异步组件加载</span>
    <span class="token string-property property">&quot;three-comp&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./ThreeComp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// ES6的import方法</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;Hello World !&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="父子组件的通信" tabindex="-1"><a class="header-anchor" href="#父子组件的通信"><span>父子组件的通信</span></a></h3><h4 id="父传子props" tabindex="-1"><a class="header-anchor" href="#父传子props"><span>父传子<code>props</code></span></a></h4><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">### 父传子 props</span>
- 通过 props 接收父组件传递数据。
    - 父组件在引用子组件时，父组件通过事件绑定机制，将父组件的方法/值传递给子组件。
    - 在子组件中 使用 <span class="token variable"><span class="token variable">\`</span>props<span class="token variable">\`</span></span> 属性来接收父组件传来的数据（如果定义类型，就会对传来的数据做过滤）
    - 在子组件中使用 <span class="token variable"><span class="token variable">\`</span>$attrs<span class="token variable">\`</span></span> 会保存父组件传来的数据中 <span class="token variable"><span class="token variable">\`</span>props<span class="token variable">\`</span></span> 不接收的数据（捡漏）
          注意：<span class="token variable"><span class="token variable">\`</span>$attrs<span class="token variable">\`</span></span> 中接收的数据不会存在类型过滤（父组件传递什么数据就会接收什么）

<span class="token comment">#### 子组件中，data 中的数据和 props 中的数据的区别：</span>
		- 子组件中的 data 数据，并不是通过父组件传递过来的，而是子组件自身私有的；
			props 中的数据都是通过父组件传递给子组件的。
		- data 中的数据是可读可写的；props 中的属性是只读的，重新赋值会报错。
			即单向数据流：子组件不能直接修改父组件中的数据。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span> <span class="token attr-name">:cmovies</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>movies<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:cmessage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span> <span class="token attr-name">mname</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>willys<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cpn1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{cmessage}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in cmovies<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>props中不接收的数据,$attrs来接收剩余数据 {{ $attrs.mname }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> cpn <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;#cpn1&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;cmovies&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;cmessage&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> <span class="token constant">VM</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">movies</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;海王&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;海贼王&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;海绵宝宝&#39;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      cpn		<span class="token comment">//增强式写法,原式为cpn: cpn</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="props-的使用" tabindex="-1"><a class="header-anchor" href="#props-的使用"><span>props 的使用</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 数组写法</span>
<span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;cmovies&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;cmessage&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>	<span class="token comment">//里面的定义不支持驼峰写法</span>

<span class="token comment">// 对象写法</span>
<span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
	<span class="token comment">//1、类型限制</span>
	<span class="token literal-property property">cmovies</span><span class="token operator">:</span> Array<span class="token punctuation">,</span>
	
	<span class="token comment">//2、提供一些默认值</span>
	<span class="token literal-property property">cmessage</span><span class="token operator">:</span>  <span class="token punctuation">{</span>
		<span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>	<span class="token comment">//数据类型</span>
		<span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;aaaaaa&#39;</span><span class="token punctuation">,</span>	<span class="token comment">//默认值</span>
		<span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>	<span class="token comment">//必须填写	</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="子传父-emit" tabindex="-1"><a class="header-anchor" href="#子传父-emit"><span>子传父<code>$emit</code></span></a></h4><blockquote><ul><li>通过自定义事件(<code>events</code>)向父组件发送消息</li></ul><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span> <span class="token attr-name">@itemclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cpnClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cpn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in categories<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btnClick(item)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  {{ item.name }}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 子组件</span>
  <span class="token keyword">const</span> cpn <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;#cpn&#39;</span><span class="token punctuation">,</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">categories</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;热门推荐&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;手机数码&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;家用电器&#39;</span><span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">}</span> 
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">btnClick</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;itemclick&#39;</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//子组件发射的事件</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// 父组件</span>
  <span class="token keyword">const</span> <span class="token constant">VM</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span> cpn <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">cpnClick</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>	<span class="token comment">//接收子组件传过来的值（item{}）</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;cpnClick&#39;</span> <span class="token operator">+</span> value<span class="token punctuation">.</span>name<span class="token punctuation">,</span>value<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="自定义事件-emit与-on" tabindex="-1"><a class="header-anchor" href="#自定义事件-emit与-on"><span><strong>自定义事件<code>$emit与$on</code></strong></span></a></h3><ul><li><strong><code>$emit</code></strong><ul><li><code>this.$emit(&quot;自定义事件名&quot;,&quot;要传送的数据&quot;);</code></li><li>触发当前实例上的事件，要传递的数据会传给监听器。</li></ul></li><li><strong><code>$on</code></strong><ul><li><code>VM.$on(&#39;事件名&#39;,callback);</code></li><li><code>callback</code>回调<code>$emit</code>要传送的数据；</li><li>监听当前实例上自定义事件</li></ul></li></ul><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>relation<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Son按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&quot;relation&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">relations</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;子组件接收了自己发射的事件:&quot;</span> <span class="token operator">+</span> relations<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">relation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;子组件发射事件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&quot;relation&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;son&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ relations }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>son</span> <span class="token attr-name">@relation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>father<span class="token punctuation">&#39;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> son <span class="token keyword">from</span> <span class="token string">&#39;@/views/home/FatherAndSonComm-Son&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">relations</span><span class="token operator">:</span> <span class="token string">&#39;father&#39;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span> son <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">father</span><span class="token punctuation">(</span><span class="token parameter">relation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>relations <span class="token operator">=</span> relation<span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;父组件接收事件:&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>relations<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+r+`" alt="image-20210719171619593"></p><h3 id="跨多级组件-嵌套关系-的通信" tabindex="-1"><a class="header-anchor" href="#跨多级组件-嵌套关系-的通信"><span>跨多级组件(嵌套关系)的通信</span></a></h3><h4 id="非父子组件间的传递this-bus-on与this-bus-emit" tabindex="-1"><a class="header-anchor" href="#非父子组件间的传递this-bus-on与this-bus-emit"><span>非父子组件间的传递<code>this.$bus.$on</code>与<code>this.$bus.$emit</code></span></a></h4><ul><li>bus用来传递非父子关系的数据</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// main.js中引用实例</span>
<span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 子组件1</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&quot;change&quot;</span><span class="token punctuation">,</span>param<span class="token punctuation">)</span>

<span class="token comment">// 子组件2</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&quot;change&quot;</span><span class="token punctuation">,</span><span class="token parameter">para</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="例-a-c组件属于夸多级的组件嵌套关系-需实现数据通信" tabindex="-1"><a class="header-anchor" href="#例-a-c组件属于夸多级的组件嵌套关系-需实现数据通信"><span>例：A/C组件属于夸多级的组件嵌套关系，需实现数据通信</span></a></h4><ol><li>借助B组件的中转，从上到下props依次传递；从下至上，$emit事件的传递，达到跨级组件通信的效果(但如果嵌套的组件过多，会导致代码繁琐，代码维护比较困难；如果C中状态的改变需要传递给A，使用事件系统一级级往上传递)</li><li>借助Vuex的全局状态共享进行数据管理（仅实现数据传递，并非数据共享，如果项目中多个组件共享状态较少，会显得大材小用）</li><li>自定义一个Vue中央数据总线<code>Vue Event Bus</code>，实现事件的监听和发布，实现组件之间的传递(如不能实现很好的事件监听与发布管理，往往容易导致数据流的混乱，在多人协作的项目中，不利于项目的维护)</li></ol><blockquote><p>在vue2.4中，<code>$attrs和$listeners</code>解决了第一种情况的问题，B组件在其中传递props以及事件过程中，仅将<code>$attrs以及$listeners</code>向上或向下传递即可。</p></blockquote><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- demo.vue A组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-dom</span> <span class="token attr-name">:coo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>coo<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>upRocket</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>reciveRocket<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-dom</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> childDom <span class="token keyword">from</span> <span class="token string">&quot;@/components/ChildDom.vue&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;demoNo&#39;</span><span class="token punctuation">,</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">coo</span><span class="token operator">:</span> <span class="token string">&quot;Hello,rui&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span> childDom <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">reciveRocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;reciveRocket success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- child-demo.vue B组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>foo:{{foo}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>attrs:{{$attrs}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>childDomChild</span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$attrs<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$listeners<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>childDomChild</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> childDomChild <span class="token keyword">from</span> <span class="token string">&#39;./childDomChild&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;child-dom&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">inheritAttrs</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- childDomChild.vue  C组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>coo:{{coo}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>startUpRocket<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>我要发射事件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;childDomChild&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;coo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">startUpRocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&quot;upRocket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;startUpRocket&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>组件中的<code>inheritAttrs、$attrs、$listeners</code></p><ul><li>当设置<code>inheritAttrs:true</code>(默认)时，子组件的顶层标签元素中会渲染出父组件传递过来的属性</li><li>当设置<code>inheritAttrs:false</code>时，子组件的顶层标签元素中不会渲染出父组件传递过来的属性</li><li>不管inheritAttrs为true/false，子组件中都能通过<code>$attrs</code>属性获取到父组件中传递过来的属性</li><li>通过在组件B上绑定<code>v-on=&quot;$listeners&quot;</code>，在A组件中监听C组件触发的事件(即在A组件通过该事件接收C组件发出的数据)</li></ul></li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token variable">$attrs</span>
包含了父作用域中不被认为 <span class="token punctuation">(</span>且不预期为<span class="token punctuation">)</span> props 的特性绑定 <span class="token punctuation">(</span>class 和 style 除外<span class="token punctuation">)</span>。当一个组件没有声明任何 props 时，这里会包含所有父作用域的绑定 <span class="token punctuation">(</span>class 和 style 除外<span class="token punctuation">)</span>，并且可以通过 v-bind<span class="token operator">=</span>”<span class="token variable">$attrs</span>” 传入内部组件。

<span class="token variable">$listeners</span>
包含了父作用域中的 <span class="token punctuation">(</span>不含 .native 修饰器的<span class="token punctuation">)</span> v-on 事件监听器。它可以通过 v-on<span class="token operator">=</span>”<span class="token variable">$listeners</span>” 传入内部组件——在创建更高层次的组件时非常有用。

inheritAttrs
默认情况下父作用域的不被认作 props 的特性绑定 <span class="token punctuation">(</span>attribute bindings<span class="token punctuation">)</span> 将会“回退”且作为普通的 HTML 特性应用在子组件的根元素上。当撰写包裹一个目标元素或另一个组件的组件时，这可能不会总是符合预期行为。通过设置 inheritAttrs 到 false，这些默认行为将会被去掉。而通过 <span class="token punctuation">(</span>同样是 <span class="token number">2.4</span> 新增的<span class="token punctuation">)</span> 实例属性 <span class="token variable">$attrs</span> 可以让这些特性生效，且可以通过 v-bind 显性的绑定到非根元素上。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="父子组件的访问方式" tabindex="-1"><a class="header-anchor" href="#父子组件的访问方式"><span>父子组件的访问方式</span></a></h3><p><strong>父访子 <code>$children、$refs</code>、子访父<code> $parent、$root</code></strong></p><blockquote><p>注意：在复用组件时需要在组件中定义属性 <code>ref=&#39;&#39;</code></p></blockquote><ul><li><code>ref</code>如果绑定在组件中，那么通过<code>this.$refs.refname</code>获取到的是一个组件对象。 <code>ref</code>如果绑定在普通元素中，那么通过<code>this.$refs.refname</code>获取到的是一个元素对象。</li></ul><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>aaa<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>btnClick<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cpn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>我是子组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token constant">VM</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">btnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">/* console.log(this.$children);
            for(let c of this.$children){
                console.log(c.name);
            } */</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>aaa<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//访问子组件</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">cpn</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;#cpn&#39;</span><span class="token punctuation">,</span>
        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;子组件&#39;</span><span class="token punctuation">,</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>$root<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//访问父组件、根组件</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="子组件的methods中获取props中的值" tabindex="-1"><a class="header-anchor" href="#子组件的methods中获取props中的值"><span><strong>子组件的methods中获取props中的值</strong></span></a></h5><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 父组件.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>aa<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:chartData</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>chartData<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> cpn <span class="token keyword">from</span> <span class="token string">&#39;./子组件&#39;</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">chartData</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span> cpn <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 子组件.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;chartData&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">cData</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">chartData</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span>oldVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cData <span class="token operator">=</span> newVal<span class="token punctuation">;</span>  <span class="token comment">//newVal即是chartData</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">drawChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>在props中的值为静态值的情况下，子组件的methods中想要取到props中的值，直接使用<code>this.chartData</code>即可;</p></li><li><p>当父组件中chartData里面的值并不是固定的，而是动态获取的，此时methods中取不到<code>chartData</code>，或取到值是默认值，此时需要通过侦听属性<code>watch</code>来处理，把props传来的值赋给data数据中<code>cData</code>存放，再通过调用data中的数据即可。</p></li><li><blockquote><p>当父组件中多个值<strong>同时</strong>传来，则只需要在侦听属性<code>watch</code>中定义一个监听函数即可（在同一监听函数内，获取同一个父组件通过props传来的数据，以此来降低性能损耗）</p></blockquote></li></ul><h3 id="slot组件的插槽" tabindex="-1"><a class="header-anchor" href="#slot组件的插槽"><span>slot组件的插槽</span></a></h3><p>组件的插槽目的是让我们封装的组件更具扩展性（预留空间、抽取共性保留不同）</p><blockquote><p>可以通过$slots来获取所有插槽（$slots通过数组对象来存放定义的插槽）</p></blockquote><h4 id="普通插槽-携带的默认值可替换" tabindex="-1"><a class="header-anchor" href="#普通插槽-携带的默认值可替换"><span>普通插槽（携带的默认值可替换）</span></a></h4><div class="language-html+vue line-numbers-mode" data-ext="html+vue" data-title="html+vue"><pre class="language-html+vue"><code>&lt;div id=&quot;app&quot;&gt;
    &lt;cpn&gt;&lt;button&gt;按钮&lt;/button&gt;&lt;/cpn&gt;	&lt;!--slot的位置被一个按钮代替--&gt;
    &lt;cpn&gt;&lt;/cpn&gt;
&lt;/div&gt;
&lt;template id=&quot;cpn&quot;&gt;
    &lt;div&gt;
        &lt;slot&gt;&lt;/slot&gt;	&lt;!--插槽--&gt;
    	&lt;slot&gt;&lt;span&gt;默认值&lt;/span&gt;&lt;/slot&gt;	&lt;!--  可以在slot中放默认值 --&gt;
    &lt;/div&gt;
&lt;/template&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="具名插槽-多个插槽" tabindex="-1"><a class="header-anchor" href="#具名插槽-多个插槽"><span><strong>具名插槽</strong>（多个插槽）</span></a></h4><div class="language-html+vue line-numbers-mode" data-ext="html+vue" data-title="html+vue"><pre class="language-html+vue"><code>&lt;div id=&quot;app&quot;&gt;
    &lt;cpn&gt;
    	&lt;span slot=&quot;left&quot;&gt;我是返回&lt;/span&gt;
    	&lt;span slot=&quot;right&quot;&gt;我是菜单&lt;/span&gt;
    	&lt;span slot=&quot;center&quot;&gt;我是标题&lt;/span&gt;
    &lt;/cpn&gt;
&lt;/div&gt;
&lt;template id=&quot;cpn&quot;&gt;
    &lt;div&gt;
        &lt;slot name=&quot;left&quot;&gt;&lt;button&gt;左边&lt;/button&gt;&lt;/slot&gt;
        &lt;slot name=&quot;center&quot;&gt;&lt;button&gt;中间&lt;/button&gt;&lt;/slot&gt;
        &lt;slot name=&quot;right&quot;&gt;&lt;button&gt;右边&lt;/button&gt;&lt;/slot&gt;
    &lt;/div&gt;
&lt;/template&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>编译作用域</strong>：template的作用域是组件里面的，调用组件的是实例的作用域</p><h4 id="作用域插槽slot-scope属性" tabindex="-1"><a class="header-anchor" href="#作用域插槽slot-scope属性"><span><strong>作用域插槽<code>slot-scope属性</code></strong></span></a></h4><ul><li>作用：通过获取子组件的data数据，然后在实例中输出</li><li>在子组件中绑定一个<code>:data=&quot;Languages&quot;</code>，然后在父组件中的使用<code>slot-scope</code>属性调用子组件中绑定在属性中数据（）</li></ul><div class="language-html+vue line-numbers-mode" data-ext="html+vue" data-title="html+vue"><pre class="language-html+vue"><code>//HTML
&lt;div id=&quot;app&quot;&gt;
    &lt;cpn&gt;&lt;/cpn&gt;
    &lt;cpn&gt;
    	&lt;!-- 获取子组件的的数据，存放在slot1中 --&gt;
        &lt;template slot-scope=&quot;slot1&quot;&gt;
            &lt;!-- &lt;span v-for=&quot;item in slot1.data&quot;&gt;{{ item }}&lt;/span&gt; --&gt;
            &lt;span&gt;{{ slot.data1.join(&#39;  -  &#39;) }}&lt;/span&gt;
        &lt;/template&gt;
    &lt;/cpn&gt;
    &lt;cpn&gt;
        &lt;template slot-scope=&quot;slot&quot;&gt;
            &lt;span&gt;{{ slot.data1.join(&#39;  *  &#39;) }}&lt;/span&gt;
        &lt;/template&gt;
    &lt;/cpn&gt;
&lt;/div&gt;
&lt;template id=&quot;cpn&quot;&gt;
    &lt;div&gt;
    	&lt;!-- 把language数组的数据存放在data1中 --&gt;
        &lt;slot :data1=&quot;language&quot;&gt;
            &lt;ul&gt;
                &lt;li v-for=&quot;item in language&quot;&gt;{{item}}&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/slot&gt;
    &lt;/div&gt;
&lt;/template&gt;

//JS
const app = new Vue({ 
    el: &#39;#app&#39;,
    components: {
        cpn: {
            template: &#39;#cpn&#39;,
            data(){
                return {
                    language: [&#39;JavaScript&#39;,&#39;Java&#39;,&#39;C++&#39;,&#39;c#&#39;,&#39;Go&#39;]
                }
            }
        }
    }   
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="响应式原理" tabindex="-1"><a class="header-anchor" href="#响应式原理"><span>响应式原理</span></a></h2><h3 id="动态修改vue中的页面标题" tabindex="-1"><a class="header-anchor" href="#动态修改vue中的页面标题"><span>动态修改<code>Vue</code>中的页面标题</span></a></h3><blockquote><ul><li>在页面的最外层div上添加属性 v-title data-title=&quot;页面标题&quot;，然后通过在<code>main.js</code>中获取值给<code>document.title</code></li><li>还可在页面方法中直接赋值给<code>document.title</code>（不建议，会产生多冗余代码）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//main.js</span>
Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
	<span class="token function-variable function">inserted</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		document<span class="token punctuation">.</span>title <span class="token operator">=</span> el<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>title
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>//在页面的最外层div上添加属性 v-title data-title=&quot;页面标题&quot;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-title</span> <span class="token attr-name">data-title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>页面标题<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>这是页面的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="vue2响应式的缺陷" tabindex="-1"><a class="header-anchor" href="#vue2响应式的缺陷"><span>vue2响应式的缺陷</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## vue2 响应式缺陷</span>
对象新增、删除属性没有响应式，数组新增、删除元素没有响应式，通过下标修改某个元素没有响应式，通过 <span class="token variable"><span class="token variable">\`</span>.length<span class="token variable">\`</span></span> 改变数组长度没有响应式。
只有实例创建时 data 中有的数据实例创建后才是响应式，给已创建好的 vue 实例 data 对象中添加属性时，数据虽然会更新，但视图不会更新，不具有响应式。



<span class="token comment">### 解决方案</span>
<span class="token number">1</span>. 使用 <span class="token variable"><span class="token variable">\`</span>this.$forceUpdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span> 强制更新视图和数据（不推荐）

<span class="token number">2</span>. 使用具有响应式的函数来操作对象：
	<span class="token punctuation">[</span>Vue <span class="token operator">|</span> this<span class="token punctuation">]</span>.<span class="token variable">$set</span><span class="token punctuation">(</span>object,key,value<span class="token punctuation">)</span>,实例中添加响应式属性<span class="token punctuation">;</span>
   <span class="token punctuation">[</span>Vue <span class="token operator">|</span> this<span class="token punctuation">]</span>.<span class="token variable">$delete</span><span class="token punctuation">(</span>object,key<span class="token punctuation">)</span>，实例中删除属性<span class="token punctuation">;</span>
   Object.assign<span class="token punctuation">(</span><span class="token punctuation">)</span>，将多个对象属性合并到目标对象中，具有响应式<span class="token punctuation">;</span>
   Object.freeze<span class="token punctuation">(</span><span class="token punctuation">)</span>，将对象冻结，防止任何改变。使得对象成为只读，无法添加、删除或更新<span class="token punctuation">;</span>
   Object.keys<span class="token punctuation">(</span><span class="token punctuation">)</span>，返回对象的所有属性<span class="token punctuation">;</span>
   Object.values<span class="token punctuation">(</span><span class="token punctuation">)</span>，返回对象的所有属性值<span class="token punctuation">;</span>
   Object.entries<span class="token punctuation">(</span><span class="token punctuation">)</span>,返回对象的所有键值对<span class="token punctuation">;</span>

<span class="token number">3</span>. 使用具有响应式的函数来操作数组：
   pop<span class="token punctuation">(</span><span class="token punctuation">)</span>,尾部删除元素；
   push<span class="token punctuation">(</span><span class="token punctuation">)</span>,尾部添加元素；
   unshift<span class="token punctuation">(</span><span class="token punctuation">)</span>,首部添加元素；
   shift<span class="token punctuation">(</span><span class="token punctuation">)</span>,首部删除元素；
   sort<span class="token punctuation">(</span><span class="token punctuation">)</span>,排序；
   reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>,翻转；
   splice<span class="token punctuation">(</span>index<span class="token punctuation">[</span>必填，位置<span class="token punctuation">]</span>，howmany<span class="token punctuation">[</span>必填，要删除的数量<span class="token punctuation">]</span>,item1<span class="token punctuation">..</span>.itemx<span class="token punctuation">[</span>可选，向数组中添加的新元素<span class="token punctuation">]</span><span class="token punctuation">)</span>；

<span class="token number">4</span>. 清空对象
   this.form <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
   this.<span class="token variable">$refs</span>.form.resetFields<span class="token punctuation">(</span><span class="token punctuation">)</span>
   this.form.name <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>

<span class="token number">5</span>. 清空数组
   this.arrayList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> 
   this.arrayList.splice<span class="token punctuation">(</span><span class="token number">0</span>,this.arrayList.length<span class="token punctuation">)</span>
   // this.arrayList.length <span class="token operator">=</span> <span class="token number">0</span>  不具有响应式，无法实现
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="vue中响应式值变化处理this-set" tabindex="-1"><a class="header-anchor" href="#vue中响应式值变化处理this-set"><span>vue中响应式值变化处理this.$set()</span></a></h3><h4 id="对于对象" tabindex="-1"><a class="header-anchor" href="#对于对象"><span>对于对象</span></a></h4><ul><li><p>对于已经创建的实例，Vue 不允许动态添加根级别的响应式 property。</p></li><li><p>但可使用<code>this.$set(object, propertyName, value)</code>、<code>Vue.set(object, propertyName, value)</code>方法向嵌套对象添加响应式proterty。</p></li><li><p>当为已有对象赋值多个新的property，如使用 <code>Object.assign()</code> 或 <code>_.extend()</code>。但是，这样添加到对象上的新 property 不会触发更新。在这种情况下，应该用原对象与要混合进去的对象的 property 一起创建一个新的对象。</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>// 代替 \`Object.assign(this.someObject, { a: 1, b: 2 })\`
this.someObject = Object.assign({}, this.someObject, { a: 1, b: 2 })
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="对于数组" tabindex="-1"><a class="header-anchor" href="#对于数组"><span>对于数组</span></a></h4><ul><li>Vue 不能检测以下数组的变动： <ol><li>当你利用索引直接设置一个数组项时，例如：<code>vm.items[indexOfItem] = newValue</code></li><li>当你修改数组的长度时，例如：<code>vm.items.length = newLength</code></li></ol></li><li><code>vm.$set(arrayName, indexOfItem, newValue)</code></li></ul><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>const vm = new Vue({
  data: {
    items: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]
  }
})
vm.items[1] = &#39;x&#39; // 不是响应性的
vm.items.length = 2 // 不是响应性的
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>Vue.set(vm.items, indexOfItem, newValue)	// Vue.set
vm.items.splice(indexOfItem, 1, newValue)	// Array.prototype.splice

vm.items.splice(newLength)	//修改数组长度
vm.$set(vm.items, indexOfItem, newValue)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="对于-数组中嵌套对象" tabindex="-1"><a class="header-anchor" href="#对于-数组中嵌套对象"><span>对于 数组中嵌套对象</span></a></h4><ul><li><code>this.$set( 数组名, 索引, { 该列数组中对象的属性名 : 该属性赋予的值，可以是方法或者是函数 })</code></li></ul><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>data(){
	return {
		filldata: [
			{inputValue: &quot;&quot;, result: &quot;2&quot;, //0/1/2},
			{inputValue: &quot;&quot;, result: &quot;2&quot;, //0/1/2},
			{inputValue: &quot;&quot;, result: &quot;2&quot;, //0/1/2},
		]
	}
},
methods: {
	updateData(i) {
		this.$set(
          this.fillData,
          index,
          { result:this.fillData[index].inputValue, result: &quot;1&quot; }
        )
		this.$set( this.fillData, index, { result: &quot;1&quot; })
	}
	
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="重置vue的data中的数据" tabindex="-1"><a class="header-anchor" href="#重置vue的data中的数据"><span>重置vue的data中的数据</span></a></h3><ul><li><p><strong>方法1</strong>：<code>Object.assign()</code>合并成一个新的对象再赋值</p><ul><li>Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象</li><li>例：<code>this.seller=Object.assign({},this.seller,new.data)</code> 将<code>new.data</code>和<code>this.seller</code>都复制到空对象中，在赋值给<code>this.seller</code></li></ul></li><li><p><strong>方法2</strong>：使用<code>this.$set()</code>,vue中是推荐使用此方法的，会强制视图重新渲染</p><ul><li><p>例：vue文件中data有个值option，修改option值，并让页面视图更新</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>data() { 
	return { 
		option: {},
	} 
},
methods: {
	btn() {
		let moke = { a: 1 };
		this.$set(this, &quot;option&quot;, moke);
	}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>方法3</strong>：push等一系列自带的添加方法，也会触发视图的更新</p></li><li><p><strong>方法4</strong>： v-if也会触发视图更新</p></li><li><p>**方法5：**this.$nextTick()</p></li><li><p>方法6：对象层次过深，没有办法时，可以试试重新获取数据，前提是清空数据，再异步获取数据</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>this.data = [];
setTimeout(() =&gt; {
	this.onLoad();
}, 0);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="this-nexttick-异步更新队列" tabindex="-1"><a class="header-anchor" href="#this-nexttick-异步更新队列"><span><code>this.$nextTick()</code>异步更新队列</span></a></h3><ul><li><p>Vue 在更新 DOM 时是<strong>异步</strong>执行的。 只要侦听到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。 如果同一个 watcher 被多次触发，只会被推入到队列中一次。 这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。 然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。 Vue 在内部对异步队列尝试使用原生的 <code>Promise.then</code>、<code>MutationObserver</code> 和 <code>setImmediate</code>，如果执行环境不支持，则会采用 <code>setTimeout(fn, 0)</code> 代替。</p></li><li><p>this.$nextTick 将回调延迟到下次DOM更新循环之后执行。在修改数据之后立即使用它，然后等待DOM更新。</p></li><li><blockquote><p><code>$nextTick()</code> 返回一个 <code>Promise</code> 对象</p></blockquote></li></ul><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>example<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

var vm = new Vue({
  el: &#39;#example&#39;,
  data: {
    message: &#39;123&#39;
  },
})
vm.message = &#39;new message&#39; // 更改数据
vm.$el.textContent === &#39;new message&#39; // false
Vue.nextTick(function () {
  vm.$el.textContent === &#39;new message&#39; // true
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>// 因为是promise对象，所以可以使用 async/await
methods: {
  updateMessage: async function () {
    this.message = &#39;已更新&#39;
    console.log(this.$el.textContent) // =&gt; &#39;未更新&#39;
    await this.$nextTick()
    console.log(this.$el.textContent) // =&gt; &#39;已更新&#39;
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="无痕刷新" tabindex="-1"><a class="header-anchor" href="#无痕刷新"><span>无痕刷新</span></a></h3><ul><li>常见刷新页面 <ul><li><code>window.location.reload()</code>，原生 js 提供的方法；</li><li><code>this.$router.go(0)</code>，vue 路由里面的一种方法；</li><li>这两种方法都可刷新页面，但会使用户体验不好，相当于按 F5 刷新页面重新载入，会有短暂的白屏。</li></ul></li><li>实现无痕刷新 <ul><li>先在全局组件注册一个方法，用该方法控制 <code>router-view</code> 的显示与否，然后在子组件调用；</li><li>用 <code>v-if</code> 控制 <code>&lt;router-view&gt;&lt;/router-view&gt;</code> 的显示；</li><li><code>provice/reject</code>：需一起使用，以允许祖先向其后代所有子组件中注入一个依赖 provide：全局注册方法；inject：子组件引用 provide 注册的方法</li></ul></li></ul><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- App.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isRouterAlive<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">reload</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reload
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">isRouterAlive</span><span class="token operator">:</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>isRouterAlive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>isRouterAlive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 需要引用的子组件   先用inject注册，然后即可通过this调用--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;reload&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="provider-inject" tabindex="-1"><a class="header-anchor" href="#provider-inject"><span><code>provider/inject</code></span></a></h4><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 依赖注入 provider/inject</span>
- 在父组件中通过 provider 来提供变量，然后再子组件中通过 inject 来注入变量。
		- provide：一个对象或返回一个对象的函数。
		- inject：一个字符串数组，或一个对象，对象的 key 是本地的绑定名。
		
注意：
- 不论子组件有多深层次，只要调用了 inject 就可以注入 provider 中的数据，而不是局限于只能从当前父组件的 prop 属性来获取数据。
- 只要在父组件中通过 provide 注入了该变量，那么在这个父组件生效的生命周期内，其所有的子组件都可以通过调用 inject 来注入父组件中的值。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 返回一个对象的函数</span>
<span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">objFun</span><span class="token operator">:</span> <span class="token string">&quot;返回一个对象的函数&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>

<span class="token comment">// 返回一个对象</span>
<span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token string">&quot;一个对象&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 注入一个字符串数组</span>
<span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;objFun&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

<span class="token comment">// 注入一个对象</span>
<span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&quot;一个对象&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="模块化开发" tabindex="-1"><a class="header-anchor" href="#模块化开发"><span>模块化开发</span></a></h2><p>常见的模块化规范：CommonJS、AMD、CMD、ES6的Modules</p><p><strong>ES6的模块化</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/*
使用export指令导出模块对外提供的借口，通过import命令来加载该模块
我们引入导入导出的js文件类型必须设置为module
导入的变量跟导出的变量名必须要一致的，不能改变
&lt;script src=&quot;info.js&quot; type=&quot;module&quot;&gt; &lt;/script&gt;
*/</span>

<span class="token comment">//导入的{}中定义的变量</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>flag<span class="token punctuation">,</span> sum<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./aaa.js&#39;</span><span class="token punctuation">;</span>

<span class="token comment">//导出变量</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> num1<span class="token operator">*</span>num2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> abc	<span class="token comment">//default只能导一个，不能多个default</span>

<span class="token comment">//导出所有接口，然后定义一个来接收</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> abc <span class="token keyword">from</span> <span class="token string">&#39;./aaa.js&#39;</span>
cosole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>abc<span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="可视化管理-vue-ui" tabindex="-1"><a class="header-anchor" href="#可视化管理-vue-ui"><span>可视化管理 <code>vue ui</code></span></a></h3><ul><li>在cmd中输入<code>vue ui</code>就会在浏览器中弹出可视化界面生成并管理项目。</li></ul><h3 id="脚手架cli" tabindex="-1"><a class="header-anchor" href="#脚手架cli"><span>脚手架CLI</span></a></h3><ul><li>CLI是Command-Line Interface，即命令行界面，俗称脚手架；使用vue-cli可以快速搭建vue开发环境以及对应的webpack配置（注意：使用的前需要安装webpack和node）</li><li>NPM全程是Node Package Manager，是一个nodejs包管理和分发工具，是非官方的模块/包的标准</li></ul><div class="language-cmd line-numbers-mode" data-ext="cmd" data-title="cmd"><pre class="language-cmd"><code># 脚手架安装
npm install -g @vue/cli@3.2.1
vue --version
#拉取脚手架2.0版本
npm install -g @vue/cli-init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="脚手架2" tabindex="-1"><a class="header-anchor" href="#脚手架2"><span>脚手架2</span></a></h3><p><img src="`+d+`" alt="image-20201218124600637"></p><div class="language-cmd line-numbers-mode" data-ext="cmd" data-title="cmd"><pre class="language-cmd"><code>#创建脚手架项目，项目名为my-project
vue in
it webpack my-project
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解读生成的文件</strong>：先从package.json中读文件运行的过程</p><p><img src="`+k+'" alt="image-20201218132217602"></p><p><strong>runtime-compiler和runtime-only的区别</strong></p><p>vue程序运行过程如下图所示：</p><p><img src="'+v+`" alt="image-20201229000721595"></p><ul><li><p>runtime-compiler运行过程：template--&gt;ast--&gt;render--&gt;virtual dom--&gt;UI</p></li><li><p>runtime-only运行过程：render--&gt;virtual dom--&gt;UI，所以性能相对更高，代码量更少</p><p>注意：runtime-only中不存在template</p></li></ul><p><strong>createElement</strong></p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>const cpn = {
  template: \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\`,
  data() {
    return {
      message: &#39;我是组件message&#39;
    }
  }
}

new Vue({
	el: &#39;#app&#39;,
	render: function(createElement){
	//1.普通用法：createElemnt(&#39;标签&#39;,{标签的属性},[&#39;标签的内容，里面可以再次嵌套&#39;])
		//return createElement(&#39;h4&#39;,{class:&#39;box&#39;},[&#39;Hello,world~&#39;,createElement(&#39;button&#39;,[&#39;按钮&#39;])])
		
	//2. 传入组件对象(不能再runtime-only中运行)
	return createElement(cpn)
	}
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>npm run build/dev运行过程</strong></p><p><img src="`+m+'" alt="image-20210105104406137"></p><p><img src="'+b+`" alt="image-20210105104341788"></p><h3 id="脚手架3" tabindex="-1"><a class="header-anchor" href="#脚手架3"><span>脚手架3</span></a></h3><div class="language-cmd line-numbers-mode" data-ext="cmd" data-title="cmd"><pre class="language-cmd"><code>#创建cli3项目
vue create cliName

#打开页面的项目管理器（因为cli3的配置会隐藏起来，所以这个比较好管理配置）
vue ui
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>vue-cli 3 与 2版本的区别</strong>（约定大于配置）</p><ul><li>vue-cli 3 是基于webpack 4打造，vue-cli 2 还是 webpack 3</li><li>vue-cli 3 的设计原则是“0配置”，移除的配置文件根目录下的build和config等目录</li><li>vue-cli 3 提供了vue ui 命令，提供了可视化配置，更加人性化</li><li>移除了static文件，新增public文件夹，并且index.html移动到public中</li></ul><p><img src="`+g+'" alt="image-20210105111814071"></p><h2 id="路由" tabindex="-1"><a class="header-anchor" href="#路由"><span>路由</span></a></h2><ul><li><p>路由是通过互联的网络把信息从源地址传输到目的地址的活动。</p></li><li><p>路由器提供了两种机制：路由和转送</p><ul><li>路由是决定数据数据包从来源到目的地的路径。</li><li>转送是输入端的数据转移到合适的输出端。</li></ul></li><li><p>路由表本质上时一个映射表，决定了数据包的指向。</p></li><li><p>后端渲染：</p><ul><li>通过转发和重定向发送数据给服务器来渲染好对应的HTML页面，返回给客户端进行展示。</li><li>每个页面由对应的URL，url会发送到服务器，服务器通过正则对该URL进行匹配，然后交给Controller进行处理，最终生成HTML或数据，返回给前端，此为I/O操作。——后端路由</li></ul></li><li><p>前端渲染：</p><ul><li>前后端分离阶段(ajax)：后端只负责提供数据，不负责任何阶段的内容。浏览器中显示的页面的大部分内容都是前端写的JS代码在浏览器中执行，最终渲染出来的页面。</li><li>单页面富应用SPA阶段(vue)：在前后端分离基础上加一层前端路由，即由前端来维护一套路由规则(一个URL对应一个页面)</li><li>前端路由整体核心：改变URL，但是页面不进行整体的刷新。</li><li>改变页面的url但页面并不刷新的方案：url的hash和HTML5的history</li></ul></li></ul><h3 id="路由的使用" tabindex="-1"><a class="header-anchor" href="#路由的使用"><span>路由的使用</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 安装vue-router：</span>\n	<span class="token function">npm</span> <span class="token function">install</span> vue-router <span class="token parameter variable">--save</span>\n	\n\n<span class="token comment"># vue-router的使用</span>\n	<span class="token number">1</span>. 导入路由对象，并且调用<span class="token variable"><span class="token variable">`</span>Vue.use<span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token variable">`</span></span>\n	<span class="token number">2</span>. 创建路由实例，并且传入路由映射配置\n	<span class="token number">3</span>. 在Vue实例中挂载创建的路由实例：通过<span class="token variable"><span class="token variable">`</span><span class="token operator">&lt;</span>router-link<span class="token operator">&gt;</span> 和 <span class="token operator">&lt;</span>router-view<span class="token operator">&gt;</span><span class="token variable">`</span></span>\n	\n	\n<span class="token comment"># &lt;router-link&gt; 标签</span>\n<span class="token operator">&lt;</span>router-link<span class="token operator">&gt;</span>: 该标签是一个<span class="token variable"><span class="token variable">`</span>vue-router<span class="token variable">`</span></span>中一个内置的组件，会被渲染成一个<span class="token variable"><span class="token variable">`</span><span class="token operator">&lt;</span>a<span class="token operator">&gt;</span><span class="token variable">`</span></span>标签；\n  - <span class="token operator">&lt;</span>router-link <span class="token assign-left variable">to</span><span class="token operator">=</span><span class="token string">&#39;/home&#39;</span> <span class="token assign-left variable">tag</span><span class="token operator">=</span><span class="token string">&#39;button&#39;</span> replace active-class<span class="token operator">=</span><span class="token string">&quot;class1&quot;</span><span class="token operator">&gt;</span>\n  		- tag：tag可以指定<span class="token variable"><span class="token variable">`</span><span class="token operator">&lt;</span>router-link<span class="token operator">&gt;</span><span class="token variable">`</span></span>之后渲染成什么组件，如上会渲染成一个button按钮\n	  	- replace：replace不会留下history记录，所以指定replace时，后退键不能返回上一操作页面\n	  	- active-class：当<span class="token variable"><span class="token variable">`</span><span class="token operator">&lt;</span>router-link<span class="token operator">&gt;</span><span class="token variable">`</span></span>对应的路由匹配成功时，会自动给当前元素设置一个<span class="token variable"><span class="token variable">`</span>router-link-active<span class="token variable">`</span></span>的<span class="token variable"><span class="token variable">`</span>class<span class="token variable">`</span></span>，设置<span class="token variable"><span class="token variable">`</span>active-class<span class="token variable">`</span></span>可以修改默认的名称。\n    		<span class="token punctuation">(</span>在进行高亮显示的导航菜单或底部tabbar时会使用该类；但通常不会修改类的属性，会直接使用默认的router-link-active即可<span class="token punctuation">)</span>\n\n<span class="token comment"># &lt;router-view&gt; 标签</span>\n	- <span class="token variable"><span class="token variable">`</span><span class="token operator">&lt;</span>router-view<span class="token operator">&gt;</span><span class="token variable">`</span></span>:该标签会根据当前的路径，动态渲染出不同的组件<span class="token punctuation">(</span>显示不同组件的页面内容<span class="token punctuation">)</span>\n			- 网页的其他内容，比如顶部的标题/导航，或底部的一些版权信息会跟<span class="token variable"><span class="token variable">`</span><span class="token operator">&lt;</span>router-view<span class="token operator">&gt;</span><span class="token variable">`</span></span>处于同一个等级。\n			- 在路由切换时，切换的是<span class="token variable"><span class="token variable">`</span><span class="token operator">&lt;</span>router-view<span class="token operator">&gt;</span><span class="token variable">`</span></span>挂载的组件，其他内容不会发生改变\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="路由底层原理" tabindex="-1"><a class="header-anchor" href="#路由底层原理"><span>路由底层原理</span></a></h3><blockquote><p><img src="'+h+`" alt="image-20220825194922734"></p></blockquote><h3 id="hash模式与history模式" tabindex="-1"><a class="header-anchor" href="#hash模式与history模式"><span>hash模式与history模式</span></a></h3><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 路由的模式</span>
用于与服务器交互，通过不同的路径请求不同的资源，其中包含如下三种路由类型：
    <span class="token number">1</span>. Hash：使用 URL 的 <span class="token builtin class-name">hash</span> 值来作为路由。支持所有浏览器。
    <span class="token number">2</span>. History：以 HTML5 History API 和服务器配置。
    <span class="token number">3</span>. Abstract：支持所有 JS 运行模式，如果发现没有浏览器的API，路由会自动强制进入该模式。


<span class="token comment">### hash 模式与 history 模式</span>
- <span class="token variable"><span class="token variable">\`</span>Hash<span class="token variable">\`</span></span>模式只可以更改<span class="token variable"><span class="token variable">\`</span><span class="token comment">#</span><span class="token variable">\`</span></span>后面的内容，<span class="token variable"><span class="token variable">\`</span>History<span class="token variable">\`</span></span>模式可以通过API设置任意的同源url
- <span class="token variable"><span class="token variable">\`</span>History<span class="token variable">\`</span></span>模式可通过API添加任意类型的数据到历史记录中，<span class="token variable"><span class="token variable">\`</span>Hash<span class="token variable">\`</span></span>模式只能更改哈希值<span class="token punctuation">(</span>即字符串<span class="token punctuation">)</span>
- <span class="token variable"><span class="token variable">\`</span>Hash<span class="token variable">\`</span></span>模式无需后端配置且兼容性好。<span class="token variable"><span class="token variable">\`</span>History<span class="token variable">\`</span></span>模式在用户手动输入地址或刷新页面时会发起url请求，后端需要配置<span class="token variable"><span class="token variable">\`</span>index.html<span class="token variable">\`</span></span>页面用于匹配不到的静态资源时


<span class="token comment">### hash 模式(window.location.hash)</span>
- location.hash 的值实际是 URL 中 <span class="token variable"><span class="token variable">\`</span><span class="token comment">#</span><span class="token variable">\`</span></span> 字符后面的字符串，它的特点在于 <span class="token builtin class-name">hash</span> 虽然出现在 URL 中，但是不会被包含在 HTTP 请求中，对后端完全没有影响，因此改变 <span class="token builtin class-name">hash</span> 不会重新加载页面。
- URL 的 <span class="token builtin class-name">hash</span> 值只是客户端的一种状态，是由前端路由处理，即当服务端发出请求时 <span class="token builtin class-name">hash</span> 值不包括在 http 请求中，所以改变 <span class="token builtin class-name">hash</span> 值时不会刷新页面，也不会向服务器发送请求。
- 每一次改变 hash（window.location.hash）都会在浏览器的访问历史中增加一个记录，因此我们通过浏览器的回退、前进可以控制 <span class="token builtin class-name">hash</span> 的切换，就可实现前端路由 <span class="token string">&#39;更新视图但不重新请求页面&#39;</span> 的功能。
- 可通过 a 标签并设置 href 属性，当用户点击标签后，URL 的 <span class="token builtin class-name">hash</span> 值会发生改变，或者使用 JavaScript 来对 location.hash 进行赋值，改变 URL 的 <span class="token builtin class-name">hash</span> 值。
- 可使用 hashchange 事件来监听 <span class="token builtin class-name">hash</span> 值的变化，从而对页面进行跳转（渲染）
		<span class="token variable"><span class="token variable">\`</span>window.addEventListener<span class="token punctuation">(</span><span class="token string">&#39;hashchange&#39;</span>, funcRef, <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">\`</span></span>
		
		
<span class="token comment">### history 模式(HTML5 的 history 模式)</span>
- 整个地址重新加载，可以保存历史记录，方便前进后退。
- 使用 html5 和 http 服务端配置，没有后台配置，页面刷新可能会出现 <span class="token number">404</span> 页面。
- 可使用 popstate 事件来监听 URL 的变化，从而对页面进行跳转（渲染）
- 主要是利用 <span class="token variable"><span class="token variable">\`</span>history.pushState<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span> 和 <span class="token variable"><span class="token variable">\`</span>history.replaceState<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span> 两个 API 来操作实现 <span class="token string">&#39;URL/页面路由&#39;</span> 的跳转变化。
		这两个方法应用于浏览器的历史记录栈，通过 <span class="token variable"><span class="token variable">\`</span>back、forward、go<span class="token variable">\`</span></span> 方法对历史记录进行修改。
		这两个 API 共同特点：当调用它们修改浏览器历史记录栈后，虽然当前的 URL 改变，但不会触发 popSate 事件，浏览器不会刷新页面，这就为 spa 前端路由 <span class="token string">&#39;更新视图但不重新请求页面&#39;</span> 提供了基础，此时我们可通过监听 popState 事件来手动触发页面的跳转。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>hash模式</strong></p><ul><li>形如<code>www.test.com/#/</code> 就是Hash URL，当 # 后面的哈希值发生变化时，可以通过<code>hashchange</code>时间来监听页面 url 的变化，从而进行跳转页面，并且无论哈希值如何变化，服务端接收到的 url 请求永远是<code> www.test.com</code></li><li>hash模式无法使用形如a标签所附带的锚点定位</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 监听页面url变化</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;hashchange&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ... 具体逻辑</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>history模式</strong></p><ul><li>通过<code>history</code>模式改变url同样不会引起页面的刷新，只会更新浏览器的历史记录</li><li>对IE9以下浏览器会不兼容</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 修改页面的URL地址，且使页面不刷新（注意：可在浏览器控制台中修改）</span>
location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">&#39;ddd&#39;</span>	<span class="token comment">//页面会刷新且URL修改</span>
location<span class="token punctuation">.</span>hash<span class="token operator">=</span><span class="token string">&#39;aaa&#39;</span>	<span class="token comment">//页面不刷新但URL修改</span>
history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;bbb&#39;</span><span class="token punctuation">)</span>		<span class="token comment">//入栈（会保留历史记录）</span>
history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;ccc&#39;</span><span class="token punctuation">)</span>	<span class="token comment">//替换（不保留历史记录）</span>

<span class="token comment">// back()、forward()、go()等同于浏览器界面的前进后退</span>
history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>		等价于	history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
history<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span>	等价于	history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="路由的默认值和修改为history模式" tabindex="-1"><a class="header-anchor" href="#路由的默认值和修改为history模式"><span>路由的默认值和修改为history模式</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// router/index.js</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span>
<span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">&#39;../components/Home&#39;</span>

Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span>

<span class="token comment">//3.将router对象传入（导入）到VUE实例中</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">//配置路由和组件之间的应用关系</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>  <span class="token comment">//路由的默认值，默认显示(配置的是根路径)</span>
      <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">&#39;/home&#39;</span> <span class="token comment">//重定向，将根路径重定向到/home的路径下</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/home&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> Home <span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/about&#39;</span><span class="token punctuation">,</span> <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;../components/About&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;history&#39;</span><span class="token punctuation">,</span> <span class="token comment">//把默认的hash模式改为history模式</span>
  <span class="token literal-property property">linkActiveClass</span><span class="token operator">:</span> <span class="token string">&#39;class1&#39;</span>	<span class="token comment">//index.js中active-class=&#39;class1&#39;所统一设置的属性样式</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="通过代码修改路由" tabindex="-1"><a class="header-anchor" href="#通过代码修改路由"><span>通过代码修改路由</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/home<span class="token punctuation">&quot;</span></span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">replace</span><span class="token punctuation">&gt;</span></span>首页1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/about<span class="token punctuation">&quot;</span></span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">replace</span><span class="token punctuation">&gt;</span></span>关于1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>homeClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>首页2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>aboutClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>关于2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;App&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">homeClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//通过代码的方式修改路由 vue-router</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">aboutClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/about&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动态路由-携带参数" tabindex="-1"><a class="header-anchor" href="#动态路由-携带参数"><span>动态路由(携带参数)</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ $route.params.userid }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ userId }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;User&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">userId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//return this.$router.userid; //获取的是index.js中router对象的内容</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>userid<span class="token punctuation">;</span>  <span class="token comment">//$route获取的是index.js中最活跃的路由</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// router/index.js</span>
<span class="token comment">//配置路由相关信息</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span>
<span class="token keyword">import</span> User <span class="token keyword">from</span> <span class="token string">&#39;../components/User&#39;</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/user/:userid&#39;</span><span class="token punctuation">,</span>  <span class="token comment">//此userid时传给compents/User.vue中js请求的userid传的值</span>
      <span class="token literal-property property">component</span><span class="token operator">:</span> User
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&#39;</span>/user/&#39;+userid<span class="token punctuation">&quot;</span></span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>用户1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 通过v-bind绑定。带单引号里面的内容为真实的，其他为字符串/变量 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span>
export default {
  name: &#39;App&#39;,
  data() {
    return {
      userid: &#39;lisi&#39;
    }
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="打包文件的解析-路由的懒加载" tabindex="-1"><a class="header-anchor" href="#打包文件的解析-路由的懒加载"><span>打包文件的解析（路由的懒加载）</span></a></h3><blockquote><ul><li>懒加载：用到的时候再加载（加快页面的加载速度）</li><li>路由懒加载主要作用是将路由对应的组件打包成一个个的js代码块，只有这个路由被访问到时才能加载对应的组件。</li><li>ES6的import实现懒加载方式：<code> component: ()=&gt; import(&#39;需要加载的模块地址&#39;)</code></li><li>AMD实现懒加载方式：<code>component: resolve =&gt; (require([&#39;需要加载的路由的地址&#39;]), resolve)</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// router/index.js</span>
<span class="token comment">//方式一（不推荐）：结合Vue的异步组件和webpack的代码分析</span>
<span class="token keyword">const</span> <span class="token function-variable function">Home</span> <span class="token operator">=</span> <span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>require<span class="token punctuation">.</span><span class="token function">ensure</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;../components/Home.vue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../components/Home.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//方式二：AMD写法</span>
<span class="token keyword">const</span> <span class="token function-variable function">About</span> <span class="token operator">=</span> <span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;../components/About.vue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>resolve<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//方法三（推荐）：在ES6中，优化方法一来组织vue异步组件和webpack的代码分割</span>
<span class="token keyword">const</span> <span class="token function-variable function">Home</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;../components/Home.vue&#39;</span><span class="token punctuation">)</span>

<span class="token comment">//示例</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/home&#39;</span><span class="token punctuation">,</span>
      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;../components/Home&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/about&#39;</span><span class="token punctuation">,</span>
      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;../components/About&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="默认路由初始化加载-未用懒加载" tabindex="-1"><a class="header-anchor" href="#默认路由初始化加载-未用懒加载"><span>默认路由初始化加载（未用懒加载）</span></a></h3><ul><li>路由默认的加载方式是在初始化加载时就全部加载了组件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// router/index.js</span>
<span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">&#39;../components/Home.vue&#39;</span>
<span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">&#39;../components/About&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/home&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">component</span><span class="token operator">:</span> Home
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/about&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">component</span><span class="token operator">:</span> About
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="嵌套路由-子路由" tabindex="-1"><a class="header-anchor" href="#嵌套路由-子路由"><span>嵌套路由（子路由）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span>

Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/home&#39;</span><span class="token punctuation">,</span>
      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;../components/Home&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">//子路由能让router-view不改变其框的父内容</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">&#39;news&#39;</span>  <span class="token comment">//默认设置子路由的路径</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;news&#39;</span><span class="token punctuation">,</span>
          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;../components/HomeNews&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;messages&#39;</span><span class="token punctuation">,</span>
          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;../components/HomeMessage&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>我是首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>home/news<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>新闻<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/home/messages<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>消息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意：以<code>/</code>开头的嵌套路径会被当做根路径，使得在使用嵌套组件时无需设置嵌套的路径</strong><strong>（即在使用嵌套路由时无需再前面使用<code>/</code>，否则父路径将会无效，而是作为单独的路径存在）</strong></p></blockquote><h3 id="参数传递" tabindex="-1"><a class="header-anchor" href="#参数传递"><span>参数传递</span></a></h3><ul><li>传递参数主要有两种类型：params和query</li><li>params类型： <ul><li>配置路由格式：<code>/router/:idname</code></li><li>传递的方式：<code>在path后面跟上对应的值</code></li><li>传递后形成的路径：<code>/router/123 或/router/abcd等</code></li></ul></li><li>query类型： <ul><li>配置路由格式：<code>/router</code>，即是普通配置</li><li>传递的方式：<code>对象中使用query的key作为传递方式</code></li><li>传递后形成的路径：<code>/router?id=123 或 /router?id=abc等</code></li><li>url中query的位置： <ul><li><code>URI = scheme:[//authority]path[?query][#fragment] </code></li><li><code>authority = [userinfo@]host[:port]</code></li><li><img src="`+y+`" alt="image-20210416003100883"></li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
	<span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">&#39;/params/:id&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">component</span><span class="token operator">:</span>Params
<span class="token punctuation">}</span>

<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">&#39;/xxx&#39;</span>
  <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">{</span>
  	<span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">&#39;198&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.params只能用name来引入路由，query用path/name来引入</p><p>2.params类似于post，query更加类似于我们ajax中get传参，说的再简单一点，前者在浏览器地址栏中不显示参数，后者显示，所以params传值相对安全一些。</p><p>3.取值用法类似分别是this.$route.params.name和this.$route.query.name</p><p>4.params传值一刷新就没了，query传值刷新还存在</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ path: &#39;/profile&#39;, query:{name:&#39;willy&#39;, age:22, heigth:188}}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">replace</span><span class="token punctuation">&gt;</span></span>档案1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&#39;</span>/user/&#39;+userid<span class="token punctuation">&quot;</span></span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>用户1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 通过v-bind绑定。带单引号里面的内容为真实的，其他为字符串/变量 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>profileClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>档案2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>用户2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;App&#39;</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">userid</span><span class="token operator">:</span> <span class="token string">&#39;lisi&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">profileClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/profile&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;willy&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>
          <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">199</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">userClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/user/&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// router/index.js</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span>

Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/user/:userid&#39;</span><span class="token punctuation">,</span>  <span class="token comment">//此userid时传给compents/User.vue中js请求的userid传的值</span>
      <span class="token comment">// component: User</span>
      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;../components/User&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/profile&#39;</span><span class="token punctuation">,</span>
      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;../components/Profile&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="route与-router区别" tabindex="-1"><a class="header-anchor" href="#route与-router区别"><span><code>$route</code>与<code>$router</code>区别</span></a></h3><ul><li><code>$router</code>为<code>VueRouter</code>实例，想要导航到不同<code>URL</code>，则使用<code>$router.push</code>方法（vue原型里面定义的方法）</li><li><code>$route</code>为当前<code>router</code>跳转对象，里面可以获取<code>name、path、query、params</code>等（index定义的path对象）</li></ul><h3 id="keep-alive与vue-router" tabindex="-1"><a class="header-anchor" href="#keep-alive与vue-router"><span><code>keep-alive</code>与<code>vue-router</code></span></a></h3><ul><li><code>keep-alive</code>是vue内置的一个组件，可以使被包含的组件保留状态，避免重新渲染(渲染过程可通过<code>create</code>声明函数来验证) <ul><li>一般结合路由和状态路由一起使用，用于缓存组件</li><li><code>keep-alive</code>标签提供<code>include和exclude</code>属性，两个属性都支持字符串或正则表达式。 <ul><li><code>kepp-alive</code>的<code>include</code>属性：只有名称匹配的组件会被缓存</li><li><code>keep-alive</code>的<code>exclude</code>属性：任何名称匹配的组件都不会被缓存</li></ul></li><li>（其两种属性中的值为定义组件的<code>name</code>值，且exclude优先级比include高）</li><li>对应两个钩子函数 activated 和 deactivated ，当组件被激活时，触发钩子函数 activated，当组件被移除时，触发钩子函数 deactivated</li></ul></li><li><code>router-view</code>也是一个组件，如果直接被包在<code>keep-alive</code>里，所有的路径匹配的视图组件都会被缓存。</li><li><code>path</code>属性离开时的路径在<code>beforeRouteLeave()</code>方法中记录。</li></ul><div class="language-App.vue line-numbers-mode" data-ext="App.vue" data-title="App.vue"><pre class="language-App.vue"><code>&lt;template&gt;
  &lt;div id=&quot;app&quot;&gt;
    &lt;router-link to=&quot;/home&quot; tag=&quot;button&quot; replace&gt;首页1&lt;/router-link&gt;
    &lt;router-link to=&quot;/about&quot; tag=&quot;button&quot; replace&gt;关于1&lt;/router-link&gt;

    &lt;keep-alive include=&quot;Home&quot;&gt;
    &lt;!-- include属性为包含其内容模块，值是组件页面中js定义的name值    exclude为匹配的组件不会被缓存 --&gt;
      &lt;router-view&gt;&lt;/router-view&gt;
    &lt;/keep-alive&gt;
  &lt;/div&gt;
&lt;/template&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-index.js line-numbers-mode" data-ext="index.js" data-title="index.js"><pre class="language-index.js"><code>//去掉默认路径的重定向
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- Home.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/home/news<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>新闻<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/home/messages<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>消息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Home&quot;</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;这是一个消息&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/home/news&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">//activated 和 deactivated这两个函数只有该组件被保持了状态使用keep-alive时，才是有效的</span>
  <span class="token function">activated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">beforeRouteLeave</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>path <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>path<span class="token punctuation">;</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置路径别名-文件路径引用问题" tabindex="-1"><a class="header-anchor" href="#配置路径别名-文件路径引用问题"><span>配置路径别名(文件路径引用问题)</span></a></h3><ul><li>在<code>build/webpack.base.conf.js</code>中的<code>resolve:{alias}</code>中配置路径的别名(节省了书写路径中多个<code>../</code>繁杂容易出错的操作)</li><li>注意：src属性里面，需要在前面添加<code>~</code>符号</li></ul><div class="language-webpack.base.conf.js line-numbers-mode" data-ext="webpack.base.conf.js" data-title="webpack.base.conf.js"><pre class="language-webpack.base.conf.js"><code>resolve: {
	extensions: [&#39;.js&#39;, &#39;.vue&#39;, &#39;.json&#39;],
	alias: {
		&#39;vue$&#39;: &#39;vue/dist/vue.esm.js&#39;,
		&#39;@&#39;: resolve(&#39;src&#39;),
		&#39;assets&#39;: &#39;src/assets&#39;
	}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-修改的文件 line-numbers-mode" data-ext="修改的文件" data-title="修改的文件"><pre class="language-修改的文件"><code>&lt;img src=&quot;~assets/img/index.svg&quot;&gt;

import TabBar from &quot;@/components/tab-bar/TabBar&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="静态文件引用" tabindex="-1"><a class="header-anchor" href="#静态文件引用"><span>静态文件引用</span></a></h3><h4 id="assets文件夹与static文件夹的区别" tabindex="-1"><a class="header-anchor" href="#assets文件夹与static文件夹的区别"><span>assets文件夹与static文件夹的区别</span></a></h4><ol><li>assets文件是src下的，所以最后运行时需要进行打包，而static文件不需要打包就直接放在最终的文件中</li><li>assets中的文件在vue中的template/style下用../这种相对路径的形式进行引用，在script下必须用@import的方式引入，而static下的文件在**.vue中的任何地方都只要使用../这种相对路径的方式引入**</li><li>assets用来放置样式、静态图片，只要src下面的组件中用到的资源就放在assets中；static用来放没有npm包的第三方插件，字体文件</li></ol><p><strong>注意：静态文件(如excel、world文档等)的引入一般放入static中</strong>；如果放在src下，项目打包后会找不到该文件的路径而出错</p><h4 id="vue如何引入其他静态文件" tabindex="-1"><a class="header-anchor" href="#vue如何引入其他静态文件"><span>vue如何引入其他静态文件</span></a></h4><ol><li>src目录下的资源只能import或require方式引入</li><li>想静态引入需建立一个与src同级的目录(如static)，然后把静态资源放入该文件夹下 <strong>注意：一定要放在static文件夹下，否则会报错</strong></li></ol><h3 id="账号登录缓存" tabindex="-1"><a class="header-anchor" href="#账号登录缓存"><span>账号登录缓存</span></a></h3><ul><li>通过<code>cookie</code>在客户端记录状态</li><li>通过<code>session</code>在服务端记录状态</li><li>通过<code>token</code>方式维持状态 <ul><li><code>token</code>只在打开浏览器时存在，所以存放在<code>sessionStorage</code>中</li><li><code>window.sessionStorage.setItem(&quot;token&quot;, res.data.token);</code></li><li>清除token：<code>window.sessionStorage.clear();</code></li></ul></li></ul><p><img src="`+q+`" alt="image-20210731230204839"></p><h3 id="导航守卫-可做权限验证" tabindex="-1"><a class="header-anchor" href="#导航守卫-可做权限验证"><span>导航守卫（可做权限验证）</span></a></h3><ul><li><p><code>vue-router</code> 提供的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导航过程中：全局的, 单个路由独享的, 或者组件级的。</p></li><li><p>导航守卫：路由跳转过程中一些钩子函数。每个过程都有一个函数，这个函数能让你操作一些其他的事情(点击该页路由链接，页面的标题也会随之改变)</p></li></ul><h4 id="全局前置守卫router-beforeeach" tabindex="-1"><a class="header-anchor" href="#全局前置守卫router-beforeeach"><span>全局前置守卫<code>router.beforeEach()</code></span></a></h4><p>确保 next 函数在任何给定的导航守卫中都被严格调用一次。它可以出现多于一次，但是只能在所有的逻辑路径都不重叠的情况下，否则钩子永远都不会被解析或报错。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/home&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// component: Home</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;../components/Home&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">{</span>		<span class="token comment">//元数据（描述数据的数据）</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;首页&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  routes<span class="token punctuation">,</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;history&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>	<span class="token comment">//前置守卫gaurd</span>
  <span class="token comment">// document.title = to.meta.title;</span>
  document<span class="token punctuation">.</span>title <span class="token operator">=</span> to<span class="token punctuation">.</span>matched<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title <span class="token comment">//解决子路由导航问题</span>
  <span class="token comment">// to 将要访问的路径, from 代表从哪个路径跳转而来, next 是一个函数，表示放行</span>
  <span class="token comment">//     next()  放行    next(&#39;/login&#39;)  强制跳转</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 获取token</span>
  <span class="token keyword">const</span> tokenStr <span class="token operator">=</span> window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tokenStr<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> router
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>全局解析守卫<code>router.beforeResolve()</code></strong>：与<code>router.beforeEach</code> 类似，区别是在导航被确认之前，<strong>同时在所有组件内守卫和异步路由组件被解析之后</strong>，解析守卫就被调用。</p><p><strong>全局后置钩子<code>router.afterEach()</code>：钩子钩子不会接受 <code>next</code> 函数也不会改变导航本身。</strong></p><div class="language-index.js line-numbers-mode" data-ext="index.js" data-title="index.js"><pre class="language-index.js"><code>router.afterEach((to, from) =&gt; {
  // ...
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>路由独享守卫</strong></p><div class="language-index.js line-numbers-mode" data-ext="index.js" data-title="index.js"><pre class="language-index.js"><code>const router = new VueRouter({
  routes: [
    {
      path: &#39;/foo&#39;,
      component: Foo,
      beforeEnter: (to, from, next) =&gt; {
        // ...
      }
    }
  ]
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="组件内的守卫" tabindex="-1"><a class="header-anchor" href="#组件内的守卫"><span>组件内的守卫</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Foo <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">...</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token function">beforeRouteEnter</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在渲染该组件的对应路由被 confirm 前调用</span>
    <span class="token comment">// 不！能！获取组件实例 \`this\`</span>
    <span class="token comment">// 因为当守卫执行前，组件实例还没被创建</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">beforeRouteUpdate</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在当前路由改变，但是该组件被复用时调用</span>
    <span class="token comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span>
    <span class="token comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span>
    <span class="token comment">// 可以访问组件实例 \`this\`</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">beforeRouteLeave</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 导航离开该组件的对应路由时调用</span>
    <span class="token comment">// 可以访问组件实例 \`this\`</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="完整的导航解析流程" tabindex="-1"><a class="header-anchor" href="#完整的导航解析流程"><span><strong>完整的导航解析流程</strong></span></a></h4><ol><li>导航被触发。</li><li>在失活的组件里调用 <code>beforeRouteLeave</code> 守卫。</li><li>调用全局的 <code>beforeEach</code> 守卫。</li><li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫 (2.2+)。</li><li>在路由配置里调用 <code>beforeEnter</code>。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 <code>beforeRouteEnter</code>。</li><li>调用全局的 <code>beforeResolve</code> 守卫 (2.5+)。</li><li>导航被确认。</li><li>调用全局的 <code>afterEach</code> 钩子。</li><li>触发 DOM 更新。</li><li>调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数，创建好的组件实例会作为回调函数的参数传入。</li></ol><h3 id="navigationduplicated-avoided-redundant-navigation-to-current-location" tabindex="-1"><a class="header-anchor" href="#navigationduplicated-avoided-redundant-navigation-to-current-location"><span><code>NavigationDuplicated: Avoided redundant navigation to current location</code></span></a></h3><blockquote><p>vue项目中，点击左侧菜单栏中的项，重复点击时会报错，解决这个问题，首先找到项目中管理路由的文件，一般是router/index.js,有的直接就是router.js。 然后看vue-router的引入名称，</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//情况一：</span>
<span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span>
<span class="token comment">// 解决ElementUI导航栏中的vue-router在3.0版本以上重复点菜单报错问题</span>
<span class="token keyword">const</span> originalPush <span class="token operator">=</span> <span class="token class-name">VueRouter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push
<span class="token class-name">VueRouter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">location</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">originalPush</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">//情况二：</span>
<span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span><span class="token punctuation">;</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 解决ElementUI导航栏中的vue-router在3.0版本以上重复点菜单报错问题</span>
<span class="token keyword">const</span> originalPush <span class="token operator">=</span> <span class="token class-name">Router</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push
 
<span class="token class-name">Router</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">location</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">originalPush</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="vuex" tabindex="-1"><a class="header-anchor" href="#vuex"><span>Vuex</span></a></h2><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## Vuex</span>
- Vuex是一个专为Vue.js应用程序开发的状态管理模式。
  - 采用 <span class="token string">&#39;集中式存储管理&#39;</span> 应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。
  - Vuex也集成到Vue的官方调试工具<span class="token variable"><span class="token variable">\`</span>devtools extension<span class="token variable">\`</span></span>，提供了诸如零配置的<span class="token variable"><span class="token variable">\`</span>time-travel<span class="token variable">\`</span></span>调试，状态快照导入导出等高级调试功能。
- vuex就是为了提供一个在多个组件间共享状态的插件。
- 刷新页面vuex中的数据会丢失：vuex 数据存放在内存中，当你刷新页面后会重新加载页面，内存就会被释放，js垃圾回收，localstorage 存在本地存储中


Vuex 与其它状态管理库如 mobx、redux 不同的是，Vuex 不能单独运行，它强依赖于 Vue 并且使以 vue plugin 的形式存在的。
Vuex 的设计思想是将数据存放到全局的 store，再将 store 挂载到每个 vue 实例组件中，利用 Vue.js 的细粒度数据响应机制来进行高效的状态更新。


<span class="token comment">### vue 的 store 是如何挂载注入到组件中？</span>
<span class="token number">1</span>. vuex 是插件，当使用 Vue.use<span class="token punctuation">(</span><span class="token punctuation">)</span> 会调用 vuex 暴露的 <span class="token function">install</span> 方法。
<span class="token number">2</span>. vuex 利用 mixin 方法，在 beforeCreated 生命周期调用了自身的 vueInit 方法，将 <span class="token variable">$store</span> 注入到每个实例中。
<span class="token number">3</span>. Vue.mixin<span class="token punctuation">(</span><span class="token punctuation">)</span> 有个特性是当该方法被调用后，所有的 vue 实例都会被混入传入的参数。


<span class="token comment">### vuex 的 state 和 getters 是如何映射到各个组件实例中响应式更新状态？</span>
vuex 中的响应式是依赖于 vue 的 data 本身是响应式的。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="使用vuex管理状态" tabindex="-1"><a class="header-anchor" href="#使用vuex管理状态"><span>使用<code>vuex</code>管理状态</span></a></h3><ul><li>安装vuex：<code>npm install vuex --save</code></li><li>安装插件Vue.use(Vuex)\`，在src下新建store文件夹，新建index.js</li><li>一般不会直接使用<code>$store.state.count</code>获取vuex中的状态，也不是直接使用<code>$store.state.count++</code>来操作vuex中的状态。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>

<span class="token comment">// 1.安装插件</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span>

<span class="token comment">// 2.创建对象</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 状态集合</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token comment">// 具体的状态数据</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 3.导出store对象</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> store
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+f+`" alt="image-20210505164210975"></p><ul><li>Vue Components是vue组件</li><li>Mutations ：更改 Vuex 的 store 中的状态的唯一方法是提交 mutation</li><li>State 是vuex中状态的集合</li><li>Actions与Mutations 类似，经常与后端交互，不同于Action 提交的是 mutation，而不是直接变更状态； 可包含任意异步操作。</li></ul><h3 id="state-单一状态树" tabindex="-1"><a class="header-anchor" href="#state-单一状态树"><span>State（单一状态树）</span></a></h3><ul><li>Vuex 使用<strong>单一状态树</strong>用一个对象就包含全部应用层级状态，即每个应用将仅仅包含一个 store 实例。单一状态树能够直接地定位任一特定的状态片段，在调试的过程中也能轻易获取整个当前应用状态的快照。</li><li>把数据所有相关的数据封装到一个对象(store实例)，无论是数据的状态(state)，以及对数据的操作(mutation、action)等都在store实例中，便于管理维护操作。</li><li>可直接通过<code>this.$store.state</code>获取state对象。</li></ul><h3 id="getters" tabindex="-1"><a class="header-anchor" href="#getters"><span>Getters</span></a></h3><ul><li>Getters类似计算属性，帮我们做一些重复的事情。</li><li>如果很多组件中需要计算出某个属性值，可能一般会将这个计算属性复制用filter函数或computed属性写很多遍，但是如果你有<strong>Getters</strong>只需计算一次即可（或通过让 getter 返回一个函数，来实现给 getter 传参）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 状态集合</span>
    <span class="token literal-property property">students</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;zzz&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">&#39;18&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;ttt&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">&#39;20&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;yyy&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">&#39;22&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">//获取年龄大于20岁的学生数量</span>
    <span class="token function-variable function">getStudentCounts</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">s</span> <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>age <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// vue页面中通过计算属性 computed 调用 getters</span>
<span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">stuCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>getStudents
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mutation-传递参数、状态更新" tabindex="-1"><a class="header-anchor" href="#mutation-传递参数、状态更新"><span>Mutation(传递参数、状态更新)</span></a></h3><ul><li><p>Vuex的store状态更新的唯一方式：<strong>提交Mutation</strong></p></li><li><p>提交更新数据的方法，必须是同步的(如果需要异步使用action)。</p></li><li><p>每个mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。回调函数是实际进行状态更改的地方，并且它会接受 state 作为第一个参数，提交载荷(Payload)作为第二个参数。</p></li><li><p>Mutation的定义方式：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">mutation</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">addStu</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> stu</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span> <span class="token comment">// 向数组中添加指定的stu</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">s</span> <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>id <span class="token operator">===</span> stu<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出打印查看state中是否有新增stu</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>通过Mutation更新</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>addStu<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>新增一个指定的学生<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

//methods中的方法
addStu() {
    const stu = { id: 114, name: &#39;ytz&#39;, age: &#39;35&#39;, }
    this.$store.commit(&#39;addStu&#39;, stu)
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="mutation的提交风格" tabindex="-1"><a class="header-anchor" href="#mutation的提交风格"><span>mutation的提交风格</span></a></h4><ol><li><p>普通提交风格</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;addStudent&#39;</span><span class="token punctuation">,</span> stu<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//把stu作为参数传递给mutation的addStudent函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>特殊的提交封装</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 页面的 methods 中的函数</span>
<span class="token function">addStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">117</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;willy&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token comment">// this.$store.commit(&#39;addStudent&#39;,stu);	//把stu作为参数传递给mutation的addStudent函数</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;addStudent&#39;</span><span class="token punctuation">,</span> stu <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//传过去的是一个对象payload（载荷）{type: &#39;addCount&#39;,stu：stu}	</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// index.js 中的 getters 中的函数</span>
<span class="token function">addCount</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 此时传入的就不是一个count值了，而是一个对象</span>
  state<span class="token punctuation">.</span>count <span class="token operator">+=</span> payload<span class="token punctuation">.</span>count
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vuex的响应式原理" tabindex="-1"><a class="header-anchor" href="#vuex的响应式原理"><span>Vuex的响应式原理</span></a></h3><ul><li><p>通过<code>Vue.set()、Vue.delete()</code>方法来响应式更新state中的数据</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// store.js</span>
<span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&#39;男&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token literal-property property">mutation</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">updateInfo</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Vue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>user<span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- App.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>{{ $store.state.user }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>updateInfo()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>修改信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

//methods
updateInfo () {
    this.$store.commit(&#39;updateInfo&#39;, 12)
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="mutation的类型常量" tabindex="-1"><a class="header-anchor" href="#mutation的类型常量"><span>mutation的类型常量</span></a></h4><p>一个vue文件中有关mutation的方法太多了，常常可能写错，所有可以在store文件夹下定义一个<code>mutation-type.js</code>的常量。</p><ol><li>定义一个<code>mutation-type.js</code>的常量</li></ol><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>export const UPDATEINFO = &#39;updateInfo&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>修改<code>App.vue</code>的updateinfo方法</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">UPDATEINFO</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./store/mutation-type&#39;</span>
<span class="token punctuation">[</span><span class="token constant">UPDATEINFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token constant">UPDATEINFO</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>修改store的<code>index.js</code>，将mutation的方法名也改成常量使用方式</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">UPDATEINFO</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./mutation-type&#39;</span>
<span class="token punctuation">[</span><span class="token constant">UPDATEINFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Vue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>user<span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>
    <span class="token comment">// Vue.delete(state.user, age)// 响应式删除age</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样保证了所有的方法都定义在<code>mutation-type.js</code>中，不会出问题。</p><h4 id="mutation同步函数" tabindex="-1"><a class="header-anchor" href="#mutation同步函数"><span>mutation同步函数</span></a></h4><ul><li><p>通常Vuex要求mutation中的方法必须是同步方法。</p></li><li><p>方便<code>devtools</code>工具捕捉mutation的快照（异步操作<code>devtools</code>不能很好的追踪操作什么时候完成）</p></li><li><p>即强调，不要用Mutation中进行异步操作。</p></li><li><p>使用mutation操作更新state的时候，使用异步修改数据，用actions代替。</p></li></ul><h3 id="actions" tabindex="-1"><a class="header-anchor" href="#actions"><span>Actions</span></a></h3><ul><li><p>使用actions操作更新state时，使用异步修改数据</p></li><li><p>Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。</li><li>dev-tools也能跟踪到state的变化，通过<code>$store.dispacth()</code>方法来调用actions，发送异步请求，在actions中需要提交mutation来修改state。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">mutation</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">updateName</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// context：上下文</span>
    <span class="token function">aUpdateInfo</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token string">&#39;响应成功&#39;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token constant">UPDATEINFO</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--</span> <span class="token attr-name">App.vue</span> <span class="token attr-name">--</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>异步修改的信息:{{ $store.state.user }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>aUpdateInfo()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>异步修改信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

// methods 的方法
aUpdateInfo () {
    this.$store.dispatch(&#39;aUpdateInfo&#39;, &#39;lisi&#39;).then(response =&gt; {
        console.log(response)
    })
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Actions 支持同样的载荷方式(<strong>payload</strong>)和对象方式进行分发</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 以载荷形式分发</span>
store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;aUpdateInfo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;lisi&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 以对象形式分发</span>
store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;aUpdateInfo&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;lisi&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="moudules-模块" tabindex="-1"><a class="header-anchor" href="#moudules-模块"><span>moudules（模块）</span></a></h3><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p><p>为了解决以上问题，Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> moduleA<span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> moduleB
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>a <span class="token comment">// -&gt; moduleA 的状态</span>
store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>b <span class="token comment">// -&gt; moduleB 的状态</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="模块的局部状态" tabindex="-1"><a class="header-anchor" href="#模块的局部状态"><span>模块的局部状态</span></a></h4><ol><li><p>模块内部的mutation 和 getter，接收的第一个参数是<strong>模块的局部状态对象</strong>。</p></li><li><p>模块内部的 action，局部状态是 <code>context.state</code> ，根节点状态则为 <code>context.rootState</code>。</p></li><li><p>对于模块内部的 getter，第三个参数是根节点状态。</p></li><li><blockquote><p>注意：只有模块才有根节点</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 这里的 \`state\` 对象是模块的局部状态</span>
      state<span class="token punctuation">.</span>count<span class="token operator">++</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">incrementIfOddOnRootSum</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> context<span class="token punctuation">.</span>rootState<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">doubleCount</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> getters<span class="token punctuation">,</span> rootState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rootState<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token comment">// 获取的是根状态的count</span>
      <span class="token keyword">return</span> state<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意actions的context</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">incrementIfOddOnRootSum</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> state<span class="token punctuation">,</span> commit<span class="token punctuation">,</span> rootState <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> context<span class="token punctuation">.</span>rootState<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>{ state, commit, rootState }</code>对应<code>context</code>对象中的属性，使用ES6的对象解构。</p></li></ol><h4 id="动态-延迟加载vuex模块" tabindex="-1"><a class="header-anchor" href="#动态-延迟加载vuex模块"><span>动态/延迟加载Vuex模块</span></a></h4><ul><li><p><strong>动态模块</strong>相比静态模块来说，可以在 <strong>Vuex Store</strong> 创建后再进行注册。这种简洁的功能意味着我们不需要在应用程序初始化时下载动态模块，而是可以将其打包在不同的代码块中，或者在需要时延迟加载（使用<code>registerModule</code>方法延迟注册这个模块）</p></li><li><p><strong>如果模块只在特定的路由上需要</strong>，那么我们可以在适当的路由组件中动态注册它，这样它就不会打包在主文件中。</p></li><li><p><strong>如果模块只有在一些交互之后才需要</strong>，那么我们需要将动态模块注册与动态导入结合起来，并以适当的方法延迟加载模块。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// store.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> userAccountModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./modules/userAccount&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">user</span><span class="token operator">:</span> userAccountModule<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// Admin.vue</span>
<span class="token keyword">import</span> adminModule <span class="token keyword">from</span> <span class="token string">&#39;./admin.js&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token comment">// other component logic</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在这里动态注册模块</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">registerModule</span><span class="token punctuation">(</span><span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span> adminModule<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当组件被销毁时，取消注册</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">unregisterModule</span><span class="token punctuation">(</span><span class="token string">&#39;admin&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>重要提示：如果使用SSR模式，请确保在 mounted 钩子中 注册模块。否则，它可能导致内存泄漏，因为beforeDestroy钩子在服务器端不能执行。</p></blockquote><p><img src="`+x+`" alt="image-20210923111020342"></p><h3 id="项目结构" tabindex="-1"><a class="header-anchor" href="#项目结构"><span>项目结构</span></a></h3><p>Vuex 并不限制你的代码结构。但是，它规定了一些需要遵守的规则：</p><ol><li>应用层级的状态应该集中到单个 store 对象中。</li><li>提交 <strong>mutation</strong> 是更改状态的唯一方法，并且这个过程是同步的。</li><li>异步逻辑都应该封装到 <strong>action</strong> 里面。</li></ol><p>只要你遵守以上规则，如何组织代码随你便。如果你的 store 文件太大，只需将 action、mutation 和 getter 分割到单独的文件。</p><p>对于大型应用，我们会希望把 Vuex 相关代码分割到模块中。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>├── index.html
├── main.js
├── api
│   └── <span class="token punctuation">..</span>. <span class="token comment"># 抽取出API请求</span>
├── components
│   ├── App.vue
│   └── <span class="token punctuation">..</span>.
└── store
    ├── index.js          <span class="token comment"># 我们组装模块并导出 store 的地方</span>
    ├── actions.js        <span class="token comment"># 根级别的 action</span>
    ├── mutations.js      <span class="token comment"># 根级别的 mutation</span>
    └── modules
        ├── cart.js       <span class="token comment"># 购物车模块</span>
        └── products.js   <span class="token comment"># 产品模块</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="axios" tabindex="-1"><a class="header-anchor" href="#axios"><span>axios</span></a></h2><p><strong>网络模块选择</strong></p><ul><li>传统的AJAX是基于XMLHttpRequest(XHR)：配置和调用方式很混乱，编码繁杂，一般使用JQuery-Ajax;</li><li>JQuery-Ajax：相对于Vue该框架过于重量。</li><li>vue-resource：在vue2.0后不再更新和维护，对以后的项目开发维护存在隐患。</li><li>axios（ajax i/o system）特点：在浏览器中发送XMLHttpRequests请求；在node.js中发送http请求；支持Promise API；拦截请求和响应；转换请求和响应数据...</li></ul><p><strong>jsonp</strong></p><ul><li>使用JSONP原因：解决跨域访问的问题。</li><li>原理：JSONP核心在于通过<code>&lt;script&gt;</code>标签的src来帮助我们请求数据，将数据当做一个javascript的函数来执行，并且执行的过程中传入我们需要的json。</li><li>封装JSONP的核心在于监听window上的jsonp进行回调时的名称。</li></ul><h4 id="安装-使用axios" tabindex="-1"><a class="header-anchor" href="#安装-使用axios"><span>安装/使用axios</span></a></h4><ul><li>安装axios：<code>npm install axios --save</code></li><li>网站测试：<code>http://httpbin.org/</code></li><li>并发请求：使用<code>axios.all([])</code>，可以放入多个请求的数组，返回的结果是一个数组，使用<code>axios.spread</code>可将数组<code>[res1,res2]</code>展开为res1，res2。</li></ul><h4 id="axios请求方式" tabindex="-1"><a class="header-anchor" href="#axios请求方式"><span>axios请求方式</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">axios</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
axios<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token punctuation">,</span> config<span class="token punctuation">]</span><span class="token punctuation">)</span>
axios<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token punctuation">,</span> config<span class="token punctuation">]</span><span class="token punctuation">)</span>
axios<span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token punctuation">,</span> config<span class="token punctuation">]</span><span class="token punctuation">)</span>
axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">,</span> config<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
axios<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">,</span> config<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
axios<span class="token punctuation">.</span><span class="token function">patch</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">,</span> config<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>
<span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://123.207.32.32:8000/home/data&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">//专门针对get请求的参数拼接</span>
  <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;pop&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;get&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;axios.get模拟测试：&#39;</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// axios.post()</span>

<span class="token comment">//进行axios的全局配置</span>
axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">&#39;http://123.207.32.32:8000&#39;</span>
axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">1000</span>

<span class="token comment">//2、axios发送并发请求</span>
axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/home/multidata&#39;</span><span class="token punctuation">,</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/home/data&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;sell&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token number">4</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">/* .then(resluts =&gt;{
  // console.log(resluts)
}) */</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">spread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res1<span class="token punctuation">,</span>res2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;axios.spread,res1：&#39;</span><span class="token punctuation">,</span>res1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;axios.spread,res2：&#39;</span><span class="token punctuation">,</span>res2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="全局配置" tabindex="-1"><a class="header-anchor" href="#全局配置"><span>全局配置</span></a></h4><ul><li>因为有些代码段都是固定的，这时我们可进行一些抽取，利用axios的全局配置</li></ul><p><strong>常见的配置选项：</strong></p><ul><li>请求地址：<code>url:&#39;/user&#39;</code></li><li>请求类型：<code>method:&#39;get&#39;</code></li><li>请求路径：<code>baseURL:&#39;http://www.baidu.com/api&#39;</code></li><li>请求前的数据处理：<code>transformRequest:[function(data){}]</code></li><li>请求后的数据处理：<code>transformResponse:[function(data){}]</code></li><li>自定义的请求头：<code>headers:{&#39;x-Requested-With&#39;:&#39;XMLHttpRequest&#39;}</code></li><li>URL查询对象：<code>params:{id:12}</code></li><li>查询对象序列化函数：<code>paramsSerializer:function(params){}</code></li><li>request body：<code>data:{key:&#39;aa&#39;}</code></li><li>超时设置s：<code>timeout:1000</code></li><li>跨域是否带Token：<code>withCredentials:false</code></li><li>自定义请求处理：<code>adapter:function(resolve,reject,config){}</code></li><li>身份验证信息：<code>auth:{uname:&#39;willy&#39;,pwd:&#39;123&#39;}</code></li><li>相应的数据格式json/blod/document/arraybuffer/text/stream：<code>responseType:&#39;json&#39;</code></li></ul><h4 id="创建axios实例" tabindex="-1"><a class="header-anchor" href="#创建axios实例"><span>创建axios实例</span></a></h4><ul><li>不要对第三方框架过于依赖，即不要在多个页面嵌套axios请求，应进行封装（否则后期维护花费成本过高）</li><li>在src目录下创建<code>network</code>文件夹，存放网络请求文件，主文件为<code>request.js</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* request.js */</span>
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>
<span class="token comment">/* export function request(config, success, failure) {
  //创建axios实例
  const instancel = axios.create({
    baseURL: &#39;http://123.207.32.32:8000&#39;,
    timeout: 1000,
  })

  //发送真正的网络请求
  instancel(config)
    .then(res =&gt; {
      // console.log(res);
      success(res)
    }).catch(err =&gt; {
      // console.log(err);
      failure(err)
    })
} */</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> instancel <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">&#39;http://123.207.32.32:8000&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">//axios的拦截器 interceptors.request</span>
    instancel<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;interceptors.request的data：&#39;</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>

      <span class="token comment">//拦截data中不符合的信息</span>
      <span class="token comment">//发送请求时，在界面上显示加载中（请求）的图标</span>
      <span class="token comment">//某些网络请求（如登录携带token），必须携带写特殊的信息</span>

      <span class="token keyword">return</span> data <span class="token comment">//需要使用return返回结果，否则在main.js中的请求回调会输出error信息</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;interceptors.request的err：&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">//axios的响应拦截 interceptors.response</span>
    instancel<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;interceptors.response的res：&#39;</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>
      <span class="token keyword">return</span> res
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;interceptors.response的err：&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">// return instancel(config)</span>

    <span class="token comment">//发送真正的网络请求</span>
    <span class="token function">instancel</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">//回调函数：</span>
<span class="token comment">/* function test(aa, bb) {
  aa(&#39;hello&#39;);
  bb(&#39;hi&#39;);
}
test(function(res) {
  console.log(res);
},function (err) {
  console.log(err);
})
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* main.js */</span>
<span class="token comment">//封装axios请求中的request模块</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> request <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./network/request&#39;</span><span class="token punctuation">;</span>
<span class="token comment">/* request({
  url: &#39;/home/multidata&#39;
},res =&gt; {
  console.log(res);
},err =&gt; {
  console.log(err);
}) */</span>

<span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/home/multidata&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;request请求的数据：&#39;</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="axios的拦截器interceptors" tabindex="-1"><a class="header-anchor" href="#axios的拦截器interceptors"><span>axios的拦截器<code>interceptors</code></span></a></h4><ul><li><code>interceptors.use()</code>携带两个参数，成功与失败的参数</li><li><code>interceptors.request</code>：拦截请求</li><li><code>interceptors.response</code>：响应拦截</li></ul>`,328),V=[j];function S(M,$){return s(),a("div",null,V)}const O=n(w,[["render",S],["__file","Vue2.html.vue"]]),C=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue2.html","title":"","lang":"zh-CN","frontmatter":{"Author":"willysliang","CreateTime":"2022-08-21T16:19:19.000Z","Modifier":"willysliang","ModifiedTime":"2022-12-28T10:28:44.000Z","Description":"Vue2"},"headers":[{"level":2,"title":"Vue2.0","slug":"vue2-0","link":"#vue2-0","children":[]},{"level":2,"title":"VUE的认知","slug":"vue的认知","link":"#vue的认知","children":[{"level":3,"title":"MVC 与MVVM 间的区别","slug":"mvc-与mvvm-间的区别","link":"#mvc-与mvvm-间的区别","children":[]},{"level":3,"title":"vue实现数据双向绑定原理","slug":"vue实现数据双向绑定原理","link":"#vue实现数据双向绑定原理","children":[]},{"level":3,"title":"Vue的生命周期","slug":"vue的生命周期","link":"#vue的生命周期","children":[]},{"level":3,"title":"虚拟DOM","slug":"虚拟dom","link":"#虚拟dom","children":[]},{"level":3,"title":"Diff算法","slug":"diff算法","link":"#diff算法","children":[]}]},{"level":2,"title":"语法","slug":"语法","link":"#语法","children":[{"level":3,"title":"插值","slug":"插值","link":"#插值","children":[]},{"level":3,"title":"v-bind:（缩写：）","slug":"v-bind-缩写","link":"#v-bind-缩写","children":[]},{"level":3,"title":"v-on:（缩写@）","slug":"v-on-缩写","link":"#v-on-缩写","children":[]},{"level":3,"title":"v-on事件修饰符","slug":"v-on事件修饰符","link":"#v-on事件修饰符","children":[]},{"level":3,"title":"数据双向绑定v-model","slug":"数据双向绑定v-model","link":"#数据双向绑定v-model","children":[]},{"level":3,"title":"循环v-for和key属性","slug":"循环v-for和key属性","link":"#循环v-for和key属性","children":[]},{"level":3,"title":"v-if","slug":"v-if","link":"#v-if","children":[]},{"level":3,"title":"vue中this的必要性","slug":"vue中this的必要性","link":"#vue中this的必要性","children":[]},{"level":3,"title":"计算属性computed","slug":"计算属性computed","link":"#计算属性computed","children":[]},{"level":3,"title":"侦听属性watch","slug":"侦听属性watch","link":"#侦听属性watch","children":[]},{"level":3,"title":"template标签","slug":"template标签","link":"#template标签","children":[]},{"level":3,"title":"scoped属性","slug":"scoped属性","link":"#scoped属性","children":[]},{"level":3,"title":"深度修改样式/deep/或>>>","slug":"深度修改样式-deep-或","link":"#深度修改样式-deep-或","children":[]},{"level":3,"title":"动画","slug":"动画","link":"#动画","children":[]},{"level":3,"title":"过滤器","slug":"过滤器","link":"#过滤器","children":[]}]},{"level":2,"title":"组件","slug":"组件","link":"#组件","children":[{"level":3,"title":"全局组件与局部组件","slug":"全局组件与局部组件","link":"#全局组件与局部组件","children":[]},{"level":3,"title":"组件data","slug":"组件data","link":"#组件data","children":[]},{"level":3,"title":"组件name的作用","slug":"组件name的作用","link":"#组件name的作用","children":[]},{"level":3,"title":"组件懒加载","slug":"组件懒加载","link":"#组件懒加载","children":[]},{"level":3,"title":"父子组件的通信","slug":"父子组件的通信","link":"#父子组件的通信","children":[]},{"level":3,"title":"自定义事件$emit与$on","slug":"自定义事件-emit与-on","link":"#自定义事件-emit与-on","children":[]},{"level":3,"title":"跨多级组件(嵌套关系)的通信","slug":"跨多级组件-嵌套关系-的通信","link":"#跨多级组件-嵌套关系-的通信","children":[]},{"level":3,"title":"父子组件的访问方式","slug":"父子组件的访问方式","link":"#父子组件的访问方式","children":[]},{"level":3,"title":"slot组件的插槽","slug":"slot组件的插槽","link":"#slot组件的插槽","children":[]}]},{"level":2,"title":"响应式原理","slug":"响应式原理","link":"#响应式原理","children":[{"level":3,"title":"动态修改Vue中的页面标题","slug":"动态修改vue中的页面标题","link":"#动态修改vue中的页面标题","children":[]},{"level":3,"title":"vue2响应式的缺陷","slug":"vue2响应式的缺陷","link":"#vue2响应式的缺陷","children":[]},{"level":3,"title":"vue中响应式值变化处理this.$set()","slug":"vue中响应式值变化处理this-set","link":"#vue中响应式值变化处理this-set","children":[]},{"level":3,"title":"重置vue的data中的数据","slug":"重置vue的data中的数据","link":"#重置vue的data中的数据","children":[]},{"level":3,"title":"this.$nextTick()异步更新队列","slug":"this-nexttick-异步更新队列","link":"#this-nexttick-异步更新队列","children":[]},{"level":3,"title":"无痕刷新","slug":"无痕刷新","link":"#无痕刷新","children":[]}]},{"level":2,"title":"模块化开发","slug":"模块化开发","link":"#模块化开发","children":[{"level":3,"title":"可视化管理 vue ui","slug":"可视化管理-vue-ui","link":"#可视化管理-vue-ui","children":[]},{"level":3,"title":"脚手架CLI","slug":"脚手架cli","link":"#脚手架cli","children":[]},{"level":3,"title":"脚手架2","slug":"脚手架2","link":"#脚手架2","children":[]},{"level":3,"title":"脚手架3","slug":"脚手架3","link":"#脚手架3","children":[]}]},{"level":2,"title":"路由","slug":"路由","link":"#路由","children":[{"level":3,"title":"路由的使用","slug":"路由的使用","link":"#路由的使用","children":[]},{"level":3,"title":"路由底层原理","slug":"路由底层原理","link":"#路由底层原理","children":[]},{"level":3,"title":"hash模式与history模式","slug":"hash模式与history模式","link":"#hash模式与history模式","children":[]},{"level":3,"title":"通过代码修改路由","slug":"通过代码修改路由","link":"#通过代码修改路由","children":[]},{"level":3,"title":"动态路由(携带参数)","slug":"动态路由-携带参数","link":"#动态路由-携带参数","children":[]},{"level":3,"title":"打包文件的解析（路由的懒加载）","slug":"打包文件的解析-路由的懒加载","link":"#打包文件的解析-路由的懒加载","children":[]},{"level":3,"title":"嵌套路由（子路由）","slug":"嵌套路由-子路由","link":"#嵌套路由-子路由","children":[]},{"level":3,"title":"参数传递","slug":"参数传递","link":"#参数传递","children":[]},{"level":3,"title":"$route与$router区别","slug":"route与-router区别","link":"#route与-router区别","children":[]},{"level":3,"title":"keep-alive与vue-router","slug":"keep-alive与vue-router","link":"#keep-alive与vue-router","children":[]},{"level":3,"title":"配置路径别名(文件路径引用问题)","slug":"配置路径别名-文件路径引用问题","link":"#配置路径别名-文件路径引用问题","children":[]},{"level":3,"title":"静态文件引用","slug":"静态文件引用","link":"#静态文件引用","children":[]},{"level":3,"title":"账号登录缓存","slug":"账号登录缓存","link":"#账号登录缓存","children":[]},{"level":3,"title":"导航守卫（可做权限验证）","slug":"导航守卫-可做权限验证","link":"#导航守卫-可做权限验证","children":[]},{"level":3,"title":"NavigationDuplicated: Avoided redundant navigation to current location","slug":"navigationduplicated-avoided-redundant-navigation-to-current-location","link":"#navigationduplicated-avoided-redundant-navigation-to-current-location","children":[]}]},{"level":2,"title":"Vuex","slug":"vuex","link":"#vuex","children":[{"level":3,"title":"使用vuex管理状态","slug":"使用vuex管理状态","link":"#使用vuex管理状态","children":[]},{"level":3,"title":"State（单一状态树）","slug":"state-单一状态树","link":"#state-单一状态树","children":[]},{"level":3,"title":"Getters","slug":"getters","link":"#getters","children":[]},{"level":3,"title":"Mutation(传递参数、状态更新)","slug":"mutation-传递参数、状态更新","link":"#mutation-传递参数、状态更新","children":[]},{"level":3,"title":"Vuex的响应式原理","slug":"vuex的响应式原理","link":"#vuex的响应式原理","children":[]},{"level":3,"title":"Actions","slug":"actions","link":"#actions","children":[]},{"level":3,"title":"moudules（模块）","slug":"moudules-模块","link":"#moudules-模块","children":[]},{"level":3,"title":"项目结构","slug":"项目结构","link":"#项目结构","children":[]}]},{"level":2,"title":"axios","slug":"axios","link":"#axios","children":[]}],"git":{"updatedTime":1701161860000,"contributors":[{"name":"willy","email":"willysliang","commits":3}]},"filePathRelative":"前端框架/Vue2.md"}');export{O as comp,C as data};
