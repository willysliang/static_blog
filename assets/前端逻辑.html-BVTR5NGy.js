import{_ as n,o as s,c as a,b as p}from"./app-Bvx-HY_0.js";const t={},e=p(`<h2 id="前端逻辑" tabindex="-1"><a class="header-anchor" href="#前端逻辑"><span>前端逻辑</span></a></h2><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h2><h4 id="判断一个值是否是数组" tabindex="-1"><a class="header-anchor" href="#判断一个值是否是数组"><span>判断一个值是否是数组</span></a></h4><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 判断一个值是否是数组</span>
const str <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span>
const arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">]</span>

<span class="token number">1</span>. Array.prototype.isArray<span class="token punctuation">(</span><span class="token punctuation">)</span>
      Array.isArray<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>	// <span class="token boolean">true</span>
      Array.isArray<span class="token punctuation">(</span>str<span class="token punctuation">)</span>	// <span class="token boolean">false</span>


<span class="token number">2</span>. Object.prototype.toString.call<span class="token punctuation">(</span><span class="token punctuation">)</span>
		const isArray <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> Object.prototype.toString.call<span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;[object Array]&#39;</span>


<span class="token number">3</span>. instanceof
	使用 instanceof 检验构造函数的 prototype 属性是否出现在对象的原型链中，返回一个 Boolean。
    arr instanceof Array // <span class="token boolean">true</span>
    str instanceof Array // <span class="token boolean">false</span>
	

<span class="token number">4</span>. constructor
	使用 constructor 判断该变量的构造函数是否为 Array
		arr.constructor <span class="token operator">==</span><span class="token operator">=</span> Array // <span class="token boolean">true</span>
		

<span class="token number">5</span>. 封装
		const isArray <span class="token operator">=</span> Array.isArray <span class="token operator">||</span> <span class="token variable"><span class="token punctuation">((</span>list<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>{}.toString.call<span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> &#39;[object Array]&#39;<span class="token punctuation">))</span></span>
		cosole.log<span class="token punctuation">(</span>isArray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">))</span> // <span class="token boolean">true</span>
		console.log<span class="token punctuation">(</span>isArray<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">))</span>	// <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="判断数组是否包含某值" tabindex="-1"><a class="header-anchor" href="#判断数组是否包含某值"><span>判断数组是否包含某值</span></a></h4><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 判断数组是否包含某值</span>
const arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span>, <span class="token string">&#39;yellow&#39;</span>, <span class="token string">&#39;black&#39;</span>, <span class="token string">&#39;white&#39;</span>, <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">]</span>

<span class="token comment">### 1. Array.prototype.indexOf()：判断数组是否存在某个值，如果存在则返回数组元素下标，否则返回 -1。</span>
    arr.indexOf<span class="token punctuation">(</span><span class="token string">&#39;plum&#39;</span><span class="token punctuation">)</span>	// <span class="token parameter variable">-1</span>
    arr.indexOf<span class="token punctuation">(</span><span class="token string">&#39;yellow&#39;</span><span class="token punctuation">)</span>	// <span class="token number">1</span>
    arr.indexOf<span class="token punctuation">(</span><span class="token string">&#39;yellow&#39;</span>, <span class="token number">2</span><span class="token punctuation">)</span>	// <span class="token number">4</span>
    arr.indexOf<span class="token punctuation">(</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token operator">=</span> <span class="token parameter variable">-1</span>	// <span class="token boolean">true</span>


<span class="token comment">### 2. Array.prototype.includes()：判断数组中是否存在某个值，如果存在返回 true，否则返回 false。</span>
    arr.includes<span class="token punctuation">(</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span>	// <span class="token boolean">true</span>
    arr.includes<span class="token punctuation">(</span><span class="token string">&#39;plum&#39;</span><span class="token punctuation">)</span>	// <span class="token boolean">false</span>


<span class="token comment">### 3. Array.prototype.find()：返回数组中满足条件的第一个元素的值，如果没有则返回 undefined。</span>
		arr.find<span class="token punctuation">((</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> item <span class="token operator">&amp;&amp;</span> item <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">&#39;black&#39;</span><span class="token punctuation">)</span>	// <span class="token string">&#39;black&#39;</span>


<span class="token comment">### 4. Array.prototype.findIndex()：返回数组中满足条件的第一个元素的下标，如果没有找到则返回 -1。</span>
		arr.findIndex<span class="token punctuation">((</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> item <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">&#39;white&#39;</span><span class="token punctuation">)</span>	// <span class="token number">3</span>


<span class="token comment">### 5. 常规循环：递减循环通常效率更高。</span>
    const contains <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>array, str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin class-name">let</span> i <span class="token operator">=</span> a.length
      <span class="token keyword">while</span> <span class="token punctuation">(</span>i--<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span><span class="token operator">=</span> str<span class="token punctuation">)</span> <span class="token builtin class-name">return</span> <span class="token boolean">true</span>
        <span class="token builtin class-name">return</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    contains<span class="token punctuation">(</span>arr, <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">)</span>	// <span class="token boolean">true</span>
    contains<span class="token punctuation">(</span>arr, <span class="token string">&#39;plum&#39;</span><span class="token punctuation">)</span>	// <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="数组扁平化" tabindex="-1"><a class="header-anchor" href="#数组扁平化"><span>数组扁平化</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 数组扁平化</span>
const arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token punctuation">[</span><span class="token number">2</span>, <span class="token punctuation">[</span><span class="token number">3</span>, <span class="token punctuation">[</span><span class="token number">4</span>, <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>, <span class="token number">6</span><span class="token punctuation">]</span>    // --<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span>, <span class="token number">5</span>, <span class="token number">6</span><span class="token punctuation">]</span>

<span class="token number">1</span>. Array.prototype.flat<span class="token punctuation">(</span><span class="token punctuation">)</span>
		flat 可以指定展开多少层，也可使用 Infinity 作为参数展开无限嵌套数组
      	arr.flat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> // <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token punctuation">[</span><span class="token number">3</span>, <span class="token punctuation">[</span><span class="token number">4</span>, <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>, <span class="token number">6</span><span class="token punctuation">]</span>
        arr.flat<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> // <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token punctuation">[</span><span class="token number">4</span>, <span class="token number">5</span><span class="token punctuation">]</span>, <span class="token number">6</span><span class="token punctuation">]</span>
        arr.flat<span class="token punctuation">(</span>Infinity<span class="token punctuation">)</span> // <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span>, <span class="token number">5</span>, <span class="token number">6</span><span class="token punctuation">]</span>


<span class="token number">2</span>. Array.prototype.toString<span class="token punctuation">(</span><span class="token punctuation">)</span> 或 Array.prototype.join<span class="token punctuation">(</span><span class="token punctuation">)</span>
		如果数组的元素都是数字，可考虑使用。
        const flatten1 <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> arr.toString<span class="token punctuation">(</span><span class="token punctuation">)</span>.split<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>.map<span class="token variable"><span class="token punctuation">((</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">+</span>item<span class="token punctuation">)</span>
        flatten1<span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> [<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span>]
        const flatten2 <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> arr.join<span class="token punctuation">(</span>&#39;<span class="token punctuation">,</span>&#39;<span class="token punctuation">)</span>.split<span class="token punctuation">(</span>&#39;<span class="token punctuation">,</span>&#39;<span class="token punctuation">)</span>.map<span class="token punctuation">((</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">+</span>item<span class="token punctuation">)</span>
        flatten2<span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> [<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span>]


<span class="token number">3.</span> 扩展运算符（注：仅适用于一层）
		[].concat<span class="token punctuation">(</span>...arr<span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> [<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> [<span class="token number">3</span><span class="token punctuation">,</span> [<span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span>]]<span class="token punctuation">,</span> <span class="token number">6</span>]
		[].concat.apply<span class="token punctuation">(</span>[]<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> [<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> [<span class="token number">3</span><span class="token punctuation">,</span> [<span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span>]]<span class="token punctuation">,</span> <span class="token number">6</span>]


<span class="token number">4.</span> 序列化 <span class="token operator">+</span> 正则replace
		const str <span class="token operator">=</span> \`[\${JSON.stringify<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>.replace<span class="token punctuation">(</span><span class="token operator">/</span><span class="token punctuation">(</span>\\[<span class="token operator">|</span>\\]<span class="token punctuation">)</span><span class="token operator">/</span>g<span class="token punctuation">,</span> &#39;&#39;<span class="token punctuation">)</span>}]\`
		JSON.parse<span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> [<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span>]
		
		
<span class="token number">5.</span> 递归 Array.prototype.reduce<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> concat<span class="token punctuation">(</span><span class="token punctuation">)</span>
    const flatten <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> {
      return arr.reduce<span class="token punctuation">(</span>
        <span class="token punctuation">(</span>acc<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> Array.isArray<span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">?</span> acc.concat<span class="token punctuation">(</span>flatten<span class="token punctuation">(</span>val<span class="token punctuation">))</span></span> <span class="token builtin class-name">:</span> acc.concat<span class="token punctuation">(</span>val<span class="token punctuation">)</span>,
        <span class="token punctuation">[</span><span class="token punctuation">]</span>,
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    flatten<span class="token punctuation">(</span>arr<span class="token punctuation">)</span> // <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span>, <span class="token number">5</span>, <span class="token number">6</span><span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="从数组中删除重复的对象" tabindex="-1"><a class="header-anchor" href="#从数组中删除重复的对象"><span>从数组中删除重复的对象</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 从数组中删除重复的对象</span>

检查两个对象是否具有相同的属性和值的唯一方法是实际检查每个对象的属性和值。
	- 仅检索数组中每一项与其后的每一项，以避免多次比较同一对象。
	- 仅检查未发现与任何其他项重复的项。
	- 先检查两个对象是否具有相同的键，再检查每个属性的值是否相同。
	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@function</span> deepEqual 深度对比两个值是否相等
 * <span class="token keyword">@param</span> <span class="token punctuation">{</span>any<span class="token punctuation">}</span> value1 要对比的值
 * <span class="token keyword">@param</span> <span class="token punctuation">{</span>any<span class="token punctuation">}</span> value2 要对比的值
 * <span class="token keyword">@returns</span> <span class="token punctuation">{</span>boolean<span class="token punctuation">}</span> 是否相等
 * <span class="token keyword">@example</span> deepEqual([], [])
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> deepEqual <span class="token operator">=</span> <span class="token punctuation">(</span>value1<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> value2<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 两边类型是否一致</span>
  <span class="token keyword">const</span> <span class="token function-variable function">valueType</span> <span class="token operator">=</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">valueType</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token function">valueType</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>

  <span class="token doc-comment comment">/** 类型判断仅需要判断一边就行 */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value1 <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> value1 <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 数组的对比</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 是否等长</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>value1<span class="token punctuation">.</span>length <span class="token operator">!==</span> value2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>

      <span class="token comment">// 是否存在不同的值</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> value1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">deepEqual</span><span class="token punctuation">(</span>value1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> value2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 排除了上述所有检查，则必为相同</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Map 的对比</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value1 <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>value1<span class="token punctuation">.</span>size <span class="token operator">!==</span> value2<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> value1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">||</span> value2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">!==</span> value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Set 的对比</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value1 <span class="token keyword">instanceof</span> <span class="token class-name">Set</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>value1<span class="token punctuation">.</span>size <span class="token operator">!==</span> value2<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> value1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 其他情况的对比</span>
    <span class="token keyword">const</span> valueKeys1 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span>
    <span class="token keyword">const</span> valueKeys2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>valueKeys1<span class="token punctuation">.</span>length <span class="token operator">!==</span> valueKeys2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> valueKeys1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> value2<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">deepEqual</span><span class="token punctuation">(</span>value1<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> value2<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 是否直接相等</span>
  <span class="token keyword">return</span> value1 <span class="token operator">===</span> value2
<span class="token punctuation">}</span>


<span class="token doc-comment comment">/**
 * <span class="token keyword">@function</span> removeDuplicates 删除数组的重复项对象
 * <span class="token keyword">@param</span> <span class="token punctuation">{</span>Record&lt;string, unknown&gt;[]<span class="token punctuation">}</span> arr 可能具有重复项的数组
 * <span class="token keyword">@returns</span> <span class="token punctuation">{</span>Record&lt;string, unknown&gt;[]<span class="token punctuation">}</span> 去重后的对象数组
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/** 已经去重的数组 */</span>
  <span class="token keyword">const</span> result<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token doc-comment comment">/** 重复索引 */</span>
  <span class="token keyword">const</span> duplicatesIndices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果已经重复，则无需检查</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>duplicatesIndices<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>

    <span class="token keyword">const</span> current <span class="token operator">=</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span>

    <span class="token comment">// 此时必然是不重复的，直接加入该对象</span>
    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>

    <span class="token comment">// 遍历数组当前项之后的其他项</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>
      <span class="token keyword">let</span> comparisonIndex <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
      comparisonIndex <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
      comparisonIndex<span class="token operator">++</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果之前就已经计算到这里重复，则无需检查</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>duplicatesIndices<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>comparisonIndex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>

      <span class="token keyword">const</span> valuesEqual <span class="token operator">=</span> <span class="token function">deepEqual</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>comparisonIndex<span class="token punctuation">]</span><span class="token punctuation">)</span>

      <span class="token comment">// 检查值是否全部相等，以此来加入重复对象</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>valuesEqual<span class="token punctuation">)</span> duplicatesIndices<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>comparisonIndex<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>


<span class="token doc-comment comment">/** 测试用例 */</span>
<span class="token keyword">const</span> test1 <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;Bob&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">removeDuplicates</span><span class="token punctuation">(</span>test1<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 期望： [{ id: 1, name: &#39;Alice&#39; }, { id: 2, name: &#39;Bob&#39; }]</span>

<span class="token keyword">const</span> test2 <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;Bob&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">removeDuplicates</span><span class="token punctuation">(</span>test2<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 期望：[{ id: 1, name: &#39;Alice&#39; }, { id: 2, name: &#39;Bob&#39; }]</span>

<span class="token keyword">const</span> test3 <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">removeDuplicates</span><span class="token punctuation">(</span>test3<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 期望：[{ id: 1, name: &#39;Alice&#39; }]</span>

<span class="token keyword">const</span> test4 <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> gender<span class="token operator">:</span> <span class="token string">&#39;female&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">removeDuplicates</span><span class="token punctuation">(</span>test4<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 期望：[{ id: 1, name: &#39;Alice&#39;, age: 30 }, { id: 1, name: &#39;Alice&#39; }, { id: 1, name: &#39;Alice&#39;, gender: &#39;female&#39; }]</span>

<span class="token keyword">const</span> test5 <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token punctuation">{</span> score<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> passed<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token punctuation">{</span> score<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> passed<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token punctuation">{</span> passed<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> score<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token punctuation">{</span> score<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span> passed<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">removeDuplicates</span><span class="token punctuation">(</span>test5<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 期望：[{ id: 1, data: { score: 10, passed: true } }, { id: 2, data: { score: 8, passed: false } }]</span>

<span class="token keyword">const</span> test6 <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> tags<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;science&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;math&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> tags<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;science&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;math&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> tags<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;science&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">removeDuplicates</span><span class="token punctuation">(</span>test6<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 期望：[{ id: 1, tags: [&#39;science&#39;, &#39;math&#39;] }, { id: 2, tags: [&#39;science&#39;] }]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象" tabindex="-1"><a class="header-anchor" href="#对象"><span>对象</span></a></h2><h4 id="判断对象是否为空" tabindex="-1"><a class="header-anchor" href="#判断对象是否为空"><span>判断对象是否为空</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 判断对象是否为空</span>
<span class="token comment">### 1. JSON.stringify()：</span>
使用 <span class="token variable"><span class="token variable">\`</span>JSON.stringify<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span> 将对象转化为字符串 <span class="token string">&#39;{}&#39;</span> 来进行判断。
  const isEmpty <span class="token operator">=</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> JSON.stringify<span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">&#39;{}&#39;</span>
  isEmpty<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>	// <span class="token boolean">true</span>
  isEmpty<span class="token punctuation">(</span><span class="token punctuation">{</span> name: <span class="token string">&#39;willy&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> // <span class="token boolean">false</span>


<span class="token comment">### 2. Object.keys()</span>
		<span class="token variable"><span class="token variable">\`</span>Object.keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span> 方法会返回一个由一个给定对象的自身可枚举属性组成的数组。如果对象为空，将返回一个空数组。
    - 所以检查对象是否为空的最简单方法是检查它是否有键。
    - Object.keys<span class="token punctuation">(</span><span class="token punctuation">)</span> 传入非对象参数将强制转换为对象。
    		const isEmpty <span class="token operator">=</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> Object.keys<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>.length <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">0</span>
    		isEmpty<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>	// <span class="token boolean">true</span>
        isEmpty<span class="token punctuation">(</span><span class="token punctuation">{</span> name: <span class="token string">&#39;willy&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> // <span class="token boolean">false</span>


<span class="token comment">### 3. for...in</span>
		<span class="token variable"><span class="token variable">\`</span>for<span class="token punctuation">..</span>.in<span class="token variable">\`</span></span> 语句以任意顺序遍历一个对象的除 Symbol 以外的可枚举属性。
		根据 for<span class="token punctuation">..</span>.in 遍历对象，如果存在则返回 false，否则返回 true。
        const isEmpty <span class="token operator">=</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span>let prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            // 判断是否自身属性
            <span class="token keyword">if</span> <span class="token punctuation">(</span>Object.prototype.hasOwnProperty.call<span class="token punctuation">(</span>obj, prop<span class="token punctuation">))</span> <span class="token punctuation">{</span>
              <span class="token builtin class-name">return</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
          <span class="token builtin class-name">return</span> JSON.stringify<span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">&#39;{}&#39;</span>
        <span class="token punctuation">}</span>
        isEmpty<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>	// <span class="token boolean">true</span>
        isEmpty<span class="token punctuation">(</span><span class="token punctuation">{</span> name: <span class="token string">&#39;willy&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> // <span class="token boolean">false</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><h4 id="管道运算符" tabindex="-1"><a class="header-anchor" href="#管道运算符"><span>管道运算符</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">### 管道运算符</span>
管道是将一个函数的输出直接发送到另一个函数。

例：
伪代码表示：<span class="token variable"><span class="token variable">\`</span>output <span class="token operator">=</span> input -<span class="token operator">&gt;</span> func1 -<span class="token operator">&gt;</span> func2 -<span class="token operator">&gt;</span> func3<span class="token variable">\`</span></span>。
在这种情况下，将 <span class="token variable"><span class="token variable">\`</span>input<span class="token variable">\`</span></span> 通过管道输送到 <span class="token variable"><span class="token variable">\`</span>func1<span class="token variable">\`</span></span>，将 <span class="token variable"><span class="token variable">\`</span>func1<span class="token variable">\`</span></span> 通过管道输送到 <span class="token variable"><span class="token variable">\`</span>func2<span class="token variable">\`</span></span> 的输出，在将 <span class="token variable"><span class="token variable">\`</span>func2<span class="token variable">\`</span></span> 通过管道输送到 <span class="token variable"><span class="token variable">\`</span>func3<span class="token variable">\`</span></span>，然后再汇算结果进行输出。
在不支持管道的情况下，实现方式为：<span class="token variable"><span class="token variable">\`</span>const output <span class="token operator">=</span> func3<span class="token punctuation">(</span>func2<span class="token punctuation">(</span>func1<span class="token punctuation">(</span>input<span class="token punctuation">))</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>。

手动实现：
- 使用扩展运算符（<span class="token variable"><span class="token variable">\`</span><span class="token punctuation">..</span>.<span class="token variable">\`</span></span>）允许将任意数量的参数传递到创建 <span class="token variable"><span class="token variable">\`</span>pipe<span class="token variable">\`</span></span> 函数中，传入的参数都存放在 <span class="token variable"><span class="token variable">\`</span>args<span class="token variable">\`</span></span> 数组中。
- 使用 <span class="token variable"><span class="token variable">\`</span>Array.prototype.reduce<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span> 方法遍历数组 <span class="token variable"><span class="token variable">\`</span>args<span class="token variable">\`</span></span>。执行 <span class="token variable"><span class="token variable">\`</span>reduce<span class="token variable">\`</span></span> 时，累加器会将前一个累加器传递给当前元素的结果。

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/** 管道函数 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">pipe</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> el</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">el</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token string">&#39;Front End Interview&#39;</span>

<span class="token keyword">const</span> <span class="token function-variable function">toLowerCase</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">addHyphens</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 案例：对标题转化为小写，并且通过 \`-\` 来进行单词的连接</span>
<span class="token function">pipe</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> toLowerCase<span class="token punctuation">,</span> addHyphens<span class="token punctuation">)</span> <span class="token comment">// &quot;front-end-interview&quot;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="网络" tabindex="-1"><a class="header-anchor" href="#网络"><span>网络</span></a></h2><h4 id="web应用从服务器主动推送数据到客户端的方式" tabindex="-1"><a class="header-anchor" href="#web应用从服务器主动推送数据到客户端的方式"><span>WEB应用从服务器主动推送数据到客户端的方式</span></a></h4><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## WEB应用从服务器主动推送数据到客户端的方式</span>
<span class="token number">1</span>. html5 的 websocket
<span class="token number">2</span>. websocket 通过 Flash
<span class="token number">3</span>. XHR 长时间连接
<span class="token number">4</span>. 不可见的 iframe
<span class="token number">5</span>. <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span> 标签的长时间连接<span class="token punctuation">(</span>可跨域<span class="token punctuation">)</span>
<span class="token number">6</span>. ajax 轮询调用请求



<span class="token comment">### Ajax 轮询</span>
Ajax 轮询是定时通过 Ajax 查询服务端，客户端按规定定时向服务端发送 ajax 请求，服务器接到请求后马上返回响应信息并关闭连接。
优点： 逻辑简单容易实现。
缺点：
    * 需要不断向服务器发送消息询问，请求中有大半是无用，浪费带宽和服务器资源。
    * 通过模拟服务器发起的通信，不是实时通信，不顾及应用的状态改变并且盲目检查更新，导致服务器资源浪费，且会加重网络负载，拖累服务器。
    * 前端长时间处于轮询占用CPU，并且由于JS是单线程，轮询间隔无法保证。
实例：适于小型应用。


<span class="token comment">### WebSocket 通过 Flash</span>
Flash Socket：在页面中内嵌入一个使用了Socket类的 <span class="token variable"><span class="token variable">\`</span>Flash<span class="token variable">\`</span></span> 程序，<span class="token variable"><span class="token variable">\`</span>JavaScript<span class="token variable">\`</span></span>通过调用此<span class="token variable"><span class="token variable">\`</span>Flash<span class="token variable">\`</span></span>程序提供的Socket接口与服务器端的Socket接口进行通信，JavaScript在收到服务器端传送的信息后控制页面的显示。
 * 优点：实现真正的即时通信，而不是伪即时。
 * 缺点：客户端必须安装Flash插件；非HTTP协议，无法自动穿越防火墙。
 * 实例：网络互动游戏。


<span class="token comment">### XHR 长时间连接（长轮询）</span>
客户端打开一个到服务器端的 <span class="token variable"><span class="token variable">\`</span>AJAX<span class="token variable">\`</span></span> 请求然后等待响应；服务器端需要一些特定的功能来允许请求被挂起，只要一有事件发生，服务器端就会在挂起的请求中送回响应并关闭该请求。
客户端 JavaScript 响应处理函数会在处理完服务器返回的信息后，再次发出请求，重新建立连接；如此循环。
优点： 
 		 * 对于前端来说实现简单，与普通的网络请求没有太大区别。
 		 * 在无消息的情况下不会频繁的请求。
缺点： 
 		 * 需要服务器端有特殊的功能来临时挂起连接，服务器hold连接会消耗资源。
 		 * 客户端发起的连接较多时，服务器端会长期保持多个连接，具有一定的风险。
实例：WebQQ、Hi网页版、Facebook IM。


<span class="token comment">### 不可见的iframe（长连接）</span>
在页面中嵌入一个隐藏的<span class="token variable"><span class="token variable">\`</span>iframe<span class="token variable">\`</span></span>，将这个隐藏的<span class="token variable"><span class="token variable">\`</span>iframe<span class="token variable">\`</span></span>的<span class="token variable"><span class="token variable">\`</span>src<span class="token variable">\`</span></span>属性设置为对一个长连接的请求或者采用XRH请求，服务器端就能源源不断地往客户端输入数据。
 * 优点：消息即时到达，不发无用的请求；管理起来也相对方便。
 * 缺点：服务器维护一个长连接会增加开销。
 * 实例：Gmail聊天


<span class="token comment">### \`&lt;script&gt;\` 标签</span>
把 script 标签附加到页面上以让脚本执行。服务器会挂起连接直到有事件发生，接着把脚本内容发送回浏览器，然后重新打开另一个 script 标签来获取下一个事件，从而实现长轮询的模型。
	 * 缺点：前后端实现都很麻烦
	 
	 
<span class="token comment">### html5 websocket</span>
<span class="token variable"><span class="token variable">\`</span>WebSocket<span class="token variable">\`</span></span>是HTML5开始提供的一种在单个 <span class="token variable"><span class="token variable">\`</span>TCP<span class="token variable">\`</span></span> 连接上进行全双工通讯的协议。
在WebSocket API中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。
 * 优点： 实现简单、可靠。
 * 缺点： 部分低版本浏览器可能不支持。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript"><span>TypeScript</span></a></h2><h4 id="add函数-要求参数类型相同-否则报错" tabindex="-1"><a class="header-anchor" href="#add函数-要求参数类型相同-否则报错"><span>add函数，要求参数类型相同，否则报错</span></a></h4><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## add函数，要求参数类型相同，否则报错</span>
const func <span class="token operator">=</span> <span class="token punctuation">(</span>a, b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> a + b<span class="token punctuation">;</span> 要求编写Typescript，要求a，b参数类型一致，都为number或者都为string


<span class="token comment">### 1. 使用 扩展运算符 + 数组设定类型</span>
 const <span class="token function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">..</span>.values: Array<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token operator">|</span> Array<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
     <span class="token builtin class-name">return</span> values.reduce<span class="token punctuation">((</span>total, num<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> total + num, <span class="token number">0</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
 add<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">)</span>
 add<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span>, <span class="token string">&#39;b&#39;</span>, <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span>
 add<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span>, <span class="token number">1</span>, <span class="token number">2</span><span class="token punctuation">)</span>


<span class="token comment">### 2. 函数重载</span>
interface Add <span class="token punctuation">{</span>
    <span class="token punctuation">(</span>a: string, b: string<span class="token punctuation">)</span>: string
    <span class="token punctuation">(</span>a: number, b: number<span class="token punctuation">)</span>: number
<span class="token punctuation">}</span>
const add: Add <span class="token operator">=</span> <span class="token punctuation">(</span>a, b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
   <span class="token builtin class-name">return</span> values.reduce<span class="token punctuation">((</span>total, num<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> total + num, <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>


<span class="token comment">### 3. 泛型（答案错误的，仅供参考，在传递字符串的时候会报错）</span>
<span class="token builtin class-name">type</span> IFun<span class="token operator">&lt;</span>T extends number <span class="token operator">|</span> string<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">..</span>.values: Array<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> T extends number ? number <span class="token builtin class-name">:</span> string
const add: IFun<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">..</span>.values<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin class-name">return</span> values.reduce<span class="token punctuation">((</span>total, num<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> total + num, <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
add<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span>, <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span> // 报错
add<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span>, <span class="token number">1</span><span class="token punctuation">)</span> // 报错
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式"><span>设计模式</span></a></h2><h4 id="工厂模式" tabindex="-1"><a class="header-anchor" href="#工厂模式"><span>工厂模式</span></a></h4><blockquote><p><strong>工厂模式：同样的形式参数返回不同的实例</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/** 工厂构造函数 */</span>
<span class="token keyword">function</span> <span class="token function">Superman</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;超级管理员&#39;</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">CommonMan</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;普通用户&#39;</span> <span class="token punctuation">}</span>

<span class="token doc-comment comment">/** 简单工厂 */</span>
<span class="token keyword">function</span> <span class="token function">Factory</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">Factory</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getInstance</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">className</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&#39;new&#39;</span> <span class="token operator">+</span> className <span class="token operator">+</span> <span class="token string">&#39;()&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;参数错误，不存在该工厂构造函数&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> obj1 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&#39;Superman&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&#39;CommonMan&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> obj2<span class="token punctuation">.</span>name<span class="token punctuation">)</span>	<span class="token comment">// 超级管理员， 普通用户</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="代理模式" tabindex="-1"><a class="header-anchor" href="#代理模式"><span>代理模式</span></a></h4><blockquote><p><strong>代理模式：新建个类包装老类，对被包装的类进行管控及分发</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;willysliang&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayAge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>

<span class="token doc-comment comment">/** 代理类 */</span>
<span class="token keyword">function</span> <span class="token function">PersonProxy</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> that <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 代理调用 Person 的方法</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">callMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">functionName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">try</span> <span class="token punctuation">{</span>
         that<span class="token punctuation">.</span>person<span class="token punctuation">[</span>functionName<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>	<span class="token comment">// 代理</span>
       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;参数错误，原对象不存在该方法&#39;</span><span class="token punctuation">)</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
person1<span class="token punctuation">.</span><span class="token function">callMethod</span><span class="token punctuation">(</span><span class="token string">&#39;sayName&#39;</span><span class="token punctuation">)</span>
person1<span class="token punctuation">.</span><span class="token function">callMethod</span><span class="token punctuation">(</span><span class="token string">&#39;sayAge&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 代理调用Person的方法 sayAge()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式"><span>单例模式</span></a></h4><blockquote><p><strong>单例模式：任意对象都是单例，无须特别处理</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// demo1</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;willysliang&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">24</span> <span class="token punctuation">}</span>


<span class="token comment">// demo2</span>
<span class="token keyword">let</span> box <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token keyword">const</span> <span class="token function-variable function">createBox</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">_a<span class="token punctuation">,</span> _b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>box<span class="token punctuation">)</span> <span class="token punctuation">{</span> box <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    box<span class="token punctuation">.</span>a <span class="token operator">=</span> _a
    box<span class="token punctuation">.</span>b <span class="token operator">=</span> _b
    <span class="token keyword">return</span> box
<span class="token punctuation">}</span>

<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token function">createBox</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span> <span class="token comment">// {a: 3, b: 6}</span>

<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token function">createBox</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span> <span class="token comment">// {a: 10, b: 20}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span> <span class="token comment">// {a: 10, b: 20}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="发布订阅模式" tabindex="-1"><a class="header-anchor" href="#发布订阅模式"><span>发布订阅模式</span></a></h4><blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 发布者</span>
<span class="token keyword">function</span> <span class="token function">Publisher</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token class-name">Publisher</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">addListener</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">listener</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token class-name">Publisher</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">removeListener</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">listener</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>listener<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token class-name">Publisher</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">notify</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">const</span> listener <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> listener <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         listener<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 订阅者</span>
<span class="token keyword">function</span> <span class="token function">Subscriber</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>
<span class="token class-name">Subscriber</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">process</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> publisher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Publisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
publisher<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Subscriber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
publisher<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Subscriber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
publisher<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;willy&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">24</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 发布一个对象到所有订阅者</span>
publisher<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token string">&#39;this is string value&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 发布一个字符串到所有订阅者</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>`,33),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","前端逻辑.html.vue"]]),k=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/%E5%89%8D%E7%AB%AF%E9%80%BB%E8%BE%91.html","title":"","lang":"zh-CN","frontmatter":{"Author":"willysliang","CreateTime":"2023-03-10T11:49:31.000Z","Modifier":"willysliang","ModifiedTime":"2023-03-10T11:51:23.000Z","Description":"前端逻辑"},"headers":[{"level":2,"title":"前端逻辑","slug":"前端逻辑","link":"#前端逻辑","children":[]},{"level":2,"title":"数组","slug":"数组","link":"#数组","children":[]},{"level":2,"title":"对象","slug":"对象","link":"#对象","children":[]},{"level":2,"title":"函数","slug":"函数","link":"#函数","children":[]},{"level":2,"title":"网络","slug":"网络","link":"#网络","children":[]},{"level":2,"title":"TypeScript","slug":"typescript","link":"#typescript","children":[]},{"level":2,"title":"设计模式","slug":"设计模式","link":"#设计模式","children":[]}],"git":{"updatedTime":1708562968000,"contributors":[{"name":"willy","email":"willysliang","commits":1},{"name":"willy","email":"willysliang@qq.com","commits":1}]},"filePathRelative":"前端进阶/前端逻辑.md"}');export{r as comp,k as data};
